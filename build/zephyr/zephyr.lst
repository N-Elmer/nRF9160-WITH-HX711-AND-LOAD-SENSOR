
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 20 00 20 a9 33 00 00 6f 6f 00 00 7d 33 00 00     . . .3..oo..}3..
  10:	7d 33 00 00 7d 33 00 00 7d 33 00 00 7d 33 00 00     }3..}3..}3..}3..
	...
  2c:	f5 2c 00 00 7d 33 00 00 00 00 00 00 9d 2c 00 00     .,..}3.......,..
  3c:	7d 33 00 00                                         }3..

00000040 <_irq_vector_table>:
  40:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  50:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  60:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  70:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  80:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  90:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  a0:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  b0:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  c0:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  d0:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  e0:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
  f0:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
 100:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
 110:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
 120:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
 130:	75 2d 00 00 75 2d 00 00 75 2d 00 00 75 2d 00 00     u-..u-..u-..u-..
 140:	75 2d 00 00                                         u-..

Disassembly of section text:

00000148 <__aeabi_drsub>:
     148:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     14c:	e002      	b.n	154 <__adddf3>
     14e:	bf00      	nop

00000150 <__aeabi_dsub>:
     150:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000154 <__adddf3>:
     154:	b530      	push	{r4, r5, lr}
     156:	ea4f 0441 	mov.w	r4, r1, lsl #1
     15a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     15e:	ea94 0f05 	teq	r4, r5
     162:	bf08      	it	eq
     164:	ea90 0f02 	teqeq	r0, r2
     168:	bf1f      	itttt	ne
     16a:	ea54 0c00 	orrsne.w	ip, r4, r0
     16e:	ea55 0c02 	orrsne.w	ip, r5, r2
     172:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     176:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     17a:	f000 80e2 	beq.w	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     17e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     182:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     186:	bfb8      	it	lt
     188:	426d      	neglt	r5, r5
     18a:	dd0c      	ble.n	1a6 <__data_size+0x32>
     18c:	442c      	add	r4, r5
     18e:	ea80 0202 	eor.w	r2, r0, r2
     192:	ea81 0303 	eor.w	r3, r1, r3
     196:	ea82 0000 	eor.w	r0, r2, r0
     19a:	ea83 0101 	eor.w	r1, r3, r1
     19e:	ea80 0202 	eor.w	r2, r0, r2
     1a2:	ea81 0303 	eor.w	r3, r1, r3
     1a6:	2d36      	cmp	r5, #54	; 0x36
     1a8:	bf88      	it	hi
     1aa:	bd30      	pophi	{r4, r5, pc}
     1ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1bc:	d002      	beq.n	1c4 <__data_size+0x50>
     1be:	4240      	negs	r0, r0
     1c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     1c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     1cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     1d0:	d002      	beq.n	1d8 <__data_size+0x64>
     1d2:	4252      	negs	r2, r2
     1d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     1d8:	ea94 0f05 	teq	r4, r5
     1dc:	f000 80a7 	beq.w	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     1e0:	f1a4 0401 	sub.w	r4, r4, #1
     1e4:	f1d5 0e20 	rsbs	lr, r5, #32
     1e8:	db0d      	blt.n	206 <__data_size+0x92>
     1ea:	fa02 fc0e 	lsl.w	ip, r2, lr
     1ee:	fa22 f205 	lsr.w	r2, r2, r5
     1f2:	1880      	adds	r0, r0, r2
     1f4:	f141 0100 	adc.w	r1, r1, #0
     1f8:	fa03 f20e 	lsl.w	r2, r3, lr
     1fc:	1880      	adds	r0, r0, r2
     1fe:	fa43 f305 	asr.w	r3, r3, r5
     202:	4159      	adcs	r1, r3
     204:	e00e      	b.n	224 <__data_size+0xb0>
     206:	f1a5 0520 	sub.w	r5, r5, #32
     20a:	f10e 0e20 	add.w	lr, lr, #32
     20e:	2a01      	cmp	r2, #1
     210:	fa03 fc0e 	lsl.w	ip, r3, lr
     214:	bf28      	it	cs
     216:	f04c 0c02 	orrcs.w	ip, ip, #2
     21a:	fa43 f305 	asr.w	r3, r3, r5
     21e:	18c0      	adds	r0, r0, r3
     220:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     224:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     228:	d507      	bpl.n	23a <__data_size+0xc6>
     22a:	f04f 0e00 	mov.w	lr, #0
     22e:	f1dc 0c00 	rsbs	ip, ip, #0
     232:	eb7e 0000 	sbcs.w	r0, lr, r0
     236:	eb6e 0101 	sbc.w	r1, lr, r1
     23a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     23e:	d31b      	bcc.n	278 <__data_size+0x104>
     240:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     244:	d30c      	bcc.n	260 <__data_size+0xec>
     246:	0849      	lsrs	r1, r1, #1
     248:	ea5f 0030 	movs.w	r0, r0, rrx
     24c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     250:	f104 0401 	add.w	r4, r4, #1
     254:	ea4f 5244 	mov.w	r2, r4, lsl #21
     258:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     25c:	f080 809a 	bcs.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     260:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     264:	bf08      	it	eq
     266:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     26a:	f150 0000 	adcs.w	r0, r0, #0
     26e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     272:	ea41 0105 	orr.w	r1, r1, r5
     276:	bd30      	pop	{r4, r5, pc}
     278:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     27c:	4140      	adcs	r0, r0
     27e:	eb41 0101 	adc.w	r1, r1, r1
     282:	3c01      	subs	r4, #1
     284:	bf28      	it	cs
     286:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     28a:	d2e9      	bcs.n	260 <__data_size+0xec>
     28c:	f091 0f00 	teq	r1, #0
     290:	bf04      	itt	eq
     292:	4601      	moveq	r1, r0
     294:	2000      	moveq	r0, #0
     296:	fab1 f381 	clz	r3, r1
     29a:	bf08      	it	eq
     29c:	3320      	addeq	r3, #32
     29e:	f1a3 030b 	sub.w	r3, r3, #11
     2a2:	f1b3 0220 	subs.w	r2, r3, #32
     2a6:	da0c      	bge.n	2c2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x42>
     2a8:	320c      	adds	r2, #12
     2aa:	dd08      	ble.n	2be <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3e>
     2ac:	f102 0c14 	add.w	ip, r2, #20
     2b0:	f1c2 020c 	rsb	r2, r2, #12
     2b4:	fa01 f00c 	lsl.w	r0, r1, ip
     2b8:	fa21 f102 	lsr.w	r1, r1, r2
     2bc:	e00c      	b.n	2d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x58>
     2be:	f102 0214 	add.w	r2, r2, #20
     2c2:	bfd8      	it	le
     2c4:	f1c2 0c20 	rsble	ip, r2, #32
     2c8:	fa01 f102 	lsl.w	r1, r1, r2
     2cc:	fa20 fc0c 	lsr.w	ip, r0, ip
     2d0:	bfdc      	itt	le
     2d2:	ea41 010c 	orrle.w	r1, r1, ip
     2d6:	4090      	lslle	r0, r2
     2d8:	1ae4      	subs	r4, r4, r3
     2da:	bfa2      	ittt	ge
     2dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     2e0:	4329      	orrge	r1, r5
     2e2:	bd30      	popge	{r4, r5, pc}
     2e4:	ea6f 0404 	mvn.w	r4, r4
     2e8:	3c1f      	subs	r4, #31
     2ea:	da1c      	bge.n	326 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x26>
     2ec:	340c      	adds	r4, #12
     2ee:	dc0e      	bgt.n	30e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe>
     2f0:	f104 0414 	add.w	r4, r4, #20
     2f4:	f1c4 0220 	rsb	r2, r4, #32
     2f8:	fa20 f004 	lsr.w	r0, r0, r4
     2fc:	fa01 f302 	lsl.w	r3, r1, r2
     300:	ea40 0003 	orr.w	r0, r0, r3
     304:	fa21 f304 	lsr.w	r3, r1, r4
     308:	ea45 0103 	orr.w	r1, r5, r3
     30c:	bd30      	pop	{r4, r5, pc}
     30e:	f1c4 040c 	rsb	r4, r4, #12
     312:	f1c4 0220 	rsb	r2, r4, #32
     316:	fa20 f002 	lsr.w	r0, r0, r2
     31a:	fa01 f304 	lsl.w	r3, r1, r4
     31e:	ea40 0003 	orr.w	r0, r0, r3
     322:	4629      	mov	r1, r5
     324:	bd30      	pop	{r4, r5, pc}
     326:	fa21 f004 	lsr.w	r0, r1, r4
     32a:	4629      	mov	r1, r5
     32c:	bd30      	pop	{r4, r5, pc}
     32e:	f094 0f00 	teq	r4, #0
     332:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     336:	bf06      	itte	eq
     338:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     33c:	3401      	addeq	r4, #1
     33e:	3d01      	subne	r5, #1
     340:	e74e      	b.n	1e0 <__data_size+0x6c>
     342:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     346:	bf18      	it	ne
     348:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     34c:	d029      	beq.n	3a2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa2>
     34e:	ea94 0f05 	teq	r4, r5
     352:	bf08      	it	eq
     354:	ea90 0f02 	teqeq	r0, r2
     358:	d005      	beq.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     35a:	ea54 0c00 	orrs.w	ip, r4, r0
     35e:	bf04      	itt	eq
     360:	4619      	moveq	r1, r3
     362:	4610      	moveq	r0, r2
     364:	bd30      	pop	{r4, r5, pc}
     366:	ea91 0f03 	teq	r1, r3
     36a:	bf1e      	ittt	ne
     36c:	2100      	movne	r1, #0
     36e:	2000      	movne	r0, #0
     370:	bd30      	popne	{r4, r5, pc}
     372:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     376:	d105      	bne.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     378:	0040      	lsls	r0, r0, #1
     37a:	4149      	adcs	r1, r1
     37c:	bf28      	it	cs
     37e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     382:	bd30      	pop	{r4, r5, pc}
     384:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     388:	bf3c      	itt	cc
     38a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     38e:	bd30      	popcc	{r4, r5, pc}
     390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     394:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     398:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     39c:	f04f 0000 	mov.w	r0, #0
     3a0:	bd30      	pop	{r4, r5, pc}
     3a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3a6:	bf1a      	itte	ne
     3a8:	4619      	movne	r1, r3
     3aa:	4610      	movne	r0, r2
     3ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3b0:	bf1c      	itt	ne
     3b2:	460b      	movne	r3, r1
     3b4:	4602      	movne	r2, r0
     3b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3ba:	bf06      	itte	eq
     3bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3c0:	ea91 0f03 	teqeq	r1, r3
     3c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     3c8:	bd30      	pop	{r4, r5, pc}
     3ca:	bf00      	nop

000003cc <__aeabi_ui2d>:
     3cc:	f090 0f00 	teq	r0, #0
     3d0:	bf04      	itt	eq
     3d2:	2100      	moveq	r1, #0
     3d4:	4770      	bxeq	lr
     3d6:	b530      	push	{r4, r5, lr}
     3d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3e0:	f04f 0500 	mov.w	r5, #0
     3e4:	f04f 0100 	mov.w	r1, #0
     3e8:	e750      	b.n	28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     3ea:	bf00      	nop

000003ec <__aeabi_i2d>:
     3ec:	f090 0f00 	teq	r0, #0
     3f0:	bf04      	itt	eq
     3f2:	2100      	moveq	r1, #0
     3f4:	4770      	bxeq	lr
     3f6:	b530      	push	{r4, r5, lr}
     3f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     400:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     404:	bf48      	it	mi
     406:	4240      	negmi	r0, r0
     408:	f04f 0100 	mov.w	r1, #0
     40c:	e73e      	b.n	28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     40e:	bf00      	nop

00000410 <__aeabi_f2d>:
     410:	0042      	lsls	r2, r0, #1
     412:	ea4f 01e2 	mov.w	r1, r2, asr #3
     416:	ea4f 0131 	mov.w	r1, r1, rrx
     41a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     41e:	bf1f      	itttt	ne
     420:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     424:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     428:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     42c:	4770      	bxne	lr
     42e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     432:	bf08      	it	eq
     434:	4770      	bxeq	lr
     436:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     43a:	bf04      	itt	eq
     43c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     440:	4770      	bxeq	lr
     442:	b530      	push	{r4, r5, lr}
     444:	f44f 7460 	mov.w	r4, #896	; 0x380
     448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     44c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     450:	e71c      	b.n	28c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc>
     452:	bf00      	nop

00000454 <__aeabi_ul2d>:
     454:	ea50 0201 	orrs.w	r2, r0, r1
     458:	bf08      	it	eq
     45a:	4770      	bxeq	lr
     45c:	b530      	push	{r4, r5, lr}
     45e:	f04f 0500 	mov.w	r5, #0
     462:	e00a      	b.n	47a <__aeabi_l2d+0x16>

00000464 <__aeabi_l2d>:
     464:	ea50 0201 	orrs.w	r2, r0, r1
     468:	bf08      	it	eq
     46a:	4770      	bxeq	lr
     46c:	b530      	push	{r4, r5, lr}
     46e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     472:	d502      	bpl.n	47a <__aeabi_l2d+0x16>
     474:	4240      	negs	r0, r0
     476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     47a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     47e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     486:	f43f aed8 	beq.w	23a <__data_size+0xc6>
     48a:	f04f 0203 	mov.w	r2, #3
     48e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     492:	bf18      	it	ne
     494:	3203      	addne	r2, #3
     496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     49a:	bf18      	it	ne
     49c:	3203      	addne	r2, #3
     49e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4a2:	f1c2 0320 	rsb	r3, r2, #32
     4a6:	fa00 fc03 	lsl.w	ip, r0, r3
     4aa:	fa20 f002 	lsr.w	r0, r0, r2
     4ae:	fa01 fe03 	lsl.w	lr, r1, r3
     4b2:	ea40 000e 	orr.w	r0, r0, lr
     4b6:	fa21 f102 	lsr.w	r1, r1, r2
     4ba:	4414      	add	r4, r2
     4bc:	e6bd      	b.n	23a <__data_size+0xc6>
     4be:	bf00      	nop

000004c0 <__aeabi_dmul>:
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     4ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     4ce:	bf1d      	ittte	ne
     4d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     4d4:	ea94 0f0c 	teqne	r4, ip
     4d8:	ea95 0f0c 	teqne	r5, ip
     4dc:	f000 f8de 	bleq	69c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b4>
     4e0:	442c      	add	r4, r5
     4e2:	ea81 0603 	eor.w	r6, r1, r3
     4e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4f2:	bf18      	it	ne
     4f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     500:	d038      	beq.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
     502:	fba0 ce02 	umull	ip, lr, r0, r2
     506:	f04f 0500 	mov.w	r5, #0
     50a:	fbe1 e502 	umlal	lr, r5, r1, r2
     50e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     512:	fbe0 e503 	umlal	lr, r5, r0, r3
     516:	f04f 0600 	mov.w	r6, #0
     51a:	fbe1 5603 	umlal	r5, r6, r1, r3
     51e:	f09c 0f00 	teq	ip, #0
     522:	bf18      	it	ne
     524:	f04e 0e01 	orrne.w	lr, lr, #1
     528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     52c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     534:	d204      	bcs.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
     536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     53a:	416d      	adcs	r5, r5
     53c:	eb46 0606 	adc.w	r6, r6, r6
     540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     54c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     558:	bf88      	it	hi
     55a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     55e:	d81e      	bhi.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
     560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     564:	bf08      	it	eq
     566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     56a:	f150 0000 	adcs.w	r0, r0, #0
     56e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     572:	bd70      	pop	{r4, r5, r6, pc}
     574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     578:	ea46 0101 	orr.w	r1, r6, r1
     57c:	ea40 0002 	orr.w	r0, r0, r2
     580:	ea81 0103 	eor.w	r1, r1, r3
     584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     588:	bfc2      	ittt	gt
     58a:	ebd4 050c 	rsbsgt	r5, r4, ip
     58e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     592:	bd70      	popgt	{r4, r5, r6, pc}
     594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     598:	f04f 0e00 	mov.w	lr, #0
     59c:	3c01      	subs	r4, #1
     59e:	f300 80ab 	bgt.w	6f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x210>
     5a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5a6:	bfde      	ittt	le
     5a8:	2000      	movle	r0, #0
     5aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5ae:	bd70      	pople	{r4, r5, r6, pc}
     5b0:	f1c4 0400 	rsb	r4, r4, #0
     5b4:	3c20      	subs	r4, #32
     5b6:	da35      	bge.n	624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>
     5b8:	340c      	adds	r4, #12
     5ba:	dc1b      	bgt.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
     5bc:	f104 0414 	add.w	r4, r4, #20
     5c0:	f1c4 0520 	rsb	r5, r4, #32
     5c4:	fa00 f305 	lsl.w	r3, r0, r5
     5c8:	fa20 f004 	lsr.w	r0, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea40 0002 	orr.w	r0, r0, r2
     5d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     5d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     5dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5e0:	fa21 f604 	lsr.w	r6, r1, r4
     5e4:	eb42 0106 	adc.w	r1, r2, r6
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f1c4 040c 	rsb	r4, r4, #12
     5f8:	f1c4 0520 	rsb	r5, r4, #32
     5fc:	fa00 f304 	lsl.w	r3, r0, r4
     600:	fa20 f005 	lsr.w	r0, r0, r5
     604:	fa01 f204 	lsl.w	r2, r1, r4
     608:	ea40 0002 	orr.w	r0, r0, r2
     60c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     614:	f141 0100 	adc.w	r1, r1, #0
     618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     61c:	bf08      	it	eq
     61e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     622:	bd70      	pop	{r4, r5, r6, pc}
     624:	f1c4 0520 	rsb	r5, r4, #32
     628:	fa00 f205 	lsl.w	r2, r0, r5
     62c:	ea4e 0e02 	orr.w	lr, lr, r2
     630:	fa20 f304 	lsr.w	r3, r0, r4
     634:	fa01 f205 	lsl.w	r2, r1, r5
     638:	ea43 0302 	orr.w	r3, r3, r2
     63c:	fa21 f004 	lsr.w	r0, r1, r4
     640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     644:	fa21 f204 	lsr.w	r2, r1, r4
     648:	ea20 0002 	bic.w	r0, r0, r2
     64c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     654:	bf08      	it	eq
     656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     65a:	bd70      	pop	{r4, r5, r6, pc}
     65c:	f094 0f00 	teq	r4, #0
     660:	d10f      	bne.n	682 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19a>
     662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     666:	0040      	lsls	r0, r0, #1
     668:	eb41 0101 	adc.w	r1, r1, r1
     66c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     670:	bf08      	it	eq
     672:	3c01      	subeq	r4, #1
     674:	d0f7      	beq.n	666 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17e>
     676:	ea41 0106 	orr.w	r1, r1, r6
     67a:	f095 0f00 	teq	r5, #0
     67e:	bf18      	it	ne
     680:	4770      	bxne	lr
     682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     686:	0052      	lsls	r2, r2, #1
     688:	eb43 0303 	adc.w	r3, r3, r3
     68c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     690:	bf08      	it	eq
     692:	3d01      	subeq	r5, #1
     694:	d0f7      	beq.n	686 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19e>
     696:	ea43 0306 	orr.w	r3, r3, r6
     69a:	4770      	bx	lr
     69c:	ea94 0f0c 	teq	r4, ip
     6a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6a4:	bf18      	it	ne
     6a6:	ea95 0f0c 	teqne	r5, ip
     6aa:	d00c      	beq.n	6c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1de>
     6ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6b0:	bf18      	it	ne
     6b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6b6:	d1d1      	bne.n	65c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x174>
     6b8:	ea81 0103 	eor.w	r1, r1, r3
     6bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6c0:	f04f 0000 	mov.w	r0, #0
     6c4:	bd70      	pop	{r4, r5, r6, pc}
     6c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6ca:	bf06      	itte	eq
     6cc:	4610      	moveq	r0, r2
     6ce:	4619      	moveq	r1, r3
     6d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6d4:	d019      	beq.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     6d6:	ea94 0f0c 	teq	r4, ip
     6da:	d102      	bne.n	6e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1fa>
     6dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     6e0:	d113      	bne.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     6e2:	ea95 0f0c 	teq	r5, ip
     6e6:	d105      	bne.n	6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>
     6e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6ec:	bf1c      	itt	ne
     6ee:	4610      	movne	r0, r2
     6f0:	4619      	movne	r1, r3
     6f2:	d10a      	bne.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     6f4:	ea81 0103 	eor.w	r1, r1, r3
     6f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     704:	f04f 0000 	mov.w	r0, #0
     708:	bd70      	pop	{r4, r5, r6, pc}
     70a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     70e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     712:	bd70      	pop	{r4, r5, r6, pc}

00000714 <__aeabi_ddiv>:
     714:	b570      	push	{r4, r5, r6, lr}
     716:	f04f 0cff 	mov.w	ip, #255	; 0xff
     71a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     71e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     722:	bf1d      	ittte	ne
     724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     728:	ea94 0f0c 	teqne	r4, ip
     72c:	ea95 0f0c 	teqne	r5, ip
     730:	f000 f8a7 	bleq	882 <CONFIG_ISR_STACK_SIZE+0x82>
     734:	eba4 0405 	sub.w	r4, r4, r5
     738:	ea81 0e03 	eor.w	lr, r1, r3
     73c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     740:	ea4f 3101 	mov.w	r1, r1, lsl #12
     744:	f000 8088 	beq.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     748:	ea4f 3303 	mov.w	r3, r3, lsl #12
     74c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     758:	ea4f 2202 	mov.w	r2, r2, lsl #8
     75c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     764:	ea4f 2600 	mov.w	r6, r0, lsl #8
     768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     76c:	429d      	cmp	r5, r3
     76e:	bf08      	it	eq
     770:	4296      	cmpeq	r6, r2
     772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     776:	f504 7440 	add.w	r4, r4, #768	; 0x300
     77a:	d202      	bcs.n	782 <__aeabi_ddiv+0x6e>
     77c:	085b      	lsrs	r3, r3, #1
     77e:	ea4f 0232 	mov.w	r2, r2, rrx
     782:	1ab6      	subs	r6, r6, r2
     784:	eb65 0503 	sbc.w	r5, r5, r3
     788:	085b      	lsrs	r3, r3, #1
     78a:	ea4f 0232 	mov.w	r2, r2, rrx
     78e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 000c 	orrcs.w	r0, r0, ip
     7a8:	085b      	lsrs	r3, r3, #1
     7aa:	ea4f 0232 	mov.w	r2, r2, rrx
     7ae:	ebb6 0e02 	subs.w	lr, r6, r2
     7b2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7b6:	bf22      	ittt	cs
     7b8:	1ab6      	subcs	r6, r6, r2
     7ba:	4675      	movcs	r5, lr
     7bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	ea4f 0232 	mov.w	r2, r2, rrx
     7c6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ca:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ce:	bf22      	ittt	cs
     7d0:	1ab6      	subcs	r6, r6, r2
     7d2:	4675      	movcs	r5, lr
     7d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     7d8:	085b      	lsrs	r3, r3, #1
     7da:	ea4f 0232 	mov.w	r2, r2, rrx
     7de:	ebb6 0e02 	subs.w	lr, r6, r2
     7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7e6:	bf22      	ittt	cs
     7e8:	1ab6      	subcs	r6, r6, r2
     7ea:	4675      	movcs	r5, lr
     7ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7f0:	ea55 0e06 	orrs.w	lr, r5, r6
     7f4:	d018      	beq.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
     7f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
     802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     80a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     80e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     812:	d1c0      	bne.n	796 <__aeabi_ddiv+0x82>
     814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     818:	d10b      	bne.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     81a:	ea41 0100 	orr.w	r1, r1, r0
     81e:	f04f 0000 	mov.w	r0, #0
     822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     826:	e7b6      	b.n	796 <__aeabi_ddiv+0x82>
     828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     82c:	bf04      	itt	eq
     82e:	4301      	orreq	r1, r0
     830:	2000      	moveq	r0, #0
     832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     836:	bf88      	it	hi
     838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     83c:	f63f aeaf 	bhi.w	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
     840:	ebb5 0c03 	subs.w	ip, r5, r3
     844:	bf04      	itt	eq
     846:	ebb6 0c02 	subseq.w	ip, r6, r2
     84a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     84e:	f150 0000 	adcs.w	r0, r0, #0
     852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     856:	bd70      	pop	{r4, r5, r6, pc}
     858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     85c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     864:	bfc2      	ittt	gt
     866:	ebd4 050c 	rsbsgt	r5, r4, ip
     86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     86e:	bd70      	popgt	{r4, r5, r6, pc}
     870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     874:	f04f 0e00 	mov.w	lr, #0
     878:	3c01      	subs	r4, #1
     87a:	e690      	b.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
     87c:	ea45 0e06 	orr.w	lr, r5, r6
     880:	e68d      	b.n	59e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb6>
     882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     886:	ea94 0f0c 	teq	r4, ip
     88a:	bf08      	it	eq
     88c:	ea95 0f0c 	teqeq	r5, ip
     890:	f43f af3b 	beq.w	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     894:	ea94 0f0c 	teq	r4, ip
     898:	d10a      	bne.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     89a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     89e:	f47f af34 	bne.w	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     8a2:	ea95 0f0c 	teq	r5, ip
     8a6:	f47f af25 	bne.w	6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>
     8aa:	4610      	mov	r0, r2
     8ac:	4619      	mov	r1, r3
     8ae:	e72c      	b.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     8b0:	ea95 0f0c 	teq	r5, ip
     8b4:	d106      	bne.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
     8b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8ba:	f43f aefd 	beq.w	6b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d0>
     8be:	4610      	mov	r0, r2
     8c0:	4619      	mov	r1, r3
     8c2:	e722      	b.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     8c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     8c8:	bf18      	it	ne
     8ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     8ce:	f47f aec5 	bne.w	65c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x174>
     8d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     8d6:	f47f af0d 	bne.w	6f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20c>
     8da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     8de:	f47f aeeb 	bne.w	6b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1d0>
     8e2:	e712      	b.n	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>

000008e4 <__aeabi_d2iz>:
     8e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8ec:	d215      	bcs.n	91a <__aeabi_d2iz+0x36>
     8ee:	d511      	bpl.n	914 <__aeabi_d2iz+0x30>
     8f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8f8:	d912      	bls.n	920 <__aeabi_d2iz+0x3c>
     8fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     90a:	fa23 f002 	lsr.w	r0, r3, r2
     90e:	bf18      	it	ne
     910:	4240      	negne	r0, r0
     912:	4770      	bx	lr
     914:	f04f 0000 	mov.w	r0, #0
     918:	4770      	bx	lr
     91a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     91e:	d105      	bne.n	92c <__aeabi_d2iz+0x48>
     920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     924:	bf08      	it	eq
     926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     92a:	4770      	bx	lr
     92c:	f04f 0000 	mov.w	r0, #0
     930:	4770      	bx	lr
     932:	bf00      	nop

00000934 <__aeabi_uldivmod>:
     934:	b953      	cbnz	r3, 94c <__aeabi_uldivmod+0x18>
     936:	b94a      	cbnz	r2, 94c <__aeabi_uldivmod+0x18>
     938:	2900      	cmp	r1, #0
     93a:	bf08      	it	eq
     93c:	2800      	cmpeq	r0, #0
     93e:	bf1c      	itt	ne
     940:	f04f 31ff 	movne.w	r1, #4294967295
     944:	f04f 30ff 	movne.w	r0, #4294967295
     948:	f000 b80c 	b.w	964 <__aeabi_idiv0>
     94c:	f1ad 0c08 	sub.w	ip, sp, #8
     950:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     954:	f000 f808 	bl	968 <__udivmoddi4>
     958:	f8dd e004 	ldr.w	lr, [sp, #4]
     95c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     960:	b004      	add	sp, #16
     962:	4770      	bx	lr

00000964 <__aeabi_idiv0>:
     964:	4770      	bx	lr
     966:	bf00      	nop

00000968 <__udivmoddi4>:
     968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     96c:	4686      	mov	lr, r0
     96e:	468c      	mov	ip, r1
     970:	4608      	mov	r0, r1
     972:	9e08      	ldr	r6, [sp, #32]
     974:	4615      	mov	r5, r2
     976:	4674      	mov	r4, lr
     978:	4619      	mov	r1, r3
     97a:	2b00      	cmp	r3, #0
     97c:	f040 80c1 	bne.w	b02 <__udivmoddi4+0x19a>
     980:	4285      	cmp	r5, r0
     982:	fab2 f282 	clz	r2, r2
     986:	d945      	bls.n	a14 <__udivmoddi4+0xac>
     988:	b14a      	cbz	r2, 99e <__udivmoddi4+0x36>
     98a:	f1c2 0320 	rsb	r3, r2, #32
     98e:	fa00 fc02 	lsl.w	ip, r0, r2
     992:	4095      	lsls	r5, r2
     994:	4094      	lsls	r4, r2
     996:	fa2e f303 	lsr.w	r3, lr, r3
     99a:	ea43 0c0c 	orr.w	ip, r3, ip
     99e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     9a2:	b2a8      	uxth	r0, r5
     9a4:	0c23      	lsrs	r3, r4, #16
     9a6:	fbbc f8fe 	udiv	r8, ip, lr
     9aa:	fb0e cc18 	mls	ip, lr, r8, ip
     9ae:	fb08 f900 	mul.w	r9, r8, r0
     9b2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     9b6:	4599      	cmp	r9, r3
     9b8:	d928      	bls.n	a0c <__udivmoddi4+0xa4>
     9ba:	18eb      	adds	r3, r5, r3
     9bc:	f108 37ff 	add.w	r7, r8, #4294967295
     9c0:	d204      	bcs.n	9cc <__udivmoddi4+0x64>
     9c2:	4599      	cmp	r9, r3
     9c4:	d902      	bls.n	9cc <__udivmoddi4+0x64>
     9c6:	f1a8 0702 	sub.w	r7, r8, #2
     9ca:	442b      	add	r3, r5
     9cc:	eba3 0309 	sub.w	r3, r3, r9
     9d0:	b2a4      	uxth	r4, r4
     9d2:	fbb3 fcfe 	udiv	ip, r3, lr
     9d6:	fb0e 331c 	mls	r3, lr, ip, r3
     9da:	fb0c f000 	mul.w	r0, ip, r0
     9de:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9e2:	42a0      	cmp	r0, r4
     9e4:	d914      	bls.n	a10 <__udivmoddi4+0xa8>
     9e6:	192c      	adds	r4, r5, r4
     9e8:	f10c 33ff 	add.w	r3, ip, #4294967295
     9ec:	d204      	bcs.n	9f8 <__udivmoddi4+0x90>
     9ee:	42a0      	cmp	r0, r4
     9f0:	d902      	bls.n	9f8 <__udivmoddi4+0x90>
     9f2:	f1ac 0302 	sub.w	r3, ip, #2
     9f6:	442c      	add	r4, r5
     9f8:	1a24      	subs	r4, r4, r0
     9fa:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     9fe:	b11e      	cbz	r6, a08 <__udivmoddi4+0xa0>
     a00:	40d4      	lsrs	r4, r2
     a02:	2300      	movs	r3, #0
     a04:	6034      	str	r4, [r6, #0]
     a06:	6073      	str	r3, [r6, #4]
     a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a0c:	4647      	mov	r7, r8
     a0e:	e7dd      	b.n	9cc <__udivmoddi4+0x64>
     a10:	4663      	mov	r3, ip
     a12:	e7f1      	b.n	9f8 <__udivmoddi4+0x90>
     a14:	bb92      	cbnz	r2, a7c <__udivmoddi4+0x114>
     a16:	1b43      	subs	r3, r0, r5
     a18:	2101      	movs	r1, #1
     a1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a1e:	b2af      	uxth	r7, r5
     a20:	0c20      	lsrs	r0, r4, #16
     a22:	fbb3 fcfe 	udiv	ip, r3, lr
     a26:	fb0e 331c 	mls	r3, lr, ip, r3
     a2a:	fb0c f807 	mul.w	r8, ip, r7
     a2e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     a32:	4598      	cmp	r8, r3
     a34:	d961      	bls.n	afa <__udivmoddi4+0x192>
     a36:	18eb      	adds	r3, r5, r3
     a38:	f10c 30ff 	add.w	r0, ip, #4294967295
     a3c:	d204      	bcs.n	a48 <__udivmoddi4+0xe0>
     a3e:	4598      	cmp	r8, r3
     a40:	d902      	bls.n	a48 <__udivmoddi4+0xe0>
     a42:	f1ac 0002 	sub.w	r0, ip, #2
     a46:	442b      	add	r3, r5
     a48:	eba3 0308 	sub.w	r3, r3, r8
     a4c:	b2a4      	uxth	r4, r4
     a4e:	fbb3 fcfe 	udiv	ip, r3, lr
     a52:	fb0e 331c 	mls	r3, lr, ip, r3
     a56:	fb0c f707 	mul.w	r7, ip, r7
     a5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     a5e:	42a7      	cmp	r7, r4
     a60:	d94d      	bls.n	afe <__udivmoddi4+0x196>
     a62:	192c      	adds	r4, r5, r4
     a64:	f10c 33ff 	add.w	r3, ip, #4294967295
     a68:	d204      	bcs.n	a74 <__udivmoddi4+0x10c>
     a6a:	42a7      	cmp	r7, r4
     a6c:	d902      	bls.n	a74 <__udivmoddi4+0x10c>
     a6e:	f1ac 0302 	sub.w	r3, ip, #2
     a72:	442c      	add	r4, r5
     a74:	1be4      	subs	r4, r4, r7
     a76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     a7a:	e7c0      	b.n	9fe <__udivmoddi4+0x96>
     a7c:	f1c2 0320 	rsb	r3, r2, #32
     a80:	4095      	lsls	r5, r2
     a82:	4094      	lsls	r4, r2
     a84:	fa20 f103 	lsr.w	r1, r0, r3
     a88:	fa2e f303 	lsr.w	r3, lr, r3
     a8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     a90:	4090      	lsls	r0, r2
     a92:	b2af      	uxth	r7, r5
     a94:	4303      	orrs	r3, r0
     a96:	fbb1 fcfe 	udiv	ip, r1, lr
     a9a:	fb0e 101c 	mls	r0, lr, ip, r1
     a9e:	0c19      	lsrs	r1, r3, #16
     aa0:	fb0c f807 	mul.w	r8, ip, r7
     aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     aa8:	4588      	cmp	r8, r1
     aaa:	d922      	bls.n	af2 <__udivmoddi4+0x18a>
     aac:	1869      	adds	r1, r5, r1
     aae:	f10c 30ff 	add.w	r0, ip, #4294967295
     ab2:	d204      	bcs.n	abe <__udivmoddi4+0x156>
     ab4:	4588      	cmp	r8, r1
     ab6:	d902      	bls.n	abe <__udivmoddi4+0x156>
     ab8:	f1ac 0002 	sub.w	r0, ip, #2
     abc:	4429      	add	r1, r5
     abe:	eba1 0108 	sub.w	r1, r1, r8
     ac2:	b29b      	uxth	r3, r3
     ac4:	fbb1 fcfe 	udiv	ip, r1, lr
     ac8:	fb0e 111c 	mls	r1, lr, ip, r1
     acc:	fb0c f707 	mul.w	r7, ip, r7
     ad0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     ad4:	429f      	cmp	r7, r3
     ad6:	d90e      	bls.n	af6 <__udivmoddi4+0x18e>
     ad8:	18eb      	adds	r3, r5, r3
     ada:	f10c 31ff 	add.w	r1, ip, #4294967295
     ade:	d204      	bcs.n	aea <__udivmoddi4+0x182>
     ae0:	429f      	cmp	r7, r3
     ae2:	d902      	bls.n	aea <__udivmoddi4+0x182>
     ae4:	f1ac 0102 	sub.w	r1, ip, #2
     ae8:	442b      	add	r3, r5
     aea:	1bdb      	subs	r3, r3, r7
     aec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     af0:	e793      	b.n	a1a <__udivmoddi4+0xb2>
     af2:	4660      	mov	r0, ip
     af4:	e7e3      	b.n	abe <__udivmoddi4+0x156>
     af6:	4661      	mov	r1, ip
     af8:	e7f7      	b.n	aea <__udivmoddi4+0x182>
     afa:	4660      	mov	r0, ip
     afc:	e7a4      	b.n	a48 <__udivmoddi4+0xe0>
     afe:	4663      	mov	r3, ip
     b00:	e7b8      	b.n	a74 <__udivmoddi4+0x10c>
     b02:	4283      	cmp	r3, r0
     b04:	d906      	bls.n	b14 <__udivmoddi4+0x1ac>
     b06:	b916      	cbnz	r6, b0e <__udivmoddi4+0x1a6>
     b08:	2100      	movs	r1, #0
     b0a:	4608      	mov	r0, r1
     b0c:	e77c      	b.n	a08 <__udivmoddi4+0xa0>
     b0e:	e9c6 e000 	strd	lr, r0, [r6]
     b12:	e7f9      	b.n	b08 <__udivmoddi4+0x1a0>
     b14:	fab3 f783 	clz	r7, r3
     b18:	b98f      	cbnz	r7, b3e <__udivmoddi4+0x1d6>
     b1a:	4283      	cmp	r3, r0
     b1c:	d301      	bcc.n	b22 <__udivmoddi4+0x1ba>
     b1e:	4572      	cmp	r2, lr
     b20:	d808      	bhi.n	b34 <__udivmoddi4+0x1cc>
     b22:	ebbe 0402 	subs.w	r4, lr, r2
     b26:	eb60 0303 	sbc.w	r3, r0, r3
     b2a:	2001      	movs	r0, #1
     b2c:	469c      	mov	ip, r3
     b2e:	b91e      	cbnz	r6, b38 <__udivmoddi4+0x1d0>
     b30:	2100      	movs	r1, #0
     b32:	e769      	b.n	a08 <__udivmoddi4+0xa0>
     b34:	4638      	mov	r0, r7
     b36:	e7fa      	b.n	b2e <__udivmoddi4+0x1c6>
     b38:	e9c6 4c00 	strd	r4, ip, [r6]
     b3c:	e7f8      	b.n	b30 <__udivmoddi4+0x1c8>
     b3e:	f1c7 0c20 	rsb	ip, r7, #32
     b42:	40bb      	lsls	r3, r7
     b44:	fa0e f507 	lsl.w	r5, lr, r7
     b48:	fa22 f40c 	lsr.w	r4, r2, ip
     b4c:	fa2e f10c 	lsr.w	r1, lr, ip
     b50:	40ba      	lsls	r2, r7
     b52:	431c      	orrs	r4, r3
     b54:	fa20 f30c 	lsr.w	r3, r0, ip
     b58:	40b8      	lsls	r0, r7
     b5a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     b5e:	4301      	orrs	r1, r0
     b60:	fa1f fe84 	uxth.w	lr, r4
     b64:	fbb3 f8f9 	udiv	r8, r3, r9
     b68:	fb09 3018 	mls	r0, r9, r8, r3
     b6c:	0c0b      	lsrs	r3, r1, #16
     b6e:	fb08 fa0e 	mul.w	sl, r8, lr
     b72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     b76:	459a      	cmp	sl, r3
     b78:	d940      	bls.n	bfc <__udivmoddi4+0x294>
     b7a:	18e3      	adds	r3, r4, r3
     b7c:	f108 30ff 	add.w	r0, r8, #4294967295
     b80:	d204      	bcs.n	b8c <__udivmoddi4+0x224>
     b82:	459a      	cmp	sl, r3
     b84:	d902      	bls.n	b8c <__udivmoddi4+0x224>
     b86:	f1a8 0002 	sub.w	r0, r8, #2
     b8a:	4423      	add	r3, r4
     b8c:	eba3 030a 	sub.w	r3, r3, sl
     b90:	b289      	uxth	r1, r1
     b92:	fbb3 f8f9 	udiv	r8, r3, r9
     b96:	fb09 3318 	mls	r3, r9, r8, r3
     b9a:	fb08 fe0e 	mul.w	lr, r8, lr
     b9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     ba2:	458e      	cmp	lr, r1
     ba4:	d92c      	bls.n	c00 <__udivmoddi4+0x298>
     ba6:	1861      	adds	r1, r4, r1
     ba8:	f108 33ff 	add.w	r3, r8, #4294967295
     bac:	d204      	bcs.n	bb8 <__udivmoddi4+0x250>
     bae:	458e      	cmp	lr, r1
     bb0:	d902      	bls.n	bb8 <__udivmoddi4+0x250>
     bb2:	f1a8 0302 	sub.w	r3, r8, #2
     bb6:	4421      	add	r1, r4
     bb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     bbc:	eba1 010e 	sub.w	r1, r1, lr
     bc0:	fba0 9802 	umull	r9, r8, r0, r2
     bc4:	4541      	cmp	r1, r8
     bc6:	46ce      	mov	lr, r9
     bc8:	4643      	mov	r3, r8
     bca:	d302      	bcc.n	bd2 <__udivmoddi4+0x26a>
     bcc:	d106      	bne.n	bdc <__udivmoddi4+0x274>
     bce:	454d      	cmp	r5, r9
     bd0:	d204      	bcs.n	bdc <__udivmoddi4+0x274>
     bd2:	3801      	subs	r0, #1
     bd4:	ebb9 0e02 	subs.w	lr, r9, r2
     bd8:	eb68 0304 	sbc.w	r3, r8, r4
     bdc:	2e00      	cmp	r6, #0
     bde:	d0a7      	beq.n	b30 <__udivmoddi4+0x1c8>
     be0:	ebb5 020e 	subs.w	r2, r5, lr
     be4:	eb61 0103 	sbc.w	r1, r1, r3
     be8:	fa01 fc0c 	lsl.w	ip, r1, ip
     bec:	fa22 f307 	lsr.w	r3, r2, r7
     bf0:	40f9      	lsrs	r1, r7
     bf2:	ea4c 0303 	orr.w	r3, ip, r3
     bf6:	e9c6 3100 	strd	r3, r1, [r6]
     bfa:	e799      	b.n	b30 <__udivmoddi4+0x1c8>
     bfc:	4640      	mov	r0, r8
     bfe:	e7c5      	b.n	b8c <__udivmoddi4+0x224>
     c00:	4643      	mov	r3, r8
     c02:	e7d9      	b.n	bb8 <__udivmoddi4+0x250>
     c04:	0000      	movs	r0, r0
	...

00000c08 <hx711_channel_get>:
 * @retval  -ENOTSUP if an invalid channel is given
 *
 */
static int hx711_channel_get(const struct device *dev, enum sensor_channel chan,
			     struct sensor_value *val)
{
     c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	enum hx711_channel hx711_chan = (enum hx711_channel)chan;
	struct hx711_data *data = dev->data;

	switch (hx711_chan) {
     c0a:	b2c9      	uxtb	r1, r1
     c0c:	293a      	cmp	r1, #58	; 0x3a
{
     c0e:	4615      	mov	r5, r2
	struct hx711_data *data = dev->data;
     c10:	6904      	ldr	r4, [r0, #16]
	switch (hx711_chan) {
     c12:	d124      	bne.n	c5e <hx711_channel_get+0x56>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
     c14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     c16:	f7ff fbe9 	bl	3ec <__aeabi_i2d>
     c1a:	a313      	add	r3, pc, #76	; (adr r3, c68 <hx711_channel_get+0x60>)
     c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c20:	f7ff fd78 	bl	714 <__aeabi_ddiv>
     c24:	4606      	mov	r6, r0
     c26:	6b60      	ldr	r0, [r4, #52]	; 0x34
     c28:	460f      	mov	r7, r1
     c2a:	f7ff fbdf 	bl	3ec <__aeabi_i2d>
     c2e:	4602      	mov	r2, r0
     c30:	460b      	mov	r3, r1
     c32:	4630      	mov	r0, r6
     c34:	4639      	mov	r1, r7
     c36:	f7ff fa8d 	bl	154 <__adddf3>
     c3a:	4606      	mov	r6, r0
	case HX711_SENSOR_CHAN_WEIGHT: {
		val->val1 = sensor_value_to_double(&data->slope) * (data->reading - data->offset);
     c3c:	e9d4 030b 	ldrd	r0, r3, [r4, #44]	; 0x2c
     c40:	1ac0      	subs	r0, r0, r3
     c42:	460f      	mov	r7, r1
     c44:	f7ff fbd2 	bl	3ec <__aeabi_i2d>
     c48:	4602      	mov	r2, r0
     c4a:	460b      	mov	r3, r1
     c4c:	4630      	mov	r0, r6
     c4e:	4639      	mov	r1, r7
     c50:	f7ff fc36 	bl	4c0 <__aeabi_dmul>
     c54:	f7ff fe46 	bl	8e4 <__aeabi_d2iz>
     c58:	6028      	str	r0, [r5, #0]
		return 0;
     c5a:	2000      	movs	r0, #0
	}
	default:
		return -ENOTSUP;
	}
}
     c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
     c5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
     c62:	e7fb      	b.n	c5c <hx711_channel_get+0x54>
     c64:	f3af 8000 	nop.w
     c68:	00000000 	.word	0x00000000
     c6c:	412e8480 	.word	0x412e8480

00000c70 <avia_hx711_calibrate>:

	if (readings == 0) {
		readings = 1;
	}

	for (int i = 0; i < readings; i++) {
     c70:	2b01      	cmp	r3, #1
{
     c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i = 0; i < readings; i++) {
     c76:	bf38      	it	cc
     c78:	2301      	movcc	r3, #1
	int32_t avg = 0;
     c7a:	2500      	movs	r5, #0
{
     c7c:	4680      	mov	r8, r0
     c7e:	460e      	mov	r6, r1
     c80:	4617      	mov	r7, r2
	for (int i = 0; i < readings; i++) {
     c82:	4699      	mov	r9, r3
     c84:	46aa      	mov	sl, r5
	struct hx711_data *data = dev->data;
     c86:	690c      	ldr	r4, [r1, #16]
		hx711_sample_fetch(dev, HX711_SENSOR_CHAN_WEIGHT);
     c88:	213a      	movs	r1, #58	; 0x3a
     c8a:	4630      	mov	r0, r6
     c8c:	f003 fd50 	bl	4730 <hx711_sample_fetch>
	for (int i = 0; i < readings; i++) {
     c90:	f10a 0a01 	add.w	sl, sl, #1
		avg += data->reading;
     c94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	for (int i = 0; i < readings; i++) {
     c96:	45ca      	cmp	sl, r9
		avg += data->reading;
     c98:	441d      	add	r5, r3
	for (int i = 0; i < readings; i++) {
     c9a:	dbf5      	blt.n	c88 <avia_hx711_calibrate+0x18>
	}
	LOG_DBG("Average before division : %d", avg);
	avg = avg / readings;

	LOG_DBG("Average after division : %d", avg);
	double slope = (double)target / (double)(avg - data->offset);
     c9c:	4638      	mov	r0, r7
     c9e:	f7ff fb95 	bl	3cc <__aeabi_ui2d>
	avg = avg / readings;
     ca2:	fb95 f5f9 	sdiv	r5, r5, r9
	double slope = (double)target / (double)(avg - data->offset);
     ca6:	4606      	mov	r6, r0
     ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
     caa:	460f      	mov	r7, r1
     cac:	1a28      	subs	r0, r5, r0
     cae:	f7ff fb9d 	bl	3ec <__aeabi_i2d>
     cb2:	4602      	mov	r2, r0
     cb4:	460b      	mov	r3, r1
     cb6:	4630      	mov	r0, r6
     cb8:	4639      	mov	r1, r7
     cba:	f7ff fd2b 	bl	714 <__aeabi_ddiv>
     cbe:	460f      	mov	r7, r1
     cc0:	4606      	mov	r6, r0

	data->slope.val1 = (int)slope;
     cc2:	f7ff fe0f 	bl	8e4 <__aeabi_d2iz>
     cc6:	6360      	str	r0, [r4, #52]	; 0x34
	data->slope.val2 = (slope - data->slope.val1) * 1e6;
     cc8:	f7ff fb90 	bl	3ec <__aeabi_i2d>
     ccc:	4602      	mov	r2, r0
     cce:	460b      	mov	r3, r1
     cd0:	4630      	mov	r0, r6
     cd2:	4639      	mov	r1, r7
     cd4:	f7ff fa3c 	bl	150 <__aeabi_dsub>
     cd8:	a307      	add	r3, pc, #28	; (adr r3, cf8 <avia_hx711_calibrate+0x88>)
     cda:	e9d3 2300 	ldrd	r2, r3, [r3]
     cde:	f7ff fbef 	bl	4c0 <__aeabi_dmul>
     ce2:	f7ff fdff 	bl	8e4 <__aeabi_d2iz>

	LOG_DBG("Slope set to : %d.%06d", data->slope.val1, data->slope.val2);

	return data->slope;
     ce6:	4601      	mov	r1, r0
	data->slope.val2 = (slope - data->slope.val1) * 1e6;
     ce8:	63a0      	str	r0, [r4, #56]	; 0x38
	return data->slope;
     cea:	6b60      	ldr	r0, [r4, #52]	; 0x34
     cec:	e888 0003 	stmia.w	r8, {r0, r1}
}
     cf0:	4640      	mov	r0, r8
     cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cf6:	bf00      	nop
     cf8:	00000000 	.word	0x00000000
     cfc:	412e8480 	.word	0x412e8480

00000d00 <measure>:

LOG_MODULE_REGISTER(main, LOG_LEVEL_INF);

const struct device *hx711_dev;

void measure(void) {
     d00:	b5b0      	push	{r4, r5, r7, lr}
	static struct sensor_value weight;
	int ret;

	ret = sensor_sample_fetch(hx711_dev);
     d02:	4d19      	ldr	r5, [pc, #100]	; (d68 <measure+0x68>)
void measure(void) {
     d04:	af00      	add	r7, sp, #0
	ret = sensor_sample_fetch(hx711_dev);
     d06:	6828      	ldr	r0, [r5, #0]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     d08:	6883      	ldr	r3, [r0, #8]
     d0a:	2139      	movs	r1, #57	; 0x39
     d0c:	68db      	ldr	r3, [r3, #12]
     d0e:	4798      	blx	r3
	if (ret != 0) {
     d10:	4604      	mov	r4, r0
     d12:	b188      	cbz	r0, d38 <measure+0x38>
		LOG_ERR("Cannot take measurement: %d", ret);
     d14:	466d      	mov	r5, sp
     d16:	b088      	sub	sp, #32
     d18:	466a      	mov	r2, sp
     d1a:	4b14      	ldr	r3, [pc, #80]	; (d6c <measure+0x6c>)
     d1c:	e9c2 3005 	strd	r3, r0, [r2, #20]
     d20:	2303      	movs	r3, #3
     d22:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     d26:	2300      	movs	r3, #0
     d28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     d2c:	4810      	ldr	r0, [pc, #64]	; (d70 <measure+0x70>)
     d2e:	f001 fa3b 	bl	21a8 <z_impl_z_log_msg_static_create>
     d32:	46ad      	mov	sp, r5
	} else {
		sensor_channel_get(hx711_dev, HX711_SENSOR_CHAN_WEIGHT, &weight);
		LOG_INF("Weight: %d.%06d grams", weight.val1, weight.val2);
	}
}
     d34:	46bd      	mov	sp, r7
     d36:	bdb0      	pop	{r4, r5, r7, pc}
		sensor_channel_get(hx711_dev, HX711_SENSOR_CHAN_WEIGHT, &weight);
     d38:	6828      	ldr	r0, [r5, #0]
	return api->channel_get(dev, chan, val);
     d3a:	4d0e      	ldr	r5, [pc, #56]	; (d74 <measure+0x74>)
     d3c:	6883      	ldr	r3, [r0, #8]
     d3e:	462a      	mov	r2, r5
     d40:	213a      	movs	r1, #58	; 0x3a
     d42:	691b      	ldr	r3, [r3, #16]
     d44:	4798      	blx	r3
		LOG_INF("Weight: %d.%06d grams", weight.val1, weight.val2);
     d46:	e9d5 1300 	ldrd	r1, r3, [r5]
     d4a:	466d      	mov	r5, sp
     d4c:	b088      	sub	sp, #32
     d4e:	466a      	mov	r2, sp
     d50:	61d3      	str	r3, [r2, #28]
     d52:	2304      	movs	r3, #4
     d54:	4808      	ldr	r0, [pc, #32]	; (d78 <measure+0x78>)
     d56:	e9c2 0105 	strd	r0, r1, [r2, #20]
     d5a:	f842 3f10 	str.w	r3, [r2, #16]!
     d5e:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
     d62:	4623      	mov	r3, r4
     d64:	e7e2      	b.n	d2c <measure+0x2c>
     d66:	bf00      	nop
     d68:	20000810 	.word	0x20000810
     d6c:	00007fd8 	.word	0x00007fd8
     d70:	00007cd4 	.word	0x00007cd4
     d74:	20000808 	.word	0x20000808
     d78:	00007ff4 	.word	0x00007ff4

00000d7c <main>:

void main(void) {
     d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d80:	b088      	sub	sp, #32
	int calibration_weight = 1000; // grams
	hx711_dev = DEVICE_DT_GET_ANY(avia_hx711);
     d82:	4b35      	ldr	r3, [pc, #212]	; (e58 <main+0xdc>)
     d84:	4d35      	ldr	r5, [pc, #212]	; (e5c <main+0xe0>)
	__ASSERT(hx711_dev == NULL, "Failed to get device binding");

	LOG_INF("Device is %p, name is %s", hx711_dev, hx711_dev->name);
     d86:	466c      	mov	r4, sp
void main(void) {
     d88:	af00      	add	r7, sp, #0
	LOG_INF("Device is %p, name is %s", hx711_dev, hx711_dev->name);
     d8a:	b08a      	sub	sp, #40	; 0x28
	hx711_dev = DEVICE_DT_GET_ANY(avia_hx711);
     d8c:	602b      	str	r3, [r5, #0]
	LOG_INF("Device is %p, name is %s", hx711_dev, hx711_dev->name);
     d8e:	6819      	ldr	r1, [r3, #0]
     d90:	466a      	mov	r2, sp
     d92:	4833      	ldr	r0, [pc, #204]	; (e60 <main+0xe4>)
     d94:	61d1      	str	r1, [r2, #28]
     d96:	e9c2 0305 	strd	r0, r3, [r2, #20]
     d9a:	f240 3301 	movw	r3, #769	; 0x301
     d9e:	8413      	strh	r3, [r2, #32]
     da0:	4b30      	ldr	r3, [pc, #192]	; (e64 <main+0xe8>)
     da2:	f842 3f10 	str.w	r3, [r2, #16]!
     da6:	2300      	movs	r3, #0
     da8:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
     dac:	482e      	ldr	r0, [pc, #184]	; (e68 <main+0xec>)
     dae:	f001 f9fb 	bl	21a8 <z_impl_z_log_msg_static_create>
     db2:	46a5      	mov	sp, r4
	LOG_INF("Calculating offset...");
     db4:	4b2d      	ldr	r3, [pc, #180]	; (e6c <main+0xf0>)
     db6:	61fb      	str	r3, [r7, #28]
     db8:	2302      	movs	r3, #2
     dba:	61bb      	str	r3, [r7, #24]
     dbc:	2300      	movs	r3, #0
     dbe:	f107 0218 	add.w	r2, r7, #24
     dc2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     dc6:	4828      	ldr	r0, [pc, #160]	; (e68 <main+0xec>)
     dc8:	f001 f9ee 	bl	21a8 <z_impl_z_log_msg_static_create>
	avia_hx711_tare(hx711_dev, 5);
     dcc:	2105      	movs	r1, #5
     dce:	6828      	ldr	r0, [r5, #0]
     dd0:	f006 fb42 	bl	7458 <avia_hx711_tare>

	LOG_INF("Waiting for known weight of %d grams...", calibration_weight);
     dd4:	b088      	sub	sp, #32
     dd6:	466a      	mov	r2, sp
     dd8:	4b25      	ldr	r3, [pc, #148]	; (e70 <main+0xf4>)
     dda:	2603      	movs	r6, #3
     ddc:	6153      	str	r3, [r2, #20]
     dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     de2:	6193      	str	r3, [r2, #24]
     de4:	f842 6f10 	str.w	r6, [r2, #16]!
     de8:	2300      	movs	r3, #0
     dea:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     dee:	481e      	ldr	r0, [pc, #120]	; (e68 <main+0xec>)
     df0:	f001 f9da 	bl	21a8 <z_impl_z_log_msg_static_create>
     df4:	46a5      	mov	sp, r4

	for (int i = 5; i >= 0; i--) {
     df6:	2405      	movs	r4, #5
		LOG_INF(" %d..", i);
     df8:	f8df a078 	ldr.w	sl, [pc, #120]	; e74 <main+0xf8>
     dfc:	f8df 9068 	ldr.w	r9, [pc, #104]	; e68 <main+0xec>
     e00:	46e8      	mov	r8, sp
     e02:	b088      	sub	sp, #32
     e04:	466a      	mov	r2, sp
     e06:	e9c2 a405 	strd	sl, r4, [r2, #20]
     e0a:	f842 6f10 	str.w	r6, [r2, #16]!
     e0e:	2300      	movs	r3, #0
     e10:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     e14:	4648      	mov	r0, r9
     e16:	f001 f9c7 	bl	21a8 <z_impl_z_log_msg_static_create>
     e1a:	46c5      	mov	sp, r8
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     e1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     e20:	2100      	movs	r1, #0
     e22:	f004 ffad 	bl	5d80 <z_impl_k_sleep>
	for (int i = 5; i >= 0; i--) {
     e26:	3c01      	subs	r4, #1
     e28:	d2ea      	bcs.n	e00 <main+0x84>
		k_msleep(1000);
	}

	LOG_INF("Calculating slope...");
     e2a:	4b13      	ldr	r3, [pc, #76]	; (e78 <main+0xfc>)
     e2c:	61fb      	str	r3, [r7, #28]
     e2e:	2302      	movs	r3, #2
     e30:	61bb      	str	r3, [r7, #24]
     e32:	2300      	movs	r3, #0
     e34:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     e38:	480b      	ldr	r0, [pc, #44]	; (e68 <main+0xec>)
     e3a:	f107 0218 	add.w	r2, r7, #24
     e3e:	f001 f9b3 	bl	21a8 <z_impl_z_log_msg_static_create>
	avia_hx711_calibrate(hx711_dev, calibration_weight, 5);
     e42:	2305      	movs	r3, #5
     e44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     e48:	4638      	mov	r0, r7
     e4a:	6829      	ldr	r1, [r5, #0]
     e4c:	f7ff ff10 	bl	c70 <avia_hx711_calibrate>

	while(true) {
		measure();
     e50:	f7ff ff56 	bl	d00 <measure>
	while(true) {
     e54:	e7fc      	b.n	e50 <main+0xd4>
     e56:	bf00      	nop
     e58:	00007a58 	.word	0x00007a58
     e5c:	20000810 	.word	0x20000810
     e60:	0000800a 	.word	0x0000800a
     e64:	01000004 	.word	0x01000004
     e68:	00007cd4 	.word	0x00007cd4
     e6c:	00008023 	.word	0x00008023
     e70:	00008039 	.word	0x00008039
     e74:	00008061 	.word	0x00008061
     e78:	00008067 	.word	0x00008067

00000e7c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e80:	b095      	sub	sp, #84	; 0x54
     e82:	af00      	add	r7, sp, #0
     e84:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     e88:	61bb      	str	r3, [r7, #24]
     e8a:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     e8e:	4604      	mov	r4, r0
     e90:	627a      	str	r2, [r7, #36]	; 0x24
     e92:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     e94:	6239      	str	r1, [r7, #32]
     e96:	b951      	cbnz	r1, eae <cbprintf_package_convert+0x32>
	for (int i = 0; i < s_nbr; i++) {
     e98:	460d      	mov	r5, r1
	buf += ros_nbr;
     e9a:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     e9c:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     e9e:	7880      	ldrb	r0, [r0, #2]
     ea0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     ea4:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
     ea6:	42ae      	cmp	r6, r5
     ea8:	d81a      	bhi.n	ee0 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     eaa:	1b03      	subs	r3, r0, r4
     eac:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     eae:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     eb2:	78e3      	ldrb	r3, [r4, #3]
	ros_nbr = in_desc->ro_str_cnt;
     eb4:	464e      	mov	r6, r9
	rws_nbr = in_desc->rw_str_cnt;
     eb6:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
     eb8:	f1b9 0f00 	cmp.w	r9, #0
     ebc:	d002      	beq.n	ec4 <cbprintf_package_convert+0x48>
     ebe:	f01b 0f01 	tst.w	fp, #1
     ec2:	d116      	bne.n	ef2 <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
     ec4:	697b      	ldr	r3, [r7, #20]
     ec6:	bb53      	cbnz	r3, f1e <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     eca:	b11b      	cbz	r3, ed4 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     ecc:	4620      	mov	r0, r4
     ece:	69ba      	ldr	r2, [r7, #24]
     ed0:	6a39      	ldr	r1, [r7, #32]
     ed2:	4798      	blx	r3
		}

		return in_len;
     ed4:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     ed6:	4628      	mov	r0, r5
     ed8:	3754      	adds	r7, #84	; 0x54
     eda:	46bd      	mov	sp, r7
     edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     ee0:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
     ee4:	4640      	mov	r0, r8
     ee6:	f006 f879 	bl	6fdc <strlen>
     eea:	3001      	adds	r0, #1
     eec:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
     eee:	3501      	adds	r5, #1
     ef0:	e7d9      	b.n	ea6 <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
     ef2:	6863      	ldr	r3, [r4, #4]
     ef4:	f894 a000 	ldrb.w	sl, [r4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     ef8:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     efc:	ea4f 028a 	mov.w	r2, sl, lsl #2
     f00:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     f02:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
     f06:	2b00      	cmp	r3, #0
     f08:	f040 8102 	bne.w	1110 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x110>
		out_len = (int)in_len;
     f0c:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
     f0e:	2600      	movs	r6, #0
		out_len = (int)in_len;
     f10:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     f12:	eb09 030a 	add.w	r3, r9, sl
			for (int i = 0; i < ros_nbr; i++) {
     f16:	4543      	cmp	r3, r8
     f18:	d14e      	bne.n	fb8 <cbprintf_package_convert+0x13c>
     f1a:	44ca      	add	sl, r9
     f1c:	e013      	b.n	f46 <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
     f1e:	f01b 0f02 	tst.w	fp, #2
     f22:	d0d1      	beq.n	ec8 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     f24:	f894 a000 	ldrb.w	sl, [r4]
     f28:	ea4f 038a 	mov.w	r3, sl, lsl #2
     f2c:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     f2e:	6863      	ldr	r3, [r4, #4]
	uint8_t *str_pos = &buf[args_size];
     f30:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	const char *fmt = *(const char **)(buf + sizeof(void *));
     f34:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f38:	2b00      	cmp	r3, #0
     f3a:	d178      	bne.n	102e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e>
		out_len = (int)in_len;
     f3c:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     f3e:	f1b9 0f00 	cmp.w	r9, #0
     f42:	d14e      	bne.n	fe2 <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
     f44:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
     f46:	f01b 0f05 	tst.w	fp, #5
     f4a:	bf0c      	ite	eq
     f4c:	2302      	moveq	r3, #2
     f4e:	2301      	movne	r3, #1
     f50:	627b      	str	r3, [r7, #36]	; 0x24
     f52:	697b      	ldr	r3, [r7, #20]
     f54:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     f58:	f00b 0302 	and.w	r3, fp, #2
     f5c:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
     f5e:	45ca      	cmp	sl, r9
     f60:	d0b9      	beq.n	ed6 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     f62:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
     f66:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
     f6a:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     f6e:	4bad      	ldr	r3, [pc, #692]	; (1224 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x224>)
     f70:	4598      	cmp	r8, r3
     f72:	d302      	bcc.n	f7a <cbprintf_package_convert+0xfe>
     f74:	4bac      	ldr	r3, [pc, #688]	; (1228 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x228>)
     f76:	4598      	cmp	r8, r3
     f78:	d339      	bcc.n	fee <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     f7a:	693b      	ldr	r3, [r7, #16]
     f7c:	2b00      	cmp	r3, #0
     f7e:	d043      	beq.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
     f80:	69f8      	ldr	r0, [r7, #28]
     f82:	f005 fbb9 	bl	66f8 <is_ptr>
     f86:	2800      	cmp	r0, #0
     f88:	d03e      	beq.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     f8a:	46e8      	mov	r8, sp
     f8c:	b08a      	sub	sp, #40	; 0x28
     f8e:	466a      	mov	r2, sp
     f90:	4ba6      	ldr	r3, [pc, #664]	; (122c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x22c>)
     f92:	6153      	str	r3, [r2, #20]
     f94:	69fb      	ldr	r3, [r7, #28]
     f96:	e9c2 3106 	strd	r3, r1, [r2, #24]
     f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
     f9e:	8413      	strh	r3, [r2, #32]
     fa0:	4ba3      	ldr	r3, [pc, #652]	; (1230 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x230>)
     fa2:	f842 3f10 	str.w	r3, [r2, #16]!
     fa6:	2300      	movs	r3, #0
     fa8:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     fac:	48a1      	ldr	r0, [pc, #644]	; (1234 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x234>)
     fae:	f001 f8fb 	bl	21a8 <z_impl_z_log_msg_static_create>
				out_len -= 2;
     fb2:	3d02      	subs	r5, #2
     fb4:	46c5      	mov	sp, r8
				continue;
     fb6:	e7d2      	b.n	f5e <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
     fb8:	f818 2b01 	ldrb.w	r2, [r8], #1
     fbc:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     fbe:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     fc2:	f006 f80b 	bl	6fdc <strlen>
				if (strl && strl_cnt < strl_len) {
     fc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     fca:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     fcc:	b13a      	cbz	r2, fde <cbprintf_package_convert+0x162>
     fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     fd2:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     fd4:	bf3e      	ittt	cc
     fd6:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     fd8:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     fdc:	3601      	addcc	r6, #1
				out_len += len;
     fde:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
     fe0:	e799      	b.n	f16 <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     fe2:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     fe6:	bf1c      	itt	ne
     fe8:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     fea:	44ca      	addne	sl, r9
     fec:	e7ab      	b.n	f46 <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     fee:	693b      	ldr	r3, [r7, #16]
     ff0:	b123      	cbz	r3, ffc <cbprintf_package_convert+0x180>
     ff2:	69f8      	ldr	r0, [r7, #28]
     ff4:	f005 fb80 	bl	66f8 <is_ptr>
     ff8:	2800      	cmp	r0, #0
     ffa:	d1c6      	bne.n	f8a <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     ffc:	f01b 0f01 	tst.w	fp, #1
    1000:	d105      	bne.n	100e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe>
					out_len -= drop_ro_str_pos ? 2 : 1;
    1002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1004:	1aed      	subs	r5, r5, r3
    1006:	e7aa      	b.n	f5e <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1008:	6a3b      	ldr	r3, [r7, #32]
    100a:	2b00      	cmp	r3, #0
    100c:	d0a7      	beq.n	f5e <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
    100e:	4640      	mov	r0, r8
    1010:	f005 ffe4 	bl	6fdc <strlen>
				if (strl && strl_cnt < strl_len) {
    1014:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1016:	b143      	cbz	r3, 102a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2a>
    1018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    101c:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    101e:	bf3f      	itttt	cc
    1020:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    1022:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    1024:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1028:	3601      	addcc	r6, #1
				out_len += (len - 1);
    102a:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
    102c:	e797      	b.n	f5e <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    102e:	f1b9 0f00 	cmp.w	r9, #0
    1032:	d072      	beq.n	111a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x11a>
    1034:	f01b 0604 	ands.w	r6, fp, #4
    1038:	d072      	beq.n	1120 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x120>
		keep_cnt = ros_nbr;
    103a:	46c8      	mov	r8, r9
		scpy_cnt = 0;
    103c:	2600      	movs	r6, #0
		dst = keep_str_pos;
    103e:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1042:	464a      	mov	r2, r9
    1044:	4651      	mov	r1, sl
    1046:	f005 ffd9 	bl	6ffc <memcpy>
	str_pos += ros_nbr;
    104a:	697b      	ldr	r3, [r7, #20]
    104c:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
    104e:	005b      	lsls	r3, r3, #1
    1050:	60bb      	str	r3, [r7, #8]
    1052:	697b      	ldr	r3, [r7, #20]
    1054:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
    1058:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    105a:	f00b 0302 	and.w	r3, fp, #2
    105e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
    1060:	697b      	ldr	r3, [r7, #20]
    1062:	459a      	cmp	sl, r3
    1064:	d15e      	bne.n	1124 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x124>
	out_desc.len = in_desc->len;
    1066:	7823      	ldrb	r3, [r4, #0]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1068:	f01b 0f02 	tst.w	fp, #2
	out_desc.len = in_desc->len;
    106c:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    106e:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1070:	bf18      	it	ne
    1072:	2100      	movne	r1, #0
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1074:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1078:	bf08      	it	eq
    107a:	ea4f 0158 	moveq.w	r1, r8, lsr #1
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    107e:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1082:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1084:	f040 809d 	bne.w	11c2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c2>
    1088:	f01b 0f04 	tst.w	fp, #4
    108c:	bf14      	ite	ne
    108e:	4640      	movne	r0, r8
    1090:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    1092:	f894 b002 	ldrb.w	fp, [r4, #2]
    1096:	f894 a003 	ldrb.w	sl, [r4, #3]
    109a:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    109c:	7062      	strb	r2, [r4, #1]
    109e:	70a0      	strb	r0, [r4, #2]
    10a0:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    10a2:	4620      	mov	r0, r4
    10a4:	69ba      	ldr	r2, [r7, #24]
    10a6:	68f9      	ldr	r1, [r7, #12]
    10a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10aa:	4798      	blx	r3
	if (rv < 0) {
    10ac:	1e05      	subs	r5, r0, #0
    10ae:	f6ff af12 	blt.w	ed6 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    10b2:	69fb      	ldr	r3, [r7, #28]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    10b4:	4641      	mov	r1, r8
	*in_desc = in_desc_backup;
    10b6:	7023      	strb	r3, [r4, #0]
    10b8:	693b      	ldr	r3, [r7, #16]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    10ba:	69ba      	ldr	r2, [r7, #24]
	*in_desc = in_desc_backup;
    10bc:	7063      	strb	r3, [r4, #1]
    10be:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    10c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    10c4:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    10c8:	f107 0040 	add.w	r0, r7, #64	; 0x40
    10cc:	4798      	blx	r3
	if (rv < 0) {
    10ce:	f1b0 0800 	subs.w	r8, r0, #0
    10d2:	f2c0 80a3 	blt.w	121c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    10d6:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    10d8:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    10da:	eba3 0109 	sub.w	r1, r3, r9
    10de:	68fb      	ldr	r3, [r7, #12]
	rv = cb(str_pos, strs_len, ctx);
    10e0:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    10e2:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    10e4:	68bb      	ldr	r3, [r7, #8]
    10e6:	1ac9      	subs	r1, r1, r3
    10e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ea:	4798      	blx	r3
	if (rv < 0) {
    10ec:	2800      	cmp	r0, #0
    10ee:	f2c0 8097 	blt.w	1220 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x220>
	for (int i = 0; i < scpy_cnt; i++) {
    10f2:	f04f 0b00 	mov.w	fp, #0
	out_len += rv;
    10f6:	44a8      	add	r8, r5
	out_len += rv;
    10f8:	eb08 0500 	add.w	r5, r8, r0
		uint8_t loc = cpy_str_pos[i];
    10fc:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
    1100:	45b3      	cmp	fp, r6
    1102:	db60      	blt.n	11c6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c6>
	(void)cb(NULL, 0, ctx);
    1104:	2100      	movs	r1, #0
    1106:	69ba      	ldr	r2, [r7, #24]
    1108:	4608      	mov	r0, r1
    110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    110c:	4798      	blx	r3
	return out_len;
    110e:	e6e2      	b.n	ed6 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    1110:	f04f 0800 	mov.w	r8, #0
    1114:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1118:	e793      	b.n	1042 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x42>
		scpy_cnt = 0;
    111a:	464e      	mov	r6, r9
		keep_cnt = 0;
    111c:	46c8      	mov	r8, r9
    111e:	e794      	b.n	104a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a>
    1120:	46b0      	mov	r8, r6
    1122:	e792      	b.n	104a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a>
		uint8_t arg_idx = *str_pos++;
    1124:	f81a 1b02 	ldrb.w	r1, [sl], #2
    1128:	4a3e      	ldr	r2, [pc, #248]	; (1224 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x224>)
		uint8_t arg_pos = *str_pos++;
    112a:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    112e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    1132:	4293      	cmp	r3, r2
    1134:	d302      	bcc.n	113c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x13c>
    1136:	4a3c      	ldr	r2, [pc, #240]	; (1228 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x228>)
    1138:	4293      	cmp	r3, r2
    113a:	d31c      	bcc.n	1176 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x176>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    113c:	693b      	ldr	r3, [r7, #16]
    113e:	b123      	cbz	r3, 114a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14a>
    1140:	69f8      	ldr	r0, [r7, #28]
    1142:	f005 fad9 	bl	66f8 <is_ptr>
    1146:	2800      	cmp	r0, #0
    1148:	d18a      	bne.n	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    114a:	687b      	ldr	r3, [r7, #4]
    114c:	b9f3      	cbnz	r3, 118c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18c>
				keep_str_pos[keep_cnt++] = arg_idx;
    114e:	f108 0228 	add.w	r2, r8, #40	; 0x28
    1152:	f107 0028 	add.w	r0, r7, #40	; 0x28
    1156:	4402      	add	r2, r0
    1158:	f108 0301 	add.w	r3, r8, #1
    115c:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1160:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1164:	f108 0802 	add.w	r8, r8, #2
    1168:	fa52 f383 	uxtab	r3, r2, r3
    116c:	fa5f f888 	uxtb.w	r8, r8
    1170:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
    1174:	e774      	b.n	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1176:	693b      	ldr	r3, [r7, #16]
    1178:	b12b      	cbz	r3, 1186 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x186>
    117a:	69f8      	ldr	r0, [r7, #28]
    117c:	f005 fabc 	bl	66f8 <is_ptr>
    1180:	2800      	cmp	r0, #0
    1182:	f47f af6d 	bne.w	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1186:	f01b 0f01 	tst.w	fp, #1
    118a:	d009      	beq.n	11a0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1a0>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    118c:	f106 0228 	add.w	r2, r6, #40	; 0x28
    1190:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1194:	1c73      	adds	r3, r6, #1
    1196:	1856      	adds	r6, r2, r1
    1198:	f806 5c20 	strb.w	r5, [r6, #-32]
    119c:	b2de      	uxtb	r6, r3
    119e:	e75f      	b.n	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    11a0:	f01b 0f04 	tst.w	fp, #4
    11a4:	f43f af5c 	beq.w	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
				keep_str_pos[keep_cnt++] = arg_pos;
    11a8:	f108 0228 	add.w	r2, r8, #40	; 0x28
    11ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
    11b0:	f108 0301 	add.w	r3, r8, #1
    11b4:	eb02 0801 	add.w	r8, r2, r1
    11b8:	f808 5c10 	strb.w	r5, [r8, #-16]
    11bc:	fa5f f883 	uxtb.w	r8, r3
    11c0:	e74e      	b.n	1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    11c2:	2000      	movs	r0, #0
    11c4:	e765      	b.n	1092 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x92>
		uint8_t loc = cpy_str_pos[i];
    11c6:	f81b 300a 	ldrb.w	r3, [fp, sl]
		const char *str = *(const char **)&buf32[loc];
    11ca:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint8_t loc = cpy_str_pos[i];
    11ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint16_t str_len = strl ? strl[i] : 0;
    11d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    11d4:	b1fb      	cbz	r3, 1216 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x216>
    11d6:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    11da:	2101      	movs	r1, #1
    11dc:	69ba      	ldr	r2, [r7, #24]
    11de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11e0:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    11e4:	4798      	blx	r3
		if (rv < 0) {
    11e6:	2800      	cmp	r0, #0
    11e8:	db1a      	blt.n	1220 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x220>
		out_len += rv;
    11ea:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    11ec:	f1b8 0f00 	cmp.w	r8, #0
    11f0:	d106      	bne.n	1200 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x200>
    11f2:	4648      	mov	r0, r9
    11f4:	f005 fef2 	bl	6fdc <strlen>
    11f8:	f100 0801 	add.w	r8, r0, #1
    11fc:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    1200:	4641      	mov	r1, r8
    1202:	4648      	mov	r0, r9
    1204:	69ba      	ldr	r2, [r7, #24]
    1206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1208:	4798      	blx	r3
		if (rv < 0) {
    120a:	2800      	cmp	r0, #0
    120c:	db08      	blt.n	1220 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x220>
		out_len += rv;
    120e:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
    1210:	f10b 0b01 	add.w	fp, fp, #1
    1214:	e774      	b.n	1100 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x100>
		uint16_t str_len = strl ? strl[i] : 0;
    1216:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    121a:	e7de      	b.n	11da <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1da>
    121c:	4645      	mov	r5, r8
    121e:	e65a      	b.n	ed6 <cbprintf_package_convert+0x5a>
    1220:	4605      	mov	r5, r0
    1222:	e658      	b.n	ed6 <cbprintf_package_convert+0x5a>
    1224:	00007998 	.word	0x00007998
    1228:	000088d4 	.word	0x000088d4
    122c:	00008081 	.word	0x00008081
    1230:	01000004 	.word	0x01000004
    1234:	00007ca4 	.word	0x00007ca4

00001238 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1238:	4b01      	ldr	r3, [pc, #4]	; (1240 <char_out+0x8>)
    123a:	681b      	ldr	r3, [r3, #0]
    123c:	4718      	bx	r3
    123e:	bf00      	nop
    1240:	20000000 	.word	0x20000000

00001244 <__printk_hook_install>:
	_char_out = fn;
    1244:	4b01      	ldr	r3, [pc, #4]	; (124c <__printk_hook_install+0x8>)
    1246:	6018      	str	r0, [r3, #0]
}
    1248:	4770      	bx	lr
    124a:	bf00      	nop
    124c:	20000000 	.word	0x20000000

00001250 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    1250:	b507      	push	{r0, r1, r2, lr}
    1252:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1254:	2100      	movs	r1, #0
    1256:	4602      	mov	r2, r0
    1258:	9100      	str	r1, [sp, #0]
    125a:	4803      	ldr	r0, [pc, #12]	; (1268 <vprintk+0x18>)
    125c:	f000 f92a 	bl	14b4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    1260:	b003      	add	sp, #12
    1262:	f85d fb04 	ldr.w	pc, [sp], #4
    1266:	bf00      	nop
    1268:	00001239 	.word	0x00001239

0000126c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    126c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    126e:	2500      	movs	r5, #0
{
    1270:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1272:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1276:	4604      	mov	r4, r0
    1278:	9500      	str	r5, [sp, #0]
    127a:	a903      	add	r1, sp, #12
    127c:	4805      	ldr	r0, [pc, #20]	; (1294 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    127e:	9505      	str	r5, [sp, #20]
    1280:	f000 f918 	bl	14b4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1284:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1288:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    128a:	bfb8      	it	lt
    128c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    128e:	b007      	add	sp, #28
    1290:	bd30      	pop	{r4, r5, pc}
    1292:	bf00      	nop
    1294:	00006747 	.word	0x00006747

00001298 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    129c:	8b05      	ldrh	r5, [r0, #24]
{
    129e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    12a0:	0728      	lsls	r0, r5, #28
{
    12a2:	4690      	mov	r8, r2
	if (processing) {
    12a4:	d411      	bmi.n	12ca <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    12a6:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    12a8:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    12ac:	f040 80cd 	bne.w	144a <process_event+0x1b2>
			evt = process_recheck(mgr);
    12b0:	4620      	mov	r0, r4
    12b2:	f005 fa7f 	bl	67b4 <process_recheck>
		}

		if (evt == EVT_NOP) {
    12b6:	b178      	cbz	r0, 12d8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    12b8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12ba:	8b21      	ldrh	r1, [r4, #24]
    12bc:	2804      	cmp	r0, #4
    12be:	d811      	bhi.n	12e4 <process_event+0x4c>
    12c0:	e8df f000 	tbb	[pc, r0]
    12c4:	856d10c3 	.word	0x856d10c3
    12c8:	95          	.byte	0x95
    12c9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    12ca:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    12cc:	bf0c      	ite	eq
    12ce:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    12d2:	f045 0520 	orrne.w	r5, r5, #32
    12d6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    12d8:	f388 8811 	msr	BASEPRI, r8
    12dc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    12e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12e4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    12e8:	45aa      	cmp	sl, r5
    12ea:	f000 80a6 	beq.w	143a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    12ee:	2700      	movs	r7, #0
    12f0:	46b9      	mov	r9, r7
    12f2:	463e      	mov	r6, r7
    12f4:	68a3      	ldr	r3, [r4, #8]
    12f6:	2b00      	cmp	r3, #0
    12f8:	f000 80bd 	beq.w	1476 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    12fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1300:	8321      	strh	r1, [r4, #24]
    1302:	f388 8811 	msr	BASEPRI, r8
    1306:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    130a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    130c:	2900      	cmp	r1, #0
    130e:	f000 80bb 	beq.w	1488 <process_event+0x1f0>
	return node->next;
    1312:	680d      	ldr	r5, [r1, #0]
    1314:	2900      	cmp	r1, #0
    1316:	f000 80b7 	beq.w	1488 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    131a:	4633      	mov	r3, r6
    131c:	4652      	mov	r2, sl
    131e:	4620      	mov	r0, r4
    1320:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1324:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1326:	2d00      	cmp	r5, #0
    1328:	d076      	beq.n	1418 <process_event+0x180>
    132a:	682b      	ldr	r3, [r5, #0]
    132c:	4629      	mov	r1, r5
    132e:	461d      	mov	r5, r3
    1330:	e7f0      	b.n	1314 <process_event+0x7c>
    1332:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1336:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1338:	2a01      	cmp	r2, #1
    133a:	d81b      	bhi.n	1374 <process_event+0xdc>
	list->head = NULL;
    133c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    133e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1342:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1344:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1346:	b289      	uxth	r1, r1
	list->tail = NULL;
    1348:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    134c:	d109      	bne.n	1362 <process_event+0xca>
    134e:	463b      	mov	r3, r7
    1350:	e003      	b.n	135a <process_event+0xc2>
				mgr->refs += 1U;
    1352:	8b62      	ldrh	r2, [r4, #26]
    1354:	3201      	adds	r2, #1
    1356:	8362      	strh	r2, [r4, #26]
	return node->next;
    1358:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    135a:	2b00      	cmp	r3, #0
    135c:	d1f9      	bne.n	1352 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    135e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1362:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1364:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1366:	f005 fa25 	bl	67b4 <process_recheck>
    136a:	2800      	cmp	r0, #0
    136c:	d07b      	beq.n	1466 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    136e:	f041 0120 	orr.w	r1, r1, #32
    1372:	e077      	b.n	1464 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1374:	2b04      	cmp	r3, #4
    1376:	d10a      	bne.n	138e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1378:	f021 0107 	bic.w	r1, r1, #7
    137c:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    137e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1380:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1382:	f005 fa17 	bl	67b4 <process_recheck>
    1386:	b110      	cbz	r0, 138e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1388:	f041 0120 	orr.w	r1, r1, #32
    138c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    138e:	8b21      	ldrh	r1, [r4, #24]
    1390:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1394:	45aa      	cmp	sl, r5
    1396:	d050      	beq.n	143a <process_event+0x1a2>
    1398:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    139a:	46b9      	mov	r9, r7
    139c:	e7aa      	b.n	12f4 <process_event+0x5c>
			transit = mgr->transitions->start;
    139e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13a0:	f021 0107 	bic.w	r1, r1, #7
    13a4:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    13a8:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    13aa:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    13ae:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    13b0:	d12d      	bne.n	140e <process_event+0x176>
		    || (transit != NULL)) {
    13b2:	f1b9 0f00 	cmp.w	r9, #0
    13b6:	d040      	beq.n	143a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    13b8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    13bc:	8321      	strh	r1, [r4, #24]
    13be:	f388 8811 	msr	BASEPRI, r8
    13c2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    13c6:	4620      	mov	r0, r4
    13c8:	4939      	ldr	r1, [pc, #228]	; (14b0 <process_event+0x218>)
    13ca:	47c8      	blx	r9
    13cc:	e029      	b.n	1422 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13ce:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    13d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13d4:	f041 0104 	orr.w	r1, r1, #4
    13d8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    13da:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    13dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    13e0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    13e2:	d0e6      	beq.n	13b2 <process_event+0x11a>
    13e4:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    13e6:	f04f 0a04 	mov.w	sl, #4
		res = 0;
    13ea:	463e      	mov	r6, r7
    13ec:	e782      	b.n	12f4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13ee:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    13f2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    13f4:	f041 0105 	orr.w	r1, r1, #5
    13f8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    13fa:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    13fc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1400:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1402:	d0d6      	beq.n	13b2 <process_event+0x11a>
    1404:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1406:	f04f 0a05 	mov.w	sl, #5
		res = 0;
    140a:	463e      	mov	r6, r7
    140c:	e772      	b.n	12f4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    140e:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1410:	f04f 0a06 	mov.w	sl, #6
		res = 0;
    1414:	463e      	mov	r6, r7
    1416:	e76d      	b.n	12f4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1418:	462b      	mov	r3, r5
    141a:	e787      	b.n	132c <process_event+0x94>
			if (transit != NULL) {
    141c:	f1b9 0f00 	cmp.w	r9, #0
    1420:	d1d1      	bne.n	13c6 <process_event+0x12e>
	__asm__ volatile(
    1422:	f04f 0320 	mov.w	r3, #32
    1426:	f3ef 8811 	mrs	r8, BASEPRI
    142a:	f383 8812 	msr	BASEPRI_MAX, r3
    142e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1432:	8b23      	ldrh	r3, [r4, #24]
    1434:	f023 0308 	bic.w	r3, r3, #8
    1438:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    143a:	8b25      	ldrh	r5, [r4, #24]
    143c:	06ea      	lsls	r2, r5, #27
    143e:	d52e      	bpl.n	149e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1440:	f025 0310 	bic.w	r3, r5, #16
    1444:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1446:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    144a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    144c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    144e:	2e00      	cmp	r6, #0
    1450:	f6bf af6f 	bge.w	1332 <process_event+0x9a>
	list->head = NULL;
    1454:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1456:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1458:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    145c:	f021 0107 	bic.w	r1, r1, #7
    1460:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1464:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1466:	8b21      	ldrh	r1, [r4, #24]
    1468:	f04f 0900 	mov.w	r9, #0
    146c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1470:	45aa      	cmp	sl, r5
    1472:	f47f af3f 	bne.w	12f4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1476:	2f00      	cmp	r7, #0
    1478:	d09b      	beq.n	13b2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    147a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    147e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1480:	f388 8811 	msr	BASEPRI, r8
    1484:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1488:	2f00      	cmp	r7, #0
    148a:	d0c7      	beq.n	141c <process_event+0x184>
	return node->next;
    148c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    148e:	4639      	mov	r1, r7
    1490:	4633      	mov	r3, r6
    1492:	4652      	mov	r2, sl
    1494:	4620      	mov	r0, r4
    1496:	f005 f9b9 	bl	680c <notify_one>
	list->head = node;
    149a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    149c:	e7f4      	b.n	1488 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    149e:	06ab      	lsls	r3, r5, #26
    14a0:	f57f af1a 	bpl.w	12d8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    14a4:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    14a8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    14aa:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    14ae:	e6ff      	b.n	12b0 <process_event+0x18>
    14b0:	00006839 	.word	0x00006839

000014b4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    14b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b8:	4681      	mov	r9, r0
    14ba:	468b      	mov	fp, r1
    14bc:	4617      	mov	r7, r2
    14be:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    14c0:	2500      	movs	r5, #0
{
    14c2:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    14c4:	7838      	ldrb	r0, [r7, #0]
    14c6:	b908      	cbnz	r0, 14cc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    14c8:	4628      	mov	r0, r5
    14ca:	e357      	b.n	1b7c <z_cbvprintf_impl+0x6c8>
			OUTC(*fp++);
    14cc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    14ce:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    14d0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    14d2:	d006      	beq.n	14e2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    14d4:	4659      	mov	r1, fp
    14d6:	47c8      	blx	r9
    14d8:	2800      	cmp	r0, #0
    14da:	f2c0 834f 	blt.w	1b7c <z_cbvprintf_impl+0x6c8>
    14de:	3501      	adds	r5, #1
		if (bps == NULL) {
    14e0:	e1fb      	b.n	18da <z_cbvprintf_impl+0x426>
		} state = {
    14e2:	2218      	movs	r2, #24
    14e4:	2100      	movs	r1, #0
    14e6:	a80e      	add	r0, sp, #56	; 0x38
    14e8:	f005 fd93 	bl	7012 <memset>
	if (*sp == '%') {
    14ec:	787b      	ldrb	r3, [r7, #1]
    14ee:	2b25      	cmp	r3, #37	; 0x25
    14f0:	d07d      	beq.n	15ee <z_cbvprintf_impl+0x13a>
    14f2:	2300      	movs	r3, #0
    14f4:	4698      	mov	r8, r3
    14f6:	469e      	mov	lr, r3
    14f8:	469c      	mov	ip, r3
    14fa:	461e      	mov	r6, r3
    14fc:	1c78      	adds	r0, r7, #1
    14fe:	4601      	mov	r1, r0
		switch (*sp) {
    1500:	f810 2b01 	ldrb.w	r2, [r0], #1
    1504:	2a2b      	cmp	r2, #43	; 0x2b
    1506:	f000 80a1 	beq.w	164c <z_cbvprintf_impl+0x198>
    150a:	f200 8098 	bhi.w	163e <z_cbvprintf_impl+0x18a>
    150e:	2a20      	cmp	r2, #32
    1510:	f000 809f 	beq.w	1652 <z_cbvprintf_impl+0x19e>
    1514:	2a23      	cmp	r2, #35	; 0x23
    1516:	f000 809f 	beq.w	1658 <z_cbvprintf_impl+0x1a4>
    151a:	b12b      	cbz	r3, 1528 <z_cbvprintf_impl+0x74>
    151c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1524:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1528:	f1b8 0f00 	cmp.w	r8, #0
    152c:	d005      	beq.n	153a <z_cbvprintf_impl+0x86>
    152e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1532:	f043 0320 	orr.w	r3, r3, #32
    1536:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    153a:	f1be 0f00 	cmp.w	lr, #0
    153e:	d005      	beq.n	154c <z_cbvprintf_impl+0x98>
    1540:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1544:	f043 0310 	orr.w	r3, r3, #16
    1548:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    154c:	f1bc 0f00 	cmp.w	ip, #0
    1550:	d005      	beq.n	155e <z_cbvprintf_impl+0xaa>
    1552:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1556:	f043 0308 	orr.w	r3, r3, #8
    155a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    155e:	b12e      	cbz	r6, 156c <z_cbvprintf_impl+0xb8>
    1560:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1564:	f043 0304 	orr.w	r3, r3, #4
    1568:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    156c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1570:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1574:	2844      	cmp	r0, #68	; 0x44
    1576:	d103      	bne.n	1580 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1578:	f36f 1386 	bfc	r3, #6, #1
    157c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1580:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1584:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    158a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    158e:	d17f      	bne.n	1690 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1590:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1594:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1596:	f042 0201 	orr.w	r2, r2, #1
    159a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    159e:	781a      	ldrb	r2, [r3, #0]
    15a0:	2a2e      	cmp	r2, #46	; 0x2e
    15a2:	bf0c      	ite	eq
    15a4:	2101      	moveq	r1, #1
    15a6:	2100      	movne	r1, #0
    15a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    15ac:	f361 0241 	bfi	r2, r1, #1, #1
    15b0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    15b4:	d178      	bne.n	16a8 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    15b6:	785a      	ldrb	r2, [r3, #1]
    15b8:	2a2a      	cmp	r2, #42	; 0x2a
    15ba:	d06e      	beq.n	169a <z_cbvprintf_impl+0x1e6>
	size_t val = 0;
    15bc:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    15be:	f04f 0c0a 	mov.w	ip, #10
	++sp;
    15c2:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    15c4:	4619      	mov	r1, r3
    15c6:	f811 0b01 	ldrb.w	r0, [r1], #1
    15ca:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    15ce:	2e09      	cmp	r6, #9
    15d0:	f240 8095 	bls.w	16fe <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    15d4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    15d8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    15da:	f3c1 0040 	ubfx	r0, r1, #1, #1
    15de:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    15e2:	460a      	mov	r2, r1
    15e4:	f360 0241 	bfi	r2, r0, #1, #1
    15e8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    15ec:	e05c      	b.n	16a8 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    15ee:	1cba      	adds	r2, r7, #2
    15f0:	9203      	str	r2, [sp, #12]
    15f2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    15f6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    15fa:	07da      	lsls	r2, r3, #31
    15fc:	f140 812e 	bpl.w	185c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    1600:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1604:	f1b8 0f00 	cmp.w	r8, #0
    1608:	da07      	bge.n	161a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    160a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
    160e:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
    1612:	f042 0204 	orr.w	r2, r2, #4
    1616:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
    161a:	075e      	lsls	r6, r3, #29
    161c:	f140 8127 	bpl.w	186e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1620:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1624:	f1ba 0f00 	cmp.w	sl, #0
    1628:	f280 8126 	bge.w	1878 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    162c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1630:	f36f 0341 	bfc	r3, #1, #1
    1634:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1638:	f04f 3aff 	mov.w	sl, #4294967295
    163c:	e11c      	b.n	1878 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    163e:	2a2d      	cmp	r2, #45	; 0x2d
    1640:	d00d      	beq.n	165e <z_cbvprintf_impl+0x1aa>
    1642:	2a30      	cmp	r2, #48	; 0x30
    1644:	f47f af69 	bne.w	151a <z_cbvprintf_impl+0x66>
    1648:	2301      	movs	r3, #1
	} while (loop);
    164a:	e758      	b.n	14fe <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    164c:	f04f 0c01 	mov.w	ip, #1
    1650:	e755      	b.n	14fe <z_cbvprintf_impl+0x4a>
    1652:	f04f 0e01 	mov.w	lr, #1
    1656:	e752      	b.n	14fe <z_cbvprintf_impl+0x4a>
    1658:	f04f 0801 	mov.w	r8, #1
    165c:	e74f      	b.n	14fe <z_cbvprintf_impl+0x4a>
    165e:	2601      	movs	r6, #1
    1660:	e74d      	b.n	14fe <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1662:	4603      	mov	r3, r0
    1664:	fb0e 6202 	mla	r2, lr, r2, r6
    1668:	3a30      	subs	r2, #48	; 0x30
    166a:	4618      	mov	r0, r3
    166c:	f810 6b01 	ldrb.w	r6, [r0], #1
    1670:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1674:	f1bc 0f09 	cmp.w	ip, #9
    1678:	d9f3      	bls.n	1662 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    167a:	4299      	cmp	r1, r3
    167c:	d08f      	beq.n	159e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    167e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1682:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1684:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1686:	f362 0141 	bfi	r1, r2, #1, #1
    168a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    168e:	e786      	b.n	159e <z_cbvprintf_impl+0xea>
    1690:	460b      	mov	r3, r1
	size_t val = 0;
    1692:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1694:	f04f 0e0a 	mov.w	lr, #10
    1698:	e7e7      	b.n	166a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    169a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    169e:	3302      	adds	r3, #2
		conv->prec_star = true;
    16a0:	f042 0204 	orr.w	r2, r2, #4
    16a4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
    16a8:	781a      	ldrb	r2, [r3, #0]
    16aa:	2a6c      	cmp	r2, #108	; 0x6c
    16ac:	d047      	beq.n	173e <z_cbvprintf_impl+0x28a>
    16ae:	d82b      	bhi.n	1708 <z_cbvprintf_impl+0x254>
    16b0:	2a68      	cmp	r2, #104	; 0x68
    16b2:	d031      	beq.n	1718 <z_cbvprintf_impl+0x264>
    16b4:	2a6a      	cmp	r2, #106	; 0x6a
    16b6:	d04b      	beq.n	1750 <z_cbvprintf_impl+0x29c>
    16b8:	2a4c      	cmp	r2, #76	; 0x4c
    16ba:	d051      	beq.n	1760 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    16bc:	461a      	mov	r2, r3
    16be:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
    16c2:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
    16c4:	9203      	str	r2, [sp, #12]
    16c6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
    16ca:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
    16ce:	f200 80be 	bhi.w	184e <z_cbvprintf_impl+0x39a>
    16d2:	2b6d      	cmp	r3, #109	; 0x6d
    16d4:	d851      	bhi.n	177a <z_cbvprintf_impl+0x2c6>
    16d6:	2b69      	cmp	r3, #105	; 0x69
    16d8:	f200 80b9 	bhi.w	184e <z_cbvprintf_impl+0x39a>
    16dc:	2b57      	cmp	r3, #87	; 0x57
    16de:	d867      	bhi.n	17b0 <z_cbvprintf_impl+0x2fc>
    16e0:	2b41      	cmp	r3, #65	; 0x41
    16e2:	d003      	beq.n	16ec <z_cbvprintf_impl+0x238>
    16e4:	3b45      	subs	r3, #69	; 0x45
    16e6:	2b02      	cmp	r3, #2
    16e8:	f200 80b1 	bhi.w	184e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    16ec:	2204      	movs	r2, #4
    16ee:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    16f2:	f362 0302 	bfi	r3, r2, #0, #3
    16f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    16fa:	2301      	movs	r3, #1
			break;
    16fc:	e073      	b.n	17e6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    16fe:	fb0c 0202 	mla	r2, ip, r2, r0
    1702:	460b      	mov	r3, r1
    1704:	3a30      	subs	r2, #48	; 0x30
    1706:	e75d      	b.n	15c4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    1708:	2a74      	cmp	r2, #116	; 0x74
    170a:	d025      	beq.n	1758 <z_cbvprintf_impl+0x2a4>
    170c:	2a7a      	cmp	r2, #122	; 0x7a
    170e:	d1d5      	bne.n	16bc <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    1710:	2106      	movs	r1, #6
    1712:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1716:	e00c      	b.n	1732 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    1718:	785a      	ldrb	r2, [r3, #1]
    171a:	2a68      	cmp	r2, #104	; 0x68
    171c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1720:	d106      	bne.n	1730 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    1722:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1724:	f361 02c6 	bfi	r2, r1, #3, #4
    1728:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    172c:	3302      	adds	r3, #2
    172e:	e7c5      	b.n	16bc <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    1730:	2102      	movs	r1, #2
    1732:	f361 02c6 	bfi	r2, r1, #3, #4
    1736:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    173a:	3301      	adds	r3, #1
    173c:	e7be      	b.n	16bc <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    173e:	785a      	ldrb	r2, [r3, #1]
    1740:	2a6c      	cmp	r2, #108	; 0x6c
    1742:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1746:	d101      	bne.n	174c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1748:	2104      	movs	r1, #4
    174a:	e7eb      	b.n	1724 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    174c:	2103      	movs	r1, #3
    174e:	e7f0      	b.n	1732 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1750:	2105      	movs	r1, #5
    1752:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1756:	e7ec      	b.n	1732 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1758:	2107      	movs	r1, #7
    175a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    175e:	e7e8      	b.n	1732 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1760:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1764:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1768:	f022 0202 	bic.w	r2, r2, #2
    176c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1770:	f042 0202 	orr.w	r2, r2, #2
    1774:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1778:	e7df      	b.n	173a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    177a:	3b6e      	subs	r3, #110	; 0x6e
    177c:	b2d9      	uxtb	r1, r3
    177e:	2301      	movs	r3, #1
    1780:	408b      	lsls	r3, r1
    1782:	f240 4182 	movw	r1, #1154	; 0x482
    1786:	420b      	tst	r3, r1
    1788:	d137      	bne.n	17fa <z_cbvprintf_impl+0x346>
    178a:	f013 0f24 	tst.w	r3, #36	; 0x24
    178e:	d151      	bne.n	1834 <z_cbvprintf_impl+0x380>
    1790:	07d8      	lsls	r0, r3, #31
    1792:	d55c      	bpl.n	184e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1794:	2103      	movs	r1, #3
    1796:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    179a:	f361 0302 	bfi	r3, r1, #0, #3
    179e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    17a2:	f002 0378 	and.w	r3, r2, #120	; 0x78
    17a6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    17aa:	424b      	negs	r3, r1
    17ac:	414b      	adcs	r3, r1
    17ae:	e01a      	b.n	17e6 <z_cbvprintf_impl+0x332>
    17b0:	2001      	movs	r0, #1
	switch (conv->specifier) {
    17b2:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    17b6:	b2c9      	uxtb	r1, r1
    17b8:	fa00 f101 	lsl.w	r1, r0, r1
    17bc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    17c0:	d194      	bne.n	16ec <z_cbvprintf_impl+0x238>
    17c2:	f640 0601 	movw	r6, #2049	; 0x801
    17c6:	4231      	tst	r1, r6
    17c8:	d11d      	bne.n	1806 <z_cbvprintf_impl+0x352>
    17ca:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    17ce:	d03e      	beq.n	184e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    17d0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    17d4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    17d8:	f002 0278 	and.w	r2, r2, #120	; 0x78
    17dc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    17de:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    17e2:	d034      	beq.n	184e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    17e4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    17e6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    17ea:	f3c2 0140 	ubfx	r1, r2, #1, #1
    17ee:	430b      	orrs	r3, r1
    17f0:	f363 0241 	bfi	r2, r3, #1, #1
    17f4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    17f8:	e6fd      	b.n	15f6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    17fa:	2102      	movs	r1, #2
    17fc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1800:	f361 0302 	bfi	r3, r1, #0, #3
    1804:	e7e8      	b.n	17d8 <z_cbvprintf_impl+0x324>
    1806:	2002      	movs	r0, #2
    1808:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    180c:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1810:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1814:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1816:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    181a:	bf02      	ittt	eq
    181c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1820:	f041 0101 	orreq.w	r1, r1, #1
    1824:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1828:	2b63      	cmp	r3, #99	; 0x63
    182a:	d1db      	bne.n	17e4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    182c:	1e13      	subs	r3, r2, #0
    182e:	bf18      	it	ne
    1830:	2301      	movne	r3, #1
    1832:	e7d8      	b.n	17e6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1834:	2103      	movs	r1, #3
    1836:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    183a:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    183e:	f361 0302 	bfi	r3, r1, #0, #3
    1842:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1846:	bf14      	ite	ne
    1848:	2301      	movne	r3, #1
    184a:	2300      	moveq	r3, #0
    184c:	e7cb      	b.n	17e6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    184e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1852:	f043 0301 	orr.w	r3, r3, #1
    1856:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    185a:	e7c3      	b.n	17e4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    185c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1860:	2a00      	cmp	r2, #0
		int width = -1;
    1862:	bfac      	ite	ge
    1864:	f04f 38ff 	movge.w	r8, #4294967295
			width = conv->width_value;
    1868:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
    186c:	e6d5      	b.n	161a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    186e:	0798      	lsls	r0, r3, #30
    1870:	f57f aee2 	bpl.w	1638 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1874:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
    1878:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    187a:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    187e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
    1882:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
    1886:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    188a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    188c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1890:	d133      	bne.n	18fa <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    1892:	1ecb      	subs	r3, r1, #3
    1894:	2b04      	cmp	r3, #4
    1896:	d804      	bhi.n	18a2 <z_cbvprintf_impl+0x3ee>
    1898:	e8df f003 	tbb	[pc, r3]
    189c:	21464621 	.word	0x21464621
    18a0:	21          	.byte	0x21
    18a1:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    18a2:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    18a4:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    18a6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    18aa:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    18ae:	d11c      	bne.n	18ea <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    18b0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    18b4:	17da      	asrs	r2, r3, #31
    18b6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    18ba:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    18bc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    18c0:	f013 0603 	ands.w	r6, r3, #3
    18c4:	d050      	beq.n	1968 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    18c6:	463a      	mov	r2, r7
    18c8:	4659      	mov	r1, fp
    18ca:	4648      	mov	r0, r9
    18cc:	9b03      	ldr	r3, [sp, #12]
    18ce:	f005 f890 	bl	69f2 <outs>
    18d2:	2800      	cmp	r0, #0
    18d4:	f2c0 8152 	blt.w	1b7c <z_cbvprintf_impl+0x6c8>
    18d8:	4405      	add	r5, r0
			continue;
    18da:	9f03      	ldr	r7, [sp, #12]
    18dc:	e5f2      	b.n	14c4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    18de:	f854 3b04 	ldr.w	r3, [r4], #4
    18e2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    18e4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    18e8:	e7e8      	b.n	18bc <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    18ea:	2902      	cmp	r1, #2
    18ec:	d1e5      	bne.n	18ba <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    18ee:	b21a      	sxth	r2, r3
    18f0:	f343 33c0 	sbfx	r3, r3, #15, #1
    18f4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    18f8:	e7df      	b.n	18ba <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    18fa:	2b02      	cmp	r3, #2
    18fc:	d124      	bne.n	1948 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    18fe:	1ecb      	subs	r3, r1, #3
    1900:	2b04      	cmp	r3, #4
    1902:	d804      	bhi.n	190e <z_cbvprintf_impl+0x45a>
    1904:	e8df f003 	tbb	[pc, r3]
    1908:	18101018 	.word	0x18101018
    190c:	18          	.byte	0x18
    190d:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    190e:	2901      	cmp	r1, #1
    1910:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
    1914:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1918:	d014      	beq.n	1944 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    191a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    191c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1920:	d1cc      	bne.n	18bc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    1922:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1924:	930e      	str	r3, [sp, #56]	; 0x38
    1926:	e7c9      	b.n	18bc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    1928:	3407      	adds	r4, #7
    192a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    192e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1932:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1936:	e7c1      	b.n	18bc <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    1938:	f854 3b04 	ldr.w	r3, [r4], #4
    193c:	930e      	str	r3, [sp, #56]	; 0x38
    193e:	2300      	movs	r3, #0
    1940:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1942:	e7bb      	b.n	18bc <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1944:	b2db      	uxtb	r3, r3
    1946:	e7cd      	b.n	18e4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    1948:	2b04      	cmp	r3, #4
    194a:	d108      	bne.n	195e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    194c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    194e:	f024 0407 	bic.w	r4, r4, #7
    1952:	e9d4 2300 	ldrd	r2, r3, [r4]
    1956:	3408      	adds	r4, #8
    1958:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    195c:	e7ae      	b.n	18bc <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    195e:	2b03      	cmp	r3, #3
    1960:	d1ac      	bne.n	18bc <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    1962:	f854 3b04 	ldr.w	r3, [r4], #4
    1966:	e7dd      	b.n	1924 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    1968:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    196c:	2878      	cmp	r0, #120	; 0x78
    196e:	d8b4      	bhi.n	18da <z_cbvprintf_impl+0x426>
    1970:	2862      	cmp	r0, #98	; 0x62
    1972:	d81c      	bhi.n	19ae <z_cbvprintf_impl+0x4fa>
    1974:	2825      	cmp	r0, #37	; 0x25
    1976:	f43f adad 	beq.w	14d4 <z_cbvprintf_impl+0x20>
    197a:	2858      	cmp	r0, #88	; 0x58
    197c:	d1ad      	bne.n	18da <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    197e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1982:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1986:	9300      	str	r3, [sp, #0]
    1988:	aa10      	add	r2, sp, #64	; 0x40
    198a:	ab08      	add	r3, sp, #32
    198c:	f004 ffeb 	bl	6966 <encode_uint>
			if (precision >= 0) {
    1990:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1994:	4607      	mov	r7, r0
			if (precision >= 0) {
    1996:	f280 8099 	bge.w	1acc <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    199a:	2f00      	cmp	r7, #0
    199c:	d09d      	beq.n	18da <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    199e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    19a2:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    19a4:	2e00      	cmp	r6, #0
    19a6:	f000 80c0 	beq.w	1b2a <z_cbvprintf_impl+0x676>
			nj_len += 1U;
    19aa:	3001      	adds	r0, #1
    19ac:	e0bd      	b.n	1b2a <z_cbvprintf_impl+0x676>
		switch (conv->specifier) {
    19ae:	3863      	subs	r0, #99	; 0x63
    19b0:	2815      	cmp	r0, #21
    19b2:	d892      	bhi.n	18da <z_cbvprintf_impl+0x426>
    19b4:	a201      	add	r2, pc, #4	; (adr r2, 19bc <z_cbvprintf_impl+0x508>)
    19b6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    19ba:	bf00      	nop
    19bc:	00001a91 	.word	0x00001a91
    19c0:	00001aa3 	.word	0x00001aa3
    19c4:	000018db 	.word	0x000018db
    19c8:	000018db 	.word	0x000018db
    19cc:	000018db 	.word	0x000018db
    19d0:	000018db 	.word	0x000018db
    19d4:	00001aa3 	.word	0x00001aa3
    19d8:	000018db 	.word	0x000018db
    19dc:	000018db 	.word	0x000018db
    19e0:	000018db 	.word	0x000018db
    19e4:	000018db 	.word	0x000018db
    19e8:	00001b2f 	.word	0x00001b2f
    19ec:	00001ac7 	.word	0x00001ac7
    19f0:	00001aed 	.word	0x00001aed
    19f4:	000018db 	.word	0x000018db
    19f8:	000018db 	.word	0x000018db
    19fc:	00001a15 	.word	0x00001a15
    1a00:	000018db 	.word	0x000018db
    1a04:	00001ac7 	.word	0x00001ac7
    1a08:	000018db 	.word	0x000018db
    1a0c:	000018db 	.word	0x000018db
    1a10:	00001ac7 	.word	0x00001ac7
			if (precision >= 0) {
    1a14:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1a18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1a1a:	db35      	blt.n	1a88 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    1a1c:	4651      	mov	r1, sl
    1a1e:	4638      	mov	r0, r7
    1a20:	f005 fae3 	bl	6fea <strnlen>
			bpe = bps + len;
    1a24:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1a28:	2f00      	cmp	r7, #0
    1a2a:	f43f af56 	beq.w	18da <z_cbvprintf_impl+0x426>
		char sign = 0;
    1a2e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1a30:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a34:	f013 0210 	ands.w	r2, r3, #16
    1a38:	9205      	str	r2, [sp, #20]
    1a3a:	f000 8092 	beq.w	1b62 <z_cbvprintf_impl+0x6ae>
			nj_len += 2U;
    1a3e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1a40:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1a42:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1a44:	bf48      	it	mi
    1a46:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1a48:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1a4a:	bf48      	it	mi
    1a4c:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1a4e:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
    1a52:	9204      	str	r2, [sp, #16]
		if (width > 0) {
    1a54:	f340 809f 	ble.w	1b96 <z_cbvprintf_impl+0x6e2>
			if (!conv->flag_dash) {
    1a58:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1a5c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1a60:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1a64:	0750      	lsls	r0, r2, #29
    1a66:	9306      	str	r3, [sp, #24]
    1a68:	f100 8095 	bmi.w	1b96 <z_cbvprintf_impl+0x6e2>
				if (conv->flag_zero) {
    1a6c:	0651      	lsls	r1, r2, #25
    1a6e:	f140 8088 	bpl.w	1b82 <z_cbvprintf_impl+0x6ce>
					if (sign != 0) {
    1a72:	b13e      	cbz	r6, 1a84 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    1a74:	4659      	mov	r1, fp
    1a76:	4630      	mov	r0, r6
    1a78:	47c8      	blx	r9
    1a7a:	2800      	cmp	r0, #0
    1a7c:	db7e      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1a7e:	9b06      	ldr	r3, [sp, #24]
    1a80:	3501      	adds	r5, #1
    1a82:	461e      	mov	r6, r3
					pad = '0';
    1a84:	2230      	movs	r2, #48	; 0x30
    1a86:	e07d      	b.n	1b84 <z_cbvprintf_impl+0x6d0>
				len = strlen(bps);
    1a88:	4638      	mov	r0, r7
    1a8a:	f005 faa7 	bl	6fdc <strlen>
    1a8e:	e7c9      	b.n	1a24 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
    1a92:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    1a94:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1a96:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
    1a9a:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1a9c:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
    1aa0:	e7c6      	b.n	1a30 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    1aa2:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1aa4:	bf5a      	itte	pl
    1aa6:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1aaa:	015e      	lslpl	r6, r3, #5
				sign = '+';
    1aac:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
    1aae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	f6bf af63 	bge.w	197e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    1ab8:	4252      	negs	r2, r2
    1aba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    1abe:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    1ac0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1ac4:	e75b      	b.n	197e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    1ac6:	2600      	movs	r6, #0
    1ac8:	e759      	b.n	197e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    1aca:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1acc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1ad0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1ad4:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1ad6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1ada:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1adc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1ae0:	f67f af5b 	bls.w	199a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    1ae4:	ebaa 0303 	sub.w	r3, sl, r3
    1ae8:	9311      	str	r3, [sp, #68]	; 0x44
    1aea:	e756      	b.n	199a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    1aec:	980e      	ldr	r0, [sp, #56]	; 0x38
    1aee:	b390      	cbz	r0, 1b56 <z_cbvprintf_impl+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1af0:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1af4:	9300      	str	r3, [sp, #0]
    1af6:	2100      	movs	r1, #0
    1af8:	ab08      	add	r3, sp, #32
    1afa:	aa10      	add	r2, sp, #64	; 0x40
    1afc:	f004 ff33 	bl	6966 <encode_uint>
				conv->altform_0c = true;
    1b00:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1b04:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
    1b08:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1b0c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1b10:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1b14:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1b16:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1b1a:	dad6      	bge.n	1aca <z_cbvprintf_impl+0x616>
		if (bps == NULL) {
    1b1c:	2800      	cmp	r0, #0
    1b1e:	f43f aedc 	beq.w	18da <z_cbvprintf_impl+0x426>
		char sign = 0;
    1b22:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
    1b24:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1b28:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
    1b2a:	469a      	mov	sl, r3
    1b2c:	e780      	b.n	1a30 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    1b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1b30:	2907      	cmp	r1, #7
    1b32:	f63f aed2 	bhi.w	18da <z_cbvprintf_impl+0x426>
    1b36:	e8df f001 	tbb	[pc, r1]
    1b3a:	040c      	.short	0x040c
    1b3c:	08080c06 	.word	0x08080c06
    1b40:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1b42:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1b44:	e6c9      	b.n	18da <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    1b46:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1b48:	e6c7      	b.n	18da <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    1b4a:	17ea      	asrs	r2, r5, #31
    1b4c:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1b50:	e6c3      	b.n	18da <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1b52:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1b54:	e6c1      	b.n	18da <z_cbvprintf_impl+0x426>
    1b56:	4f2f      	ldr	r7, [pc, #188]	; (1c14 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    1b58:	4606      	mov	r6, r0
			bpe = bps + 5;
    1b5a:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1b5e:	2005      	movs	r0, #5
    1b60:	e766      	b.n	1a30 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    1b62:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1b64:	bf48      	it	mi
    1b66:	3001      	addmi	r0, #1
    1b68:	e76a      	b.n	1a40 <z_cbvprintf_impl+0x58c>
					OUTC(pad);
    1b6a:	4610      	mov	r0, r2
    1b6c:	9307      	str	r3, [sp, #28]
    1b6e:	9206      	str	r2, [sp, #24]
    1b70:	4659      	mov	r1, fp
    1b72:	47c8      	blx	r9
    1b74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1b78:	2800      	cmp	r0, #0
    1b7a:	da04      	bge.n	1b86 <z_cbvprintf_impl+0x6d2>
#undef OUTS
#undef OUTC
}
    1b7c:	b015      	add	sp, #84	; 0x54
    1b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1b82:	2220      	movs	r2, #32
					pad = '0';
    1b84:	4643      	mov	r3, r8
				while (width-- > 0) {
    1b86:	4619      	mov	r1, r3
    1b88:	2900      	cmp	r1, #0
    1b8a:	f103 33ff 	add.w	r3, r3, #4294967295
    1b8e:	dcec      	bgt.n	1b6a <z_cbvprintf_impl+0x6b6>
    1b90:	4445      	add	r5, r8
    1b92:	4698      	mov	r8, r3
    1b94:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
    1b96:	b12e      	cbz	r6, 1ba4 <z_cbvprintf_impl+0x6f0>
			OUTC(sign);
    1b98:	4659      	mov	r1, fp
    1b9a:	4630      	mov	r0, r6
    1b9c:	47c8      	blx	r9
    1b9e:	2800      	cmp	r0, #0
    1ba0:	dbec      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1ba2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1ba4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1ba8:	06da      	lsls	r2, r3, #27
    1baa:	d401      	bmi.n	1bb0 <z_cbvprintf_impl+0x6fc>
    1bac:	071b      	lsls	r3, r3, #28
    1bae:	d505      	bpl.n	1bbc <z_cbvprintf_impl+0x708>
				OUTC('0');
    1bb0:	4659      	mov	r1, fp
    1bb2:	2030      	movs	r0, #48	; 0x30
    1bb4:	47c8      	blx	r9
    1bb6:	2800      	cmp	r0, #0
    1bb8:	dbe0      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1bba:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1bbc:	9b05      	ldr	r3, [sp, #20]
    1bbe:	b133      	cbz	r3, 1bce <z_cbvprintf_impl+0x71a>
				OUTC(conv->specifier);
    1bc0:	4659      	mov	r1, fp
    1bc2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1bc6:	47c8      	blx	r9
    1bc8:	2800      	cmp	r0, #0
    1bca:	dbd7      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1bcc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1bce:	9e04      	ldr	r6, [sp, #16]
    1bd0:	442e      	add	r6, r5
    1bd2:	e005      	b.n	1be0 <z_cbvprintf_impl+0x72c>
				OUTC('0');
    1bd4:	4659      	mov	r1, fp
    1bd6:	2030      	movs	r0, #48	; 0x30
    1bd8:	47c8      	blx	r9
    1bda:	2800      	cmp	r0, #0
    1bdc:	dbce      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1bde:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1be0:	1b73      	subs	r3, r6, r5
    1be2:	2b00      	cmp	r3, #0
    1be4:	dcf6      	bgt.n	1bd4 <z_cbvprintf_impl+0x720>
			OUTS(bps, bpe);
    1be6:	4653      	mov	r3, sl
    1be8:	463a      	mov	r2, r7
    1bea:	4659      	mov	r1, fp
    1bec:	4648      	mov	r0, r9
    1bee:	f004 ff00 	bl	69f2 <outs>
    1bf2:	2800      	cmp	r0, #0
    1bf4:	dbc2      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1bf6:	4405      	add	r5, r0
		while (width > 0) {
    1bf8:	44a8      	add	r8, r5
    1bfa:	eba8 0305 	sub.w	r3, r8, r5
    1bfe:	2b00      	cmp	r3, #0
    1c00:	f77f ae6b 	ble.w	18da <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1c04:	4659      	mov	r1, fp
    1c06:	2020      	movs	r0, #32
    1c08:	47c8      	blx	r9
    1c0a:	2800      	cmp	r0, #0
    1c0c:	dbb6      	blt.n	1b7c <z_cbvprintf_impl+0x6c8>
    1c0e:	3501      	adds	r5, #1
			--width;
    1c10:	e7f3      	b.n	1bfa <z_cbvprintf_impl+0x746>
    1c12:	bf00      	nop
    1c14:	00008135 	.word	0x00008135

00001c18 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1c18:	b508      	push	{r3, lr}
	__asm__ volatile(
    1c1a:	f04f 0220 	mov.w	r2, #32
    1c1e:	f3ef 8311 	mrs	r3, BASEPRI
    1c22:	f382 8812 	msr	BASEPRI_MAX, r2
    1c26:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1c2a:	f001 fbed 	bl	3408 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1c2e:	4803      	ldr	r0, [pc, #12]	; (1c3c <sys_reboot+0x24>)
    1c30:	f004 fd9c 	bl	676c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1c34:	f000 ff48 	bl	2ac8 <arch_cpu_idle>
    1c38:	e7fc      	b.n	1c34 <sys_reboot+0x1c>
    1c3a:	bf00      	nop
    1c3c:	0000813b 	.word	0x0000813b

00001c40 <nordicsemi_nrf91_init>:
    1c40:	f04f 0220 	mov.w	r2, #32
    1c44:	f3ef 8311 	mrs	r3, BASEPRI
    1c48:	f382 8812 	msr	BASEPRI_MAX, r2
    1c4c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1c50:	2101      	movs	r1, #1
    1c52:	4a04      	ldr	r2, [pc, #16]	; (1c64 <nordicsemi_nrf91_init+0x24>)
    1c54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1c58:	f383 8811 	msr	BASEPRI, r3
    1c5c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1c60:	2000      	movs	r0, #0
    1c62:	4770      	bx	lr
    1c64:	50039000 	.word	0x50039000

00001c68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1c68:	b120      	cbz	r0, 1c74 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1c6a:	4b03      	ldr	r3, [pc, #12]	; (1c78 <arch_busy_wait+0x10>)
    1c6c:	0180      	lsls	r0, r0, #6
    1c6e:	f043 0301 	orr.w	r3, r3, #1
    1c72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1c74:	4770      	bx	lr
    1c76:	bf00      	nop
    1c78:	00007d20 	.word	0x00007d20

00001c7c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    1c7c:	2806      	cmp	r0, #6
    1c7e:	d107      	bne.n	1c90 <pm_state_set+0x14>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1c80:	2201      	movs	r2, #1
    1c82:	4b04      	ldr	r3, [pc, #16]	; (1c94 <pm_state_set+0x18>)
    1c84:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1c88:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    1c8c:	bf20      	wfe
    while (true)
    1c8e:	e7fd      	b.n	1c8c <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    1c90:	4770      	bx	lr
    1c92:	bf00      	nop
    1c94:	50004000 	.word	0x50004000

00001c98 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1c98:	f002 bdac 	b.w	47f4 <SystemInit>

00001c9c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ca0:	4604      	mov	r4, r0
	uint32_t mask_cpy = mask;

	while (mask_cpy) {
    1ca2:	4607      	mov	r7, r0
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
    1ca4:	f04f 0901 	mov.w	r9, #1
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1ca8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1cfc <activate_foreach_backend+0x60>
	while (mask_cpy) {
    1cac:	b914      	cbnz	r4, 1cb4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    1cae:	4638      	mov	r0, r7
    1cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    1cb4:	fa94 f5a4 	rbit	r5, r4
    1cb8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    1cbc:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1cc0:	012e      	lsls	r6, r5, #4
    1cc2:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    1cc6:	ea6f 0a03 	mvn.w	sl, r3
    1cca:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1cce:	7b2b      	ldrb	r3, [r5, #12]
    1cd0:	2b00      	cmp	r3, #0
    1cd2:	d0eb      	beq.n	1cac <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    1cd4:	f858 3006 	ldr.w	r3, [r8, r6]
    1cd8:	691b      	ldr	r3, [r3, #16]
    1cda:	b94b      	cbnz	r3, 1cf0 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1cdc:	4446      	add	r6, r8
			log_backend_enable(backend,
    1cde:	6873      	ldr	r3, [r6, #4]
    1ce0:	2204      	movs	r2, #4
    1ce2:	4628      	mov	r0, r5
    1ce4:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    1ce6:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    1cea:	f000 fa49 	bl	2180 <log_backend_enable>
    1cee:	e7dd      	b.n	1cac <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1cf0:	4628      	mov	r0, r5
    1cf2:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1cf4:	2800      	cmp	r0, #0
    1cf6:	d1d9      	bne.n	1cac <activate_foreach_backend+0x10>
    1cf8:	e7f0      	b.n	1cdc <activate_foreach_backend+0x40>
    1cfa:	bf00      	nop
    1cfc:	00007d04 	.word	0x00007d04

00001d00 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1d00:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1d02:	2200      	movs	r2, #0
{
    1d04:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1d06:	490f      	ldr	r1, [pc, #60]	; (1d44 <enable_logger+0x44>)
    1d08:	480f      	ldr	r0, [pc, #60]	; (1d48 <enable_logger+0x48>)
    1d0a:	f005 fe18 	bl	793e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1d0e:	2200      	movs	r2, #0
    1d10:	2300      	movs	r3, #0
    1d12:	2400      	movs	r4, #0
    1d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1d18:	230e      	movs	r3, #14
    1d1a:	4d0c      	ldr	r5, [pc, #48]	; (1d4c <enable_logger+0x4c>)
    1d1c:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1d20:	f44f 7240 	mov.w	r2, #768	; 0x300
    1d24:	4628      	mov	r0, r5
    1d26:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1d2a:	4b09      	ldr	r3, [pc, #36]	; (1d50 <enable_logger+0x50>)
    1d2c:	4909      	ldr	r1, [pc, #36]	; (1d54 <enable_logger+0x54>)
    1d2e:	9400      	str	r4, [sp, #0]
    1d30:	f003 fbbc 	bl	54ac <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1d34:	4908      	ldr	r1, [pc, #32]	; (1d58 <enable_logger+0x58>)
    1d36:	4628      	mov	r0, r5
    1d38:	f005 fcc9 	bl	76ce <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1d3c:	4620      	mov	r0, r4
    1d3e:	b009      	add	sp, #36	; 0x24
    1d40:	bd30      	pop	{r4, r5, pc}
    1d42:	bf00      	nop
    1d44:	00001d5d 	.word	0x00001d5d
    1d48:	200006a8 	.word	0x200006a8
    1d4c:	20000220 	.word	0x20000220
    1d50:	0000202d 	.word	0x0000202d
    1d54:	20001040 	.word	0x20001040
    1d58:	00008168 	.word	0x00008168

00001d5c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1d5c:	4801      	ldr	r0, [pc, #4]	; (1d64 <log_process_thread_timer_expiry_fn+0x8>)
    1d5e:	f003 bcff 	b.w	5760 <z_impl_k_sem_give>
    1d62:	bf00      	nop
    1d64:	2000020c 	.word	0x2000020c

00001d68 <z_log_init>:
{
    1d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1d6c:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    1d6e:	481f      	ldr	r0, [pc, #124]	; (1dec <z_log_init+0x84>)
{
    1d70:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1d72:	f005 f86b 	bl	6e4c <atomic_inc>
    1d76:	4606      	mov	r6, r0
    1d78:	2800      	cmp	r0, #0
    1d7a:	d030      	beq.n	1dde <z_log_init+0x76>
	uint32_t mask = 0;
    1d7c:	2500      	movs	r5, #0
}
    1d7e:	4628      	mov	r0, r5
    1d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1d84:	7b23      	ldrb	r3, [r4, #12]
    1d86:	b173      	cbz	r3, 1da6 <z_log_init+0x3e>
	if (backend->api->init) {
    1d88:	6823      	ldr	r3, [r4, #0]
    1d8a:	68db      	ldr	r3, [r3, #12]
    1d8c:	b10b      	cbz	r3, 1d92 <z_log_init+0x2a>
		backend->api->init(backend);
    1d8e:	4620      	mov	r0, r4
    1d90:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1d92:	6823      	ldr	r3, [r4, #0]
    1d94:	691b      	ldr	r3, [r3, #16]
    1d96:	b9d3      	cbnz	r3, 1dce <z_log_init+0x66>
				log_backend_enable(backend,
    1d98:	6863      	ldr	r3, [r4, #4]
    1d9a:	2204      	movs	r2, #4
    1d9c:	4620      	mov	r0, r4
    1d9e:	6819      	ldr	r1, [r3, #0]
    1da0:	f000 f9ee 	bl	2180 <log_backend_enable>
			i++;
    1da4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1da6:	3410      	adds	r4, #16
    1da8:	454c      	cmp	r4, r9
    1daa:	d3eb      	bcc.n	1d84 <z_log_init+0x1c>
	if (blocking) {
    1dac:	f1b8 0f00 	cmp.w	r8, #0
    1db0:	d0e5      	beq.n	1d7e <z_log_init+0x16>
		while (mask) {
    1db2:	2d00      	cmp	r5, #0
    1db4:	d0e2      	beq.n	1d7c <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    1db6:	4628      	mov	r0, r5
    1db8:	f7ff ff70 	bl	1c9c <activate_foreach_backend>
    1dbc:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1dbe:	2f00      	cmp	r7, #0
    1dc0:	d0f7      	beq.n	1db2 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    1dc2:	2100      	movs	r1, #0
    1dc4:	f44f 70a4 	mov.w	r0, #328	; 0x148
    1dc8:	f003 ffda 	bl	5d80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1dcc:	e7f1      	b.n	1db2 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    1dce:	4620      	mov	r0, r4
    1dd0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1dd2:	2800      	cmp	r0, #0
    1dd4:	d0e0      	beq.n	1d98 <z_log_init+0x30>
				mask |= BIT(i);
    1dd6:	fa0a f306 	lsl.w	r3, sl, r6
    1dda:	431d      	orrs	r5, r3
    1ddc:	e7e2      	b.n	1da4 <z_log_init+0x3c>
	uint32_t mask = 0;
    1dde:	4605      	mov	r5, r0
				mask |= BIT(i);
    1de0:	f04f 0a01 	mov.w	sl, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1de4:	4c02      	ldr	r4, [pc, #8]	; (1df0 <z_log_init+0x88>)
    1de6:	f8df 900c 	ldr.w	r9, [pc, #12]	; 1df4 <z_log_init+0x8c>
    1dea:	e7dd      	b.n	1da8 <z_log_init+0x40>
    1dec:	20000824 	.word	0x20000824
    1df0:	00007d04 	.word	0x00007d04
    1df4:	00007d14 	.word	0x00007d14

00001df8 <log_format_func_t_get>:
}
    1df8:	4b01      	ldr	r3, [pc, #4]	; (1e00 <log_format_func_t_get+0x8>)
    1dfa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1dfe:	4770      	bx	lr
    1e00:	00007d3c 	.word	0x00007d3c

00001e04 <log_set_timestamp_func>:
{
    1e04:	b508      	push	{r3, lr}
    1e06:	4603      	mov	r3, r0
    1e08:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1e0a:	b12b      	cbz	r3, 1e18 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1e0c:	4a04      	ldr	r2, [pc, #16]	; (1e20 <log_set_timestamp_func+0x1c>)
    1e0e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1e10:	f000 fbf2 	bl	25f8 <log_output_timestamp_freq_set>
	return 0;
    1e14:	2000      	movs	r0, #0
}
    1e16:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1e18:	f06f 0015 	mvn.w	r0, #21
    1e1c:	e7fb      	b.n	1e16 <log_set_timestamp_func+0x12>
    1e1e:	bf00      	nop
    1e20:	20000004 	.word	0x20000004

00001e24 <z_log_notify_backend_enabled>:
{
    1e24:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1e26:	4c04      	ldr	r4, [pc, #16]	; (1e38 <z_log_notify_backend_enabled+0x14>)
    1e28:	7823      	ldrb	r3, [r4, #0]
    1e2a:	b913      	cbnz	r3, 1e32 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1e2c:	4803      	ldr	r0, [pc, #12]	; (1e3c <z_log_notify_backend_enabled+0x18>)
    1e2e:	f003 fc97 	bl	5760 <z_impl_k_sem_give>
	backend_attached = true;
    1e32:	2301      	movs	r3, #1
    1e34:	7023      	strb	r3, [r4, #0]
}
    1e36:	bd10      	pop	{r4, pc}
    1e38:	20001034 	.word	0x20001034
    1e3c:	2000020c 	.word	0x2000020c

00001e40 <z_log_dropped>:
{
    1e40:	b510      	push	{r4, lr}
    1e42:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1e44:	4806      	ldr	r0, [pc, #24]	; (1e60 <z_log_dropped+0x20>)
    1e46:	f005 f801 	bl	6e4c <atomic_inc>
	if (buffered) {
    1e4a:	b13c      	cbz	r4, 1e5c <z_log_dropped+0x1c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1e4c:	4b05      	ldr	r3, [pc, #20]	; (1e64 <z_log_dropped+0x24>)
    1e4e:	e8d3 1fef 	ldaex	r1, [r3]
    1e52:	3901      	subs	r1, #1
    1e54:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1e58:	2a00      	cmp	r2, #0
    1e5a:	d1f8      	bne.n	1e4e <z_log_dropped+0xe>
}
    1e5c:	bd10      	pop	{r4, pc}
    1e5e:	bf00      	nop
    1e60:	2000081c 	.word	0x2000081c
    1e64:	20000820 	.word	0x20000820

00001e68 <z_log_dropped_read_and_clear>:
}
    1e68:	2000      	movs	r0, #0
    1e6a:	4601      	mov	r1, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e6c:	4b03      	ldr	r3, [pc, #12]	; (1e7c <z_log_dropped_read_and_clear+0x14>)
    1e6e:	e8d3 0fef 	ldaex	r0, [r3]
    1e72:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1e76:	2a00      	cmp	r2, #0
    1e78:	d1f9      	bne.n	1e6e <z_log_dropped_read_and_clear+0x6>
    1e7a:	4770      	bx	lr
    1e7c:	2000081c 	.word	0x2000081c

00001e80 <dropped_notify>:
{
    1e80:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1e82:	f7ff fff1 	bl	1e68 <z_log_dropped_read_and_clear>
    1e86:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1e88:	4c07      	ldr	r4, [pc, #28]	; (1ea8 <dropped_notify+0x28>)
    1e8a:	4e08      	ldr	r6, [pc, #32]	; (1eac <dropped_notify+0x2c>)
    1e8c:	42b4      	cmp	r4, r6
    1e8e:	d300      	bcc.n	1e92 <dropped_notify+0x12>
}
    1e90:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1e92:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1e94:	795b      	ldrb	r3, [r3, #5]
    1e96:	b12b      	cbz	r3, 1ea4 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    1e98:	6823      	ldr	r3, [r4, #0]
    1e9a:	685b      	ldr	r3, [r3, #4]
    1e9c:	b113      	cbz	r3, 1ea4 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    1e9e:	4629      	mov	r1, r5
    1ea0:	4620      	mov	r0, r4
    1ea2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ea4:	3410      	adds	r4, #16
    1ea6:	e7f1      	b.n	1e8c <dropped_notify+0xc>
    1ea8:	00007d04 	.word	0x00007d04
    1eac:	00007d14 	.word	0x00007d14

00001eb0 <z_log_msg_init>:
{
    1eb0:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1eb2:	4c04      	ldr	r4, [pc, #16]	; (1ec4 <z_log_msg_init+0x14>)
    1eb4:	4904      	ldr	r1, [pc, #16]	; (1ec8 <z_log_msg_init+0x18>)
    1eb6:	4620      	mov	r0, r4
    1eb8:	f004 fe5f 	bl	6b7a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1ebc:	4b03      	ldr	r3, [pc, #12]	; (1ecc <z_log_msg_init+0x1c>)
    1ebe:	601c      	str	r4, [r3, #0]
}
    1ec0:	bd10      	pop	{r4, pc}
    1ec2:	bf00      	nop
    1ec4:	20000180 	.word	0x20000180
    1ec8:	00007d28 	.word	0x00007d28
    1ecc:	20000814 	.word	0x20000814

00001ed0 <log_core_init>:
{
    1ed0:	b508      	push	{r3, lr}
	panic_mode = false;
    1ed2:	2300      	movs	r3, #0
    1ed4:	4a06      	ldr	r2, [pc, #24]	; (1ef0 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
    1ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	panic_mode = false;
    1eda:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1edc:	4a05      	ldr	r2, [pc, #20]	; (1ef4 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    1ede:	4806      	ldr	r0, [pc, #24]	; (1ef8 <log_core_init+0x28>)
	dropped_cnt = 0;
    1ee0:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1ee2:	f7ff ff8f 	bl	1e04 <log_set_timestamp_func>
}
    1ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1eea:	f7ff bfe1 	b.w	1eb0 <z_log_msg_init>
    1eee:	bf00      	nop
    1ef0:	20001035 	.word	0x20001035
    1ef4:	2000081c 	.word	0x2000081c
    1ef8:	00006e49 	.word	0x00006e49

00001efc <z_log_msg_alloc>:
{
    1efc:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    1efe:	2200      	movs	r2, #0
    1f00:	2300      	movs	r3, #0
    1f02:	4801      	ldr	r0, [pc, #4]	; (1f08 <z_log_msg_alloc+0xc>)
    1f04:	f004 be5a 	b.w	6bbc <mpsc_pbuf_alloc>
    1f08:	20000180 	.word	0x20000180

00001f0c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1f0c:	4801      	ldr	r0, [pc, #4]	; (1f14 <z_log_msg_local_claim+0x8>)
    1f0e:	f004 bef3 	b.w	6cf8 <mpsc_pbuf_claim>
    1f12:	bf00      	nop
    1f14:	20000180 	.word	0x20000180

00001f18 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1f18:	4b02      	ldr	r3, [pc, #8]	; (1f24 <z_log_msg_free+0xc>)
{
    1f1a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1f1c:	6818      	ldr	r0, [r3, #0]
    1f1e:	f004 bf3b 	b.w	6d98 <mpsc_pbuf_free>
    1f22:	bf00      	nop
    1f24:	20000814 	.word	0x20000814

00001f28 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1f28:	4801      	ldr	r0, [pc, #4]	; (1f30 <z_log_msg_pending+0x8>)
    1f2a:	f004 bf69 	b.w	6e00 <mpsc_pbuf_is_pending>
    1f2e:	bf00      	nop
    1f30:	20000180 	.word	0x20000180

00001f34 <z_impl_log_process>:
{
    1f34:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1f36:	4b26      	ldr	r3, [pc, #152]	; (1fd0 <z_impl_log_process+0x9c>)
    1f38:	7818      	ldrb	r0, [r3, #0]
    1f3a:	2800      	cmp	r0, #0
    1f3c:	d047      	beq.n	1fce <z_impl_log_process+0x9a>
	return z_log_msg_local_claim();
    1f3e:	f7ff ffe5 	bl	1f0c <z_log_msg_local_claim>
	if (msg) {
    1f42:	4605      	mov	r5, r0
    1f44:	b170      	cbz	r0, 1f64 <z_impl_log_process+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1f46:	4b23      	ldr	r3, [pc, #140]	; (1fd4 <z_impl_log_process+0xa0>)
    1f48:	e8d3 1fef 	ldaex	r1, [r3]
    1f4c:	3901      	subs	r1, #1
    1f4e:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1f52:	2a00      	cmp	r2, #0
    1f54:	d1f8      	bne.n	1f48 <z_impl_log_process+0x14>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1f56:	4c20      	ldr	r4, [pc, #128]	; (1fd8 <z_impl_log_process+0xa4>)
    1f58:	4e20      	ldr	r6, [pc, #128]	; (1fdc <z_impl_log_process+0xa8>)
    1f5a:	42b4      	cmp	r4, r6
    1f5c:	d32d      	bcc.n	1fba <z_impl_log_process+0x86>
		z_log_msg_free(msg);
    1f5e:	4628      	mov	r0, r5
    1f60:	f7ff ffda 	bl	1f18 <z_log_msg_free>
	return dropped_cnt > 0;
    1f64:	4b1e      	ldr	r3, [pc, #120]	; (1fe0 <z_impl_log_process+0xac>)
    1f66:	4c1f      	ldr	r4, [pc, #124]	; (1fe4 <z_impl_log_process+0xb0>)
		if ((dropped_pend || unordered_pend) &&
    1f68:	681b      	ldr	r3, [r3, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	dd19      	ble.n	1fa2 <z_impl_log_process+0x6e>
	return z_impl_k_uptime_ticks();
    1f6e:	f005 fce0 	bl	7932 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1f72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f76:	fba0 0302 	umull	r0, r3, r0, r2
    1f7a:	fb02 3101 	mla	r1, r2, r1, r3
    1f7e:	0bc3      	lsrs	r3, r0, #15
    1f80:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1f84:	e9d4 2000 	ldrd	r2, r0, [r4]
    1f88:	1a9b      	subs	r3, r3, r2
		if ((dropped_pend || unordered_pend) &&
    1f8a:	f240 32e9 	movw	r2, #1001	; 0x3e9
    1f8e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1f92:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    1f96:	4293      	cmp	r3, r2
    1f98:	f171 0100 	sbcs.w	r1, r1, #0
    1f9c:	d301      	bcc.n	1fa2 <z_impl_log_process+0x6e>
				dropped_notify();
    1f9e:	f7ff ff6f 	bl	1e80 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    1fa2:	e9d4 3200 	ldrd	r3, r2, [r4]
    1fa6:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    1faa:	f142 0200 	adc.w	r2, r2, #0
    1fae:	e9c4 3200 	strd	r3, r2, [r4]
}
    1fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    1fb6:	f7ff bfb7 	b.w	1f28 <z_log_msg_pending>
	return backend->cb->active;
    1fba:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1fbc:	795b      	ldrb	r3, [r3, #5]
    1fbe:	b123      	cbz	r3, 1fca <z_impl_log_process+0x96>
	backend->api->process(backend, msg);
    1fc0:	6823      	ldr	r3, [r4, #0]
    1fc2:	4629      	mov	r1, r5
    1fc4:	4620      	mov	r0, r4
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1fca:	3410      	adds	r4, #16
    1fcc:	e7c5      	b.n	1f5a <z_impl_log_process+0x26>
}
    1fce:	bd70      	pop	{r4, r5, r6, pc}
    1fd0:	20001034 	.word	0x20001034
    1fd4:	20000820 	.word	0x20000820
    1fd8:	00007d04 	.word	0x00007d04
    1fdc:	00007d14 	.word	0x00007d14
    1fe0:	2000081c 	.word	0x2000081c
    1fe4:	200006a0 	.word	0x200006a0

00001fe8 <z_impl_log_panic>:
{
    1fe8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1fea:	4d0d      	ldr	r5, [pc, #52]	; (2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>)
    1fec:	7829      	ldrb	r1, [r5, #0]
    1fee:	b961      	cbnz	r1, 200a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa>
	(void)z_log_init(true, false);
    1ff0:	2001      	movs	r0, #1
    1ff2:	f7ff feb9 	bl	1d68 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ff6:	4c0b      	ldr	r4, [pc, #44]	; (2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>)
    1ff8:	4e0b      	ldr	r6, [pc, #44]	; (2028 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x28>)
    1ffa:	42b4      	cmp	r4, r6
    1ffc:	d306      	bcc.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1ffe:	f7ff ff99 	bl	1f34 <z_impl_log_process>
		while (log_process() == true) {
    2002:	2800      	cmp	r0, #0
    2004:	d1fb      	bne.n	1ffe <z_impl_log_panic+0x16>
	panic_mode = true;
    2006:	2301      	movs	r3, #1
    2008:	702b      	strb	r3, [r5, #0]
}
    200a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    200c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    200e:	795b      	ldrb	r3, [r3, #5]
    2010:	b11b      	cbz	r3, 201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
	backend->api->panic(backend);
    2012:	6823      	ldr	r3, [r4, #0]
    2014:	4620      	mov	r0, r4
    2016:	689b      	ldr	r3, [r3, #8]
    2018:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    201a:	3410      	adds	r4, #16
    201c:	e7ed      	b.n	1ffa <z_impl_log_panic+0x12>
    201e:	bf00      	nop
    2020:	20001035 	.word	0x20001035
    2024:	00007d04 	.word	0x00007d04
    2028:	00007d14 	.word	0x00007d14

0000202c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    202c:	2100      	movs	r1, #0
{
    202e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    2032:	4608      	mov	r0, r1
    2034:	f7ff fe98 	bl	1d68 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2038:	4604      	mov	r4, r0
    203a:	b348      	cbz	r0, 2090 <log_process_thread_func+0x64>
    203c:	f240 6867 	movw	r8, #1639	; 0x667
    2040:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    2044:	f003 feb6 	bl	5db4 <z_impl_z_current_get>
	proc_tid = process_tid;
    2048:	4b1a      	ldr	r3, [pc, #104]	; (20b4 <log_process_thread_func+0x88>)
    204a:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    204c:	b130      	cbz	r0, 205c <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    204e:	4b1a      	ldr	r3, [pc, #104]	; (20b8 <log_process_thread_func+0x8c>)
	    process_tid &&
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	2b09      	cmp	r3, #9
    2054:	dd02      	ble.n	205c <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    2056:	4819      	ldr	r0, [pc, #100]	; (20bc <log_process_thread_func+0x90>)
    2058:	f003 fb82 	bl	5760 <z_impl_k_sem_give>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    205c:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    205e:	4f18      	ldr	r7, [pc, #96]	; (20c0 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    2060:	f8df a058 	ldr.w	sl, [pc, #88]	; 20bc <log_process_thread_func+0x90>
		if (activate_mask) {
    2064:	b144      	cbz	r4, 2078 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    2066:	4620      	mov	r0, r4
    2068:	f7ff fe18 	bl	1c9c <activate_foreach_backend>
			if (!activate_mask) {
    206c:	4604      	mov	r4, r0
    206e:	b918      	cbnz	r0, 2078 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    2070:	f04f 38ff 	mov.w	r8, #4294967295
    2074:	f04f 39ff 	mov.w	r9, #4294967295
    2078:	f7ff ff5c 	bl	1f34 <z_impl_log_process>
		if (log_process() == false) {
    207c:	4606      	mov	r6, r0
    207e:	b928      	cbnz	r0, 208c <log_process_thread_func+0x60>
			if (processed_any) {
    2080:	b9b5      	cbnz	r5, 20b0 <log_process_thread_func+0x84>
    2082:	4642      	mov	r2, r8
    2084:	464b      	mov	r3, r9
    2086:	4650      	mov	r0, sl
    2088:	f003 fb8a 	bl	57a0 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    208c:	4635      	mov	r5, r6
    208e:	e7e9      	b.n	2064 <log_process_thread_func+0x38>
    2090:	f04f 38ff 	mov.w	r8, #4294967295
    2094:	f04f 39ff 	mov.w	r9, #4294967295
    2098:	e7d4      	b.n	2044 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    209a:	682b      	ldr	r3, [r5, #0]
    209c:	699b      	ldr	r3, [r3, #24]
    209e:	b11b      	cbz	r3, 20a8 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    20a0:	2200      	movs	r2, #0
    20a2:	4628      	mov	r0, r5
    20a4:	4611      	mov	r1, r2
    20a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    20a8:	3510      	adds	r5, #16
    20aa:	42bd      	cmp	r5, r7
    20ac:	d3f5      	bcc.n	209a <log_process_thread_func+0x6e>
    20ae:	e7e8      	b.n	2082 <log_process_thread_func+0x56>
    20b0:	4d04      	ldr	r5, [pc, #16]	; (20c4 <log_process_thread_func+0x98>)
    20b2:	e7fa      	b.n	20aa <log_process_thread_func+0x7e>
    20b4:	20000818 	.word	0x20000818
    20b8:	20000820 	.word	0x20000820
    20bc:	2000020c 	.word	0x2000020c
    20c0:	00007d14 	.word	0x00007d14
    20c4:	00007d04 	.word	0x00007d04

000020c8 <z_log_msg_post_finalize>:
{
    20c8:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    20ca:	4818      	ldr	r0, [pc, #96]	; (212c <z_log_msg_post_finalize+0x64>)
    20cc:	f004 febe 	bl	6e4c <atomic_inc>
	if (panic_mode) {
    20d0:	4b17      	ldr	r3, [pc, #92]	; (2130 <z_log_msg_post_finalize+0x68>)
    20d2:	781b      	ldrb	r3, [r3, #0]
    20d4:	b17b      	cbz	r3, 20f6 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    20d6:	f04f 0320 	mov.w	r3, #32
    20da:	f3ef 8411 	mrs	r4, BASEPRI
    20de:	f383 8812 	msr	BASEPRI_MAX, r3
    20e2:	f3bf 8f6f 	isb	sy
    20e6:	f7ff ff25 	bl	1f34 <z_impl_log_process>
	__asm__ volatile(
    20ea:	f384 8811 	msr	BASEPRI, r4
    20ee:	f3bf 8f6f 	isb	sy
}
    20f2:	b002      	add	sp, #8
    20f4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    20f6:	4b0f      	ldr	r3, [pc, #60]	; (2134 <z_log_msg_post_finalize+0x6c>)
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	d0f9      	beq.n	20f2 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    20fe:	b950      	cbnz	r0, 2116 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2100:	2200      	movs	r2, #0
    2102:	2300      	movs	r3, #0
    2104:	480c      	ldr	r0, [pc, #48]	; (2138 <z_log_msg_post_finalize+0x70>)
    2106:	e9cd 2300 	strd	r2, r3, [sp]
    210a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    210e:	2300      	movs	r3, #0
    2110:	f004 f87c 	bl	620c <z_impl_k_timer_start>
    2114:	e7ed      	b.n	20f2 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2116:	280a      	cmp	r0, #10
    2118:	d1eb      	bne.n	20f2 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    211a:	4807      	ldr	r0, [pc, #28]	; (2138 <z_log_msg_post_finalize+0x70>)
    211c:	f005 fc1b 	bl	7956 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2120:	4806      	ldr	r0, [pc, #24]	; (213c <z_log_msg_post_finalize+0x74>)
}
    2122:	b002      	add	sp, #8
    2124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2128:	f003 bb1a 	b.w	5760 <z_impl_k_sem_give>
    212c:	20000820 	.word	0x20000820
    2130:	20001035 	.word	0x20001035
    2134:	20000818 	.word	0x20000818
    2138:	200006a8 	.word	0x200006a8
    213c:	2000020c 	.word	0x2000020c

00002140 <z_log_msg_commit>:
{
    2140:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2142:	4b06      	ldr	r3, [pc, #24]	; (215c <z_log_msg_commit+0x1c>)
{
    2144:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2146:	681b      	ldr	r3, [r3, #0]
    2148:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    214a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    214c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    214e:	4804      	ldr	r0, [pc, #16]	; (2160 <z_log_msg_commit+0x20>)
    2150:	f004 fdb2 	bl	6cb8 <mpsc_pbuf_commit>
}
    2154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    2158:	f7ff bfb6 	b.w	20c8 <z_log_msg_post_finalize>
    215c:	20000004 	.word	0x20000004
    2160:	20000180 	.word	0x20000180

00002164 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2164:	4a04      	ldr	r2, [pc, #16]	; (2178 <log_source_name_get+0x14>)
    2166:	4b05      	ldr	r3, [pc, #20]	; (217c <log_source_name_get+0x18>)
    2168:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    216a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    216e:	bf34      	ite	cc
    2170:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    2174:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    2176:	4770      	bx	lr
    2178:	00007c9c 	.word	0x00007c9c
    217c:	00007d04 	.word	0x00007d04

00002180 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2180:	4b08      	ldr	r3, [pc, #32]	; (21a4 <log_backend_enable+0x24>)
{
    2182:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    2184:	1ac3      	subs	r3, r0, r3
	backend->cb->id = id;
    2186:	6844      	ldr	r4, [r0, #4]
    2188:	111b      	asrs	r3, r3, #4
    218a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    218c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    218e:	6843      	ldr	r3, [r0, #4]
    2190:	719a      	strb	r2, [r3, #6]
	backend->cb->active = true;
    2192:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
    2194:	6843      	ldr	r3, [r0, #4]
    2196:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2198:	6843      	ldr	r3, [r0, #4]
    219a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    219c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    219e:	f7ff be41 	b.w	1e24 <z_log_notify_backend_enabled>
    21a2:	bf00      	nop
    21a4:	00007d04 	.word	0x00007d04

000021a8 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    21a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    21ac:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    21b0:	b08f      	sub	sp, #60	; 0x3c
    21b2:	f3c1 2649 	ubfx	r6, r1, #9, #10
    21b6:	460d      	mov	r5, r1
    21b8:	4690      	mov	r8, r2
    21ba:	4699      	mov	r9, r3
    21bc:	9005      	str	r0, [sp, #20]
    21be:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    21c0:	2e00      	cmp	r6, #0
    21c2:	d03c      	beq.n	223e <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
    21c4:	f04f 0b04 	mov.w	fp, #4
    21c8:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
    21cc:	2200      	movs	r2, #0
	return cbprintf_package_convert(in_packaged, in_len,
    21ce:	af09      	add	r7, sp, #36	; 0x24
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    21d0:	4631      	mov	r1, r6
    21d2:	ab0b      	add	r3, sp, #44	; 0x2c
    21d4:	4640      	mov	r0, r8
    21d6:	f8cd b008 	str.w	fp, [sp, #8]
    21da:	9701      	str	r7, [sp, #4]
    21dc:	f8cd a000 	str.w	sl, [sp]
	struct z_cbprintf_buf_desc buf_desc = {
    21e0:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
    21e4:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    21e6:	9607      	str	r6, [sp, #28]
    21e8:	f7fe fe48 	bl	e7c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    21ec:	f3c0 0309 	ubfx	r3, r0, #0, #10
    21f0:	1918      	adds	r0, r3, r4
    21f2:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    21f6:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    21f8:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    21fa:	f363 2552 	bfi	r5, r3, #9, #10
    21fe:	9306      	str	r3, [sp, #24]
    2200:	f7ff fe7c 	bl	1efc <z_log_msg_alloc>
		if (msg) {
    2204:	4604      	mov	r4, r0
    2206:	b178      	cbz	r0, 2228 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
    2208:	2200      	movs	r2, #0
    220a:	9b06      	ldr	r3, [sp, #24]
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
    220c:	3010      	adds	r0, #16
    220e:	900b      	str	r0, [sp, #44]	; 0x2c
    2210:	930c      	str	r3, [sp, #48]	; 0x30
    2212:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
    2214:	4640      	mov	r0, r8
    2216:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    221a:	4a0c      	ldr	r2, [pc, #48]	; (224c <z_impl_z_log_msg_static_create+0xa4>)
    221c:	9907      	ldr	r1, [sp, #28]
    221e:	f8cd a000 	str.w	sl, [sp]
    2222:	ab0b      	add	r3, sp, #44	; 0x2c
    2224:	f7fe fe2a 	bl	e7c <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    2228:	f366 2552 	bfi	r5, r6, #9, #10
    222c:	464b      	mov	r3, r9
    222e:	462a      	mov	r2, r5
    2230:	4620      	mov	r0, r4
    2232:	9905      	ldr	r1, [sp, #20]
}
    2234:	b00f      	add	sp, #60	; 0x3c
    2236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
    223a:	f004 be2b 	b.w	6e94 <z_log_msg_finalize>
    223e:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2242:	0880      	lsrs	r0, r0, #2
    2244:	f7ff fe5a 	bl	1efc <z_log_msg_alloc>
    2248:	4604      	mov	r4, r0
    224a:	e7ed      	b.n	2228 <z_impl_z_log_msg_static_create+0x80>
    224c:	00006e69 	.word	0x00006e69

00002250 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2250:	b40e      	push	{r1, r2, r3}
    2252:	b503      	push	{r0, r1, lr}
    2254:	ab03      	add	r3, sp, #12
    2256:	f853 2b04 	ldr.w	r2, [r3], #4
    225a:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    225c:	4804      	ldr	r0, [pc, #16]	; (2270 <print_formatted+0x20>)
	va_start(args, fmt);
    225e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2260:	f004 fe3f 	bl	6ee2 <cbvprintf>
	va_end(args);

	return length;
}
    2264:	b002      	add	sp, #8
    2266:	f85d eb04 	ldr.w	lr, [sp], #4
    226a:	b003      	add	sp, #12
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	00006f0b 	.word	0x00006f0b

00002274 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2274:	06ca      	lsls	r2, r1, #27
    2276:	d405      	bmi.n	2284 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2278:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    227a:	bf4c      	ite	mi
    227c:	4902      	ldrmi	r1, [pc, #8]	; (2288 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    227e:	4903      	ldrpl	r1, [pc, #12]	; (228c <newline_print+0x18>)
    2280:	f7ff bfe6 	b.w	2250 <print_formatted>
	}
}
    2284:	4770      	bx	lr
    2286:	bf00      	nop
    2288:	0000817e 	.word	0x0000817e
    228c:	0000817d 	.word	0x0000817d

00002290 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    2290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2294:	b089      	sub	sp, #36	; 0x24
    2296:	469b      	mov	fp, r3
    2298:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    229c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    22a0:	4604      	mov	r4, r0
    22a2:	9304      	str	r3, [sp, #16]
    22a4:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    22a8:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    22aa:	9b04      	ldr	r3, [sp, #16]
{
    22ac:	460d      	mov	r5, r1
    22ae:	9206      	str	r2, [sp, #24]
	if (!raw_string) {
    22b0:	2b00      	cmp	r3, #0
    22b2:	f000 8087 	beq.w	23c4 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    22b6:	f006 0308 	and.w	r3, r6, #8
    22ba:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    22bc:	f004 fdd2 	bl	6e64 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    22c0:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    22c4:	4602      	mov	r2, r0
    22c6:	2800      	cmp	r0, #0
    22c8:	d04b      	beq.n	2362 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    22ca:	4620      	mov	r0, r4
    22cc:	4985      	ldr	r1, [pc, #532]	; (24e4 <log_output_process+0x254>)
    22ce:	f7ff ffbf 	bl	2250 <print_formatted>
    22d2:	4680      	mov	r8, r0
	if (stamp) {
    22d4:	f1ba 0f00 	cmp.w	sl, #0
    22d8:	d008      	beq.n	22ec <log_output_process+0x5c>
	if (!format) {
    22da:	f016 0f44 	tst.w	r6, #68	; 0x44
    22de:	d142      	bne.n	2366 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    22e0:	462a      	mov	r2, r5
    22e2:	4620      	mov	r0, r4
    22e4:	4980      	ldr	r1, [pc, #512]	; (24e8 <log_output_process+0x258>)
    22e6:	f7ff ffb3 	bl	2250 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    22ea:	4480      	add	r8, r0
	if (color) {
    22ec:	f006 0301 	and.w	r3, r6, #1
    22f0:	b15b      	cbz	r3, 230a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    22f2:	4b7e      	ldr	r3, [pc, #504]	; (24ec <log_output_process+0x25c>)
    22f4:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    22f6:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
    22f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    22fc:	4b7c      	ldr	r3, [pc, #496]	; (24f0 <log_output_process+0x260>)
    22fe:	497d      	ldr	r1, [pc, #500]	; (24f4 <log_output_process+0x264>)
    2300:	2a00      	cmp	r2, #0
    2302:	bf08      	it	eq
    2304:	461a      	moveq	r2, r3
    2306:	f7ff ffa3 	bl	2250 <print_formatted>
	if (level_on) {
    230a:	f006 0308 	and.w	r3, r6, #8
    230e:	2b00      	cmp	r3, #0
    2310:	d055      	beq.n	23be <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    2312:	4b79      	ldr	r3, [pc, #484]	; (24f8 <log_output_process+0x268>)
    2314:	9a04      	ldr	r2, [sp, #16]
    2316:	4620      	mov	r0, r4
    2318:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    231c:	4977      	ldr	r1, [pc, #476]	; (24fc <log_output_process+0x26c>)
    231e:	f7ff ff97 	bl	2250 <print_formatted>
    2322:	4605      	mov	r5, r0
	if (domain) {
    2324:	9b06      	ldr	r3, [sp, #24]
    2326:	b12b      	cbz	r3, 2334 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2328:	461a      	mov	r2, r3
    232a:	4620      	mov	r0, r4
    232c:	4974      	ldr	r1, [pc, #464]	; (2500 <log_output_process+0x270>)
    232e:	f7ff ff8f 	bl	2250 <print_formatted>
    2332:	4405      	add	r5, r0
	if (source) {
    2334:	f1bb 0f00 	cmp.w	fp, #0
    2338:	d005      	beq.n	2346 <log_output_process+0xb6>
		total += print_formatted(output,
    233a:	465a      	mov	r2, fp
    233c:	4620      	mov	r0, r4
    233e:	4971      	ldr	r1, [pc, #452]	; (2504 <log_output_process+0x274>)
    2340:	f7ff ff86 	bl	2250 <print_formatted>
    2344:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2346:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2348:	f1b9 0f00 	cmp.w	r9, #0
    234c:	d149      	bne.n	23e2 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    234e:	2f00      	cmp	r7, #0
    2350:	d14f      	bne.n	23f2 <log_output_process+0x162>
	if (color) {
    2352:	07f3      	lsls	r3, r6, #31
    2354:	f100 80c0 	bmi.w	24d8 <log_output_process+0x248>
	newline_print(output, flags);
    2358:	4631      	mov	r1, r6
    235a:	4620      	mov	r0, r4
    235c:	f7ff ff8a 	bl	2274 <newline_print>
}
    2360:	e0b4      	b.n	24cc <log_output_process+0x23c>
	uint32_t length = 0U;
    2362:	4680      	mov	r8, r0
    2364:	e7b6      	b.n	22d4 <log_output_process+0x44>
	} else if (freq != 0U) {
    2366:	4b68      	ldr	r3, [pc, #416]	; (2508 <log_output_process+0x278>)
    2368:	6818      	ldr	r0, [r3, #0]
    236a:	2800      	cmp	r0, #0
    236c:	d0bd      	beq.n	22ea <log_output_process+0x5a>
		timestamp /= timestamp_div;
    236e:	4b67      	ldr	r3, [pc, #412]	; (250c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    2370:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2374:	681b      	ldr	r3, [r3, #0]
    2376:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    237a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    237e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    2382:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    2386:	fb0e f505 	mul.w	r5, lr, r5
    238a:	fbb3 faf2 	udiv	sl, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    238e:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    2392:	213c      	movs	r1, #60	; 0x3c
    2394:	fb02 321a 	mls	r2, r2, sl, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2398:	fb00 551c 	mls	r5, r0, ip, r5
		mins = seconds / 60U;
    239c:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    23a0:	fb0e f505 	mul.w	r5, lr, r5
    23a4:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    23a8:	fb01 2213 	mls	r2, r1, r3, r2
    23ac:	4620      	mov	r0, r4
    23ae:	9200      	str	r2, [sp, #0]
    23b0:	e9cd c501 	strd	ip, r5, [sp, #4]
    23b4:	4652      	mov	r2, sl
    23b6:	4956      	ldr	r1, [pc, #344]	; (2510 <log_output_process+0x280>)
    23b8:	f7ff ff4a 	bl	2250 <print_formatted>
    23bc:	e795      	b.n	22ea <log_output_process+0x5a>
	int total = 0;
    23be:	f006 0508 	and.w	r5, r6, #8
    23c2:	e7af      	b.n	2324 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    23c4:	f1bb 0f01 	cmp.w	fp, #1
    23c8:	d106      	bne.n	23d8 <log_output_process+0x148>
	if (package) {
    23ca:	f1b9 0f00 	cmp.w	r9, #0
    23ce:	d164      	bne.n	249a <log_output_process+0x20a>
	if (data_len) {
    23d0:	2f00      	cmp	r7, #0
    23d2:	d07b      	beq.n	24cc <log_output_process+0x23c>
		prefix_offset = 0;
    23d4:	2500      	movs	r5, #0
    23d6:	e00c      	b.n	23f2 <log_output_process+0x162>
	if (package) {
    23d8:	f1b9 0f00 	cmp.w	r9, #0
    23dc:	d0f8      	beq.n	23d0 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    23de:	484d      	ldr	r0, [pc, #308]	; (2514 <log_output_process+0x284>)
    23e0:	e05c      	b.n	249c <log_output_process+0x20c>
		cb = out_func;
    23e2:	484d      	ldr	r0, [pc, #308]	; (2518 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    23e4:	464b      	mov	r3, r9
    23e6:	4622      	mov	r2, r4
    23e8:	494c      	ldr	r1, [pc, #304]	; (251c <log_output_process+0x28c>)
    23ea:	f004 f954 	bl	6696 <cbpprintf_external>
	if (data_len) {
    23ee:	2f00      	cmp	r7, #0
    23f0:	d068      	beq.n	24c4 <log_output_process+0x234>
		print_formatted(output, " ");
    23f2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2520 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    23f6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2524 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    23fa:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    23fc:	4631      	mov	r1, r6
    23fe:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2400:	46b8      	mov	r8, r7
	for (int i = 0; i < prefix_offset; i++) {
    2402:	f04f 0b00 	mov.w	fp, #0
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2406:	bf28      	it	cs
    2408:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    240c:	f7ff ff32 	bl	2274 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2410:	455d      	cmp	r5, fp
    2412:	dc45      	bgt.n	24a0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2414:	9b05      	ldr	r3, [sp, #20]
    2416:	4651      	mov	r1, sl
    2418:	4620      	mov	r0, r4
    241a:	781a      	ldrb	r2, [r3, #0]
    241c:	f7ff ff18 	bl	2250 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2420:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2424:	f01b 0f07 	tst.w	fp, #7
    2428:	d103      	bne.n	2432 <log_output_process+0x1a2>
			print_formatted(output, " ");
    242a:	4649      	mov	r1, r9
    242c:	4620      	mov	r0, r4
    242e:	f7ff ff0f 	bl	2250 <print_formatted>
		if (i < length) {
    2432:	45d8      	cmp	r8, fp
    2434:	d93b      	bls.n	24ae <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2436:	9b05      	ldr	r3, [sp, #20]
    2438:	4651      	mov	r1, sl
    243a:	4620      	mov	r0, r4
    243c:	f813 200b 	ldrb.w	r2, [r3, fp]
    2440:	f7ff ff06 	bl	2250 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2444:	f10b 0b01 	add.w	fp, fp, #1
    2448:	f1bb 0f10 	cmp.w	fp, #16
    244c:	d1ea      	bne.n	2424 <log_output_process+0x194>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    244e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    2452:	4620      	mov	r0, r4
    2454:	4934      	ldr	r1, [pc, #208]	; (2528 <log_output_process+0x298>)
    2456:	f7ff fefb 	bl	2250 <print_formatted>
		if (i < length) {
    245a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    245c:	9b05      	ldr	r3, [sp, #20]
			print_formatted(output, "%c",
    245e:	4620      	mov	r0, r4
			unsigned char c = (unsigned char)data[i];
    2460:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    2462:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    2466:	295f      	cmp	r1, #95	; 0x5f
    2468:	bf28      	it	cs
    246a:	222e      	movcs	r2, #46	; 0x2e
    246c:	492f      	ldr	r1, [pc, #188]	; (252c <log_output_process+0x29c>)
    246e:	f7ff feef 	bl	2250 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2472:	f10b 0b01 	add.w	fp, fp, #1
    2476:	f1bb 0f10 	cmp.w	fp, #16
    247a:	d01d      	beq.n	24b8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    247c:	f01b 0f07 	tst.w	fp, #7
    2480:	d103      	bne.n	248a <log_output_process+0x1fa>
			print_formatted(output, " ");
    2482:	4649      	mov	r1, r9
    2484:	4620      	mov	r0, r4
    2486:	f7ff fee3 	bl	2250 <print_formatted>
		if (i < length) {
    248a:	45d8      	cmp	r8, fp
    248c:	465a      	mov	r2, fp
    248e:	d8e5      	bhi.n	245c <log_output_process+0x1cc>
			print_formatted(output, " ");
    2490:	4649      	mov	r1, r9
    2492:	4620      	mov	r0, r4
    2494:	f7ff fedc 	bl	2250 <print_formatted>
    2498:	e7eb      	b.n	2472 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    249a:	481f      	ldr	r0, [pc, #124]	; (2518 <log_output_process+0x288>)
		prefix_offset = 0;
    249c:	9d04      	ldr	r5, [sp, #16]
    249e:	e7a1      	b.n	23e4 <log_output_process+0x154>
		print_formatted(output, " ");
    24a0:	4649      	mov	r1, r9
    24a2:	4620      	mov	r0, r4
    24a4:	f7ff fed4 	bl	2250 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    24a8:	f10b 0b01 	add.w	fp, fp, #1
    24ac:	e7b0      	b.n	2410 <log_output_process+0x180>
			print_formatted(output, "   ");
    24ae:	4620      	mov	r0, r4
    24b0:	491f      	ldr	r1, [pc, #124]	; (2530 <log_output_process+0x2a0>)
    24b2:	f7ff fecd 	bl	2250 <print_formatted>
    24b6:	e7c5      	b.n	2444 <log_output_process+0x1b4>
		data += length;
    24b8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    24ba:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    24be:	4443      	add	r3, r8
    24c0:	9305      	str	r3, [sp, #20]
	} while (len);
    24c2:	d19a      	bne.n	23fa <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    24c4:	9b04      	ldr	r3, [sp, #16]
    24c6:	2b00      	cmp	r3, #0
    24c8:	f47f af43 	bne.w	2352 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    24cc:	4620      	mov	r0, r4
}
    24ce:	b009      	add	sp, #36	; 0x24
    24d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    24d4:	f004 bd0c 	b.w	6ef0 <log_output_flush>
		print_formatted(output, "%s", log_color);
    24d8:	4620      	mov	r0, r4
    24da:	4a05      	ldr	r2, [pc, #20]	; (24f0 <log_output_process+0x260>)
    24dc:	4905      	ldr	r1, [pc, #20]	; (24f4 <log_output_process+0x264>)
    24de:	f7ff feb7 	bl	2250 <print_formatted>
}
    24e2:	e739      	b.n	2358 <log_output_process+0xc8>
    24e4:	00008185 	.word	0x00008185
    24e8:	00008189 	.word	0x00008189
    24ec:	00007d4c 	.word	0x00007d4c
    24f0:	00008180 	.word	0x00008180
    24f4:	00008020 	.word	0x00008020
    24f8:	00007d60 	.word	0x00007d60
    24fc:	000081ae 	.word	0x000081ae
    2500:	000081b4 	.word	0x000081b4
    2504:	000081b8 	.word	0x000081b8
    2508:	2000082c 	.word	0x2000082c
    250c:	20000828 	.word	0x20000828
    2510:	00008192 	.word	0x00008192
    2514:	00006f39 	.word	0x00006f39
    2518:	00006f0b 	.word	0x00006f0b
    251c:	00006ee3 	.word	0x00006ee3
    2520:	000081c5 	.word	0x000081c5
    2524:	000081bd 	.word	0x000081bd
    2528:	000081c7 	.word	0x000081c7
    252c:	000081c9 	.word	0x000081c9
    2530:	000081c3 	.word	0x000081c3

00002534 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2538:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    253a:	684b      	ldr	r3, [r1, #4]
    253c:	4605      	mov	r5, r0
    253e:	460c      	mov	r4, r1
    2540:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2542:	688e      	ldr	r6, [r1, #8]
    2544:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
    2546:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    254a:	b15b      	cbz	r3, 2564 <log_output_msg_process+0x30>
    254c:	4a13      	ldr	r2, [pc, #76]	; (259c <log_output_msg_process+0x68>)
    254e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2550:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2554:	2900      	cmp	r1, #0
    2556:	db1f      	blt.n	2598 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2558:	7820      	ldrb	r0, [r4, #0]
    255a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    255e:	f7ff fe01 	bl	2164 <log_source_name_get>
    2562:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2564:	4621      	mov	r1, r4
    2566:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
    256a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    256c:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2570:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2572:	eb01 0402 	add.w	r4, r1, r2
    2576:	bf08      	it	eq
    2578:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
    257a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    257e:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2582:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2586:	2200      	movs	r2, #0
    2588:	4631      	mov	r1, r6
    258a:	4628      	mov	r0, r5
    258c:	9700      	str	r7, [sp, #0]
    258e:	f7ff fe7f 	bl	2290 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2592:	b006      	add	sp, #24
    2594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2598:	2300      	movs	r3, #0
    259a:	e7e3      	b.n	2564 <log_output_msg_process+0x30>
    259c:	00007c9c 	.word	0x00007c9c

000025a0 <log_output_dropped_process>:
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    25a0:	f242 730f 	movw	r3, #9999	; 0x270f
{
    25a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    25a6:	428b      	cmp	r3, r1
    25a8:	bf28      	it	cs
    25aa:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    25ac:	6805      	ldr	r5, [r0, #0]
{
    25ae:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    25b0:	2105      	movs	r1, #5
    25b2:	4668      	mov	r0, sp
    25b4:	4a0d      	ldr	r2, [pc, #52]	; (25ec <log_output_dropped_process+0x4c>)
    25b6:	f004 f8e6 	bl	6786 <snprintk>
    25ba:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    25bc:	6863      	ldr	r3, [r4, #4]
    25be:	4628      	mov	r0, r5
    25c0:	220b      	movs	r2, #11
    25c2:	685b      	ldr	r3, [r3, #4]
    25c4:	490a      	ldr	r1, [pc, #40]	; (25f0 <log_output_dropped_process+0x50>)
    25c6:	f004 fc7f 	bl	6ec8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    25ca:	6863      	ldr	r3, [r4, #4]
    25cc:	4632      	mov	r2, r6
    25ce:	4669      	mov	r1, sp
    25d0:	4628      	mov	r0, r5
    25d2:	685b      	ldr	r3, [r3, #4]
    25d4:	f004 fc78 	bl	6ec8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    25d8:	6863      	ldr	r3, [r4, #4]
    25da:	221b      	movs	r2, #27
    25dc:	4628      	mov	r0, r5
    25de:	685b      	ldr	r3, [r3, #4]
    25e0:	4904      	ldr	r1, [pc, #16]	; (25f4 <log_output_dropped_process+0x54>)
    25e2:	f004 fc71 	bl	6ec8 <buffer_write>
		     output->control_block->ctx);
}
    25e6:	b002      	add	sp, #8
    25e8:	bd70      	pop	{r4, r5, r6, pc}
    25ea:	bf00      	nop
    25ec:	00007ff1 	.word	0x00007ff1
    25f0:	000081e8 	.word	0x000081e8
    25f4:	000081cc 	.word	0x000081cc

000025f8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    25f8:	2100      	movs	r1, #0
    25fa:	2301      	movs	r3, #1
    25fc:	4a06      	ldr	r2, [pc, #24]	; (2618 <log_output_timestamp_freq_set+0x20>)
    25fe:	4290      	cmp	r0, r2
    2600:	d806      	bhi.n	2610 <log_output_timestamp_freq_set+0x18>
    2602:	4a06      	ldr	r2, [pc, #24]	; (261c <log_output_timestamp_freq_set+0x24>)
    2604:	b901      	cbnz	r1, 2608 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2606:	2301      	movs	r3, #1
    2608:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    260a:	4b05      	ldr	r3, [pc, #20]	; (2620 <log_output_timestamp_freq_set+0x28>)
    260c:	6018      	str	r0, [r3, #0]
}
    260e:	4770      	bx	lr
		timestamp_div *= 2U;
    2610:	2101      	movs	r1, #1
		frequency /= 2U;
    2612:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2614:	005b      	lsls	r3, r3, #1
    2616:	e7f2      	b.n	25fe <log_output_timestamp_freq_set+0x6>
    2618:	000f4240 	.word	0x000f4240
    261c:	20000828 	.word	0x20000828
    2620:	2000082c 	.word	0x2000082c

00002624 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2624:	4b01      	ldr	r3, [pc, #4]	; (262c <format_set+0x8>)
	return 0;
}
    2626:	2000      	movs	r0, #0
	log_format_current = log_type;
    2628:	6019      	str	r1, [r3, #0]
}
    262a:	4770      	bx	lr
    262c:	20000844 	.word	0x20000844

00002630 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    2630:	2201      	movs	r2, #1
    2632:	4b02      	ldr	r3, [pc, #8]	; (263c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2634:	4802      	ldr	r0, [pc, #8]	; (2640 <panic+0x10>)
    2636:	701a      	strb	r2, [r3, #0]
    2638:	f004 bc5a 	b.w	6ef0 <log_output_flush>
    263c:	20001037 	.word	0x20001037
    2640:	00007d90 	.word	0x00007d90

00002644 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2644:	4801      	ldr	r0, [pc, #4]	; (264c <dropped+0x8>)
    2646:	f7ff bfab 	b.w	25a0 <log_output_dropped_process>
    264a:	bf00      	nop
    264c:	00007d90 	.word	0x00007d90

00002650 <process>:
{
    2650:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2652:	4b06      	ldr	r3, [pc, #24]	; (266c <process+0x1c>)
{
    2654:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2656:	6818      	ldr	r0, [r3, #0]
    2658:	f7ff fbce 	bl	1df8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    265c:	4621      	mov	r1, r4
}
    265e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2662:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    2664:	220f      	movs	r2, #15
    2666:	4802      	ldr	r0, [pc, #8]	; (2670 <process+0x20>)
    2668:	4718      	bx	r3
    266a:	bf00      	nop
    266c:	20000844 	.word	0x20000844
    2670:	00007d90 	.word	0x00007d90

00002674 <char_out>:
{
    2674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2676:	460d      	mov	r5, r1
    2678:	4604      	mov	r4, r0
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    267a:	4f06      	ldr	r7, [pc, #24]	; (2694 <char_out+0x20>)
    267c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    267e:	42b4      	cmp	r4, r6
    2680:	d101      	bne.n	2686 <char_out+0x12>
}
    2682:	4628      	mov	r0, r5
    2684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2686:	f814 1b01 	ldrb.w	r1, [r4], #1
    268a:	68bb      	ldr	r3, [r7, #8]
    268c:	4801      	ldr	r0, [pc, #4]	; (2694 <char_out+0x20>)
    268e:	685b      	ldr	r3, [r3, #4]
    2690:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2692:	e7f4      	b.n	267e <char_out+0xa>
    2694:	00007a40 	.word	0x00007a40

00002698 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    269c:	4605      	mov	r5, r0
	__asm__ volatile(
    269e:	f04f 0320 	mov.w	r3, #32
    26a2:	f3ef 8611 	mrs	r6, BASEPRI
    26a6:	f383 8812 	msr	BASEPRI_MAX, r3
    26aa:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    26ae:	f04f 090c 	mov.w	r9, #12
	return list->head;
    26b2:	4b0d      	ldr	r3, [pc, #52]	; (26e8 <pm_state_notify+0x50>)
    26b4:	4f0d      	ldr	r7, [pc, #52]	; (26ec <pm_state_notify+0x54>)
    26b6:	681c      	ldr	r4, [r3, #0]
    26b8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 26f0 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    26bc:	b92c      	cbnz	r4, 26ca <pm_state_notify+0x32>
	__asm__ volatile(
    26be:	f386 8811 	msr	BASEPRI, r6
    26c2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    26c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    26ca:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    26ce:	2d00      	cmp	r5, #0
    26d0:	bf18      	it	ne
    26d2:	4613      	movne	r3, r2
		if (callback) {
    26d4:	b12b      	cbz	r3, 26e2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    26d6:	f898 2014 	ldrb.w	r2, [r8, #20]
    26da:	fb09 f202 	mul.w	r2, r9, r2
    26de:	5cb8      	ldrb	r0, [r7, r2]
    26e0:	4798      	blx	r3
	return node->next;
    26e2:	6824      	ldr	r4, [r4, #0]
    26e4:	e7ea      	b.n	26bc <pm_state_notify+0x24>
    26e6:	bf00      	nop
    26e8:	20000860 	.word	0x20000860
    26ec:	20000854 	.word	0x20000854
    26f0:	20000e24 	.word	0x20000e24

000026f4 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    26f4:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    26f6:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    26f8:	4b16      	ldr	r3, [pc, #88]	; (2754 <pm_system_resume+0x60>)
    26fa:	7d1c      	ldrb	r4, [r3, #20]
    26fc:	f004 031f 	and.w	r3, r4, #31
    2700:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2702:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2704:	4b14      	ldr	r3, [pc, #80]	; (2758 <pm_system_resume+0x64>)
    2706:	0961      	lsrs	r1, r4, #5
    2708:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    270c:	e8d3 1fef 	ldaex	r1, [r3]
    2710:	ea01 0500 	and.w	r5, r1, r0
    2714:	e8c3 5fe6 	stlex	r6, r5, [r3]
    2718:	2e00      	cmp	r6, #0
    271a:	d1f7      	bne.n	270c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    271c:	420a      	tst	r2, r1
    271e:	d013      	beq.n	2748 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    2720:	4b0e      	ldr	r3, [pc, #56]	; (275c <pm_system_resume+0x68>)
    2722:	4d0f      	ldr	r5, [pc, #60]	; (2760 <pm_system_resume+0x6c>)
    2724:	b18b      	cbz	r3, 274a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2726:	230c      	movs	r3, #12
    2728:	4363      	muls	r3, r4
    272a:	18ea      	adds	r2, r5, r3
    272c:	7851      	ldrb	r1, [r2, #1]
    272e:	5ce8      	ldrb	r0, [r5, r3]
    2730:	f004 fb71 	bl	6e16 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2734:	2000      	movs	r0, #0
    2736:	f7ff ffaf 	bl	2698 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    273a:	230c      	movs	r3, #12
    273c:	435c      	muls	r4, r3
    273e:	2300      	movs	r3, #0
    2740:	192a      	adds	r2, r5, r4
    2742:	512b      	str	r3, [r5, r4]
    2744:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2748:	bd70      	pop	{r4, r5, r6, pc}
    274a:	f383 8811 	msr	BASEPRI, r3
    274e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2752:	e7ef      	b.n	2734 <pm_system_resume+0x40>
    2754:	20000e24 	.word	0x20000e24
    2758:	20000868 	.word	0x20000868
    275c:	00006e17 	.word	0x00006e17
    2760:	20000854 	.word	0x20000854

00002764 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2768:	4b32      	ldr	r3, [pc, #200]	; (2834 <pm_system_suspend+0xd0>)
{
    276a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    276c:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    276e:	f04f 0320 	mov.w	r3, #32
    2772:	f3ef 8811 	mrs	r8, BASEPRI
    2776:	f383 8812 	msr	BASEPRI_MAX, r3
    277a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    277e:	240c      	movs	r4, #12
    2780:	436c      	muls	r4, r5
    2782:	4b2d      	ldr	r3, [pc, #180]	; (2838 <pm_system_suspend+0xd4>)
    2784:	4e2d      	ldr	r6, [pc, #180]	; (283c <pm_system_suspend+0xd8>)
    2786:	5d19      	ldrb	r1, [r3, r4]
    2788:	191a      	adds	r2, r3, r4
    278a:	2900      	cmp	r1, #0
    278c:	d047      	beq.n	281e <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    278e:	ca07      	ldmia	r2, {r0, r1, r2}
    2790:	eb06 0c04 	add.w	ip, r6, r4
    2794:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2798:	2200      	movs	r2, #0
    279a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    279c:	f388 8811 	msr	BASEPRI, r8
    27a0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    27a4:	230c      	movs	r3, #12
    27a6:	436b      	muls	r3, r5
    27a8:	5cf0      	ldrb	r0, [r6, r3]
    27aa:	18f2      	adds	r2, r6, r3
    27ac:	b3a8      	cbz	r0, 281a <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    27ae:	1c7b      	adds	r3, r7, #1
    27b0:	d010      	beq.n	27d4 <pm_system_suspend+0x70>
			return (uint32_t)((t * to_hz + off) / from_hz);
    27b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    27b6:	2100      	movs	r1, #0
    27b8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    27bc:	4c20      	ldr	r4, [pc, #128]	; (2840 <pm_system_suspend+0xdc>)
    27be:	2300      	movs	r3, #0
    27c0:	fbec 4100 	umlal	r4, r1, ip, r0
    27c4:	4a1f      	ldr	r2, [pc, #124]	; (2844 <pm_system_suspend+0xe0>)
    27c6:	4620      	mov	r0, r4
    27c8:	f7fe f8b4 	bl	934 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    27cc:	2101      	movs	r1, #1
    27ce:	1a38      	subs	r0, r7, r0
    27d0:	f005 f88f 	bl	78f2 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    27d4:	f003 fa16 	bl	5c04 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    27d8:	2001      	movs	r0, #1
    27da:	f7ff ff5d 	bl	2698 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    27de:	4b1a      	ldr	r3, [pc, #104]	; (2848 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    27e0:	096a      	lsrs	r2, r5, #5
    27e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    27e6:	2201      	movs	r2, #1
    27e8:	f005 011f 	and.w	r1, r5, #31
    27ec:	408a      	lsls	r2, r1
    27ee:	e8d3 0fef 	ldaex	r0, [r3]
    27f2:	4310      	orrs	r0, r2
    27f4:	e8c3 0fe1 	stlex	r1, r0, [r3]
    27f8:	2900      	cmp	r1, #0
    27fa:	d1f8      	bne.n	27ee <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    27fc:	4b13      	ldr	r3, [pc, #76]	; (284c <pm_system_suspend+0xe8>)
    27fe:	b13b      	cbz	r3, 2810 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    2800:	230c      	movs	r3, #12
    2802:	fb03 f005 	mul.w	r0, r3, r5
    2806:	1833      	adds	r3, r6, r0
    2808:	7859      	ldrb	r1, [r3, #1]
    280a:	5c30      	ldrb	r0, [r6, r0]
    280c:	f7ff fa36 	bl	1c7c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2810:	f7ff ff70 	bl	26f4 <pm_system_resume>
	k_sched_unlock();
    2814:	f003 fa0a 	bl	5c2c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2818:	2001      	movs	r0, #1
}
    281a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    281e:	4601      	mov	r1, r0
    2820:	4628      	mov	r0, r5
    2822:	f000 f815 	bl	2850 <pm_policy_next_state>
		if (info != NULL) {
    2826:	2800      	cmp	r0, #0
    2828:	d0b8      	beq.n	279c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    282a:	c807      	ldmia	r0, {r0, r1, r2}
    282c:	4434      	add	r4, r6
    282e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2832:	e7b3      	b.n	279c <pm_system_suspend+0x38>
    2834:	20000e24 	.word	0x20000e24
    2838:	20000848 	.word	0x20000848
    283c:	20000854 	.word	0x20000854
    2840:	000f423f 	.word	0x000f423f
    2844:	000f4240 	.word	0x000f4240
    2848:	20000868 	.word	0x20000868
    284c:	00001c7d 	.word	0x00001c7d

00002850 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2854:	b085      	sub	sp, #20
    2856:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2858:	a903      	add	r1, sp, #12
    285a:	f000 f843 	bl	28e4 <pm_state_cpu_get_all>
    285e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2862:	4604      	mov	r4, r0
    2864:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2868:	4b1b      	ldr	r3, [pc, #108]	; (28d8 <pm_policy_next_state+0x88>)
    286a:	9d03      	ldr	r5, [sp, #12]
    286c:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2870:	1e43      	subs	r3, r0, #1
    2872:	b21b      	sxth	r3, r3
    2874:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2878:	f8df 8060 	ldr.w	r8, [pc, #96]	; 28dc <pm_policy_next_state+0x8c>
    287c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2880:	b924      	cbnz	r4, 288c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2882:	46a1      	mov	r9, r4
}
    2884:	4648      	mov	r0, r9
    2886:	b005      	add	sp, #20
    2888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    288c:	46c4      	mov	ip, r8
    288e:	4659      	mov	r1, fp
    2890:	6868      	ldr	r0, [r5, #4]
    2892:	2300      	movs	r3, #0
    2894:	fbe0 c107 	umlal	ip, r1, r0, r7
    2898:	4a11      	ldr	r2, [pc, #68]	; (28e0 <pm_policy_next_state+0x90>)
    289a:	4660      	mov	r0, ip
    289c:	f7fe f84a 	bl	934 <__aeabi_uldivmod>
    28a0:	46c4      	mov	ip, r8
    28a2:	4659      	mov	r1, fp
    28a4:	9001      	str	r0, [sp, #4]
    28a6:	68a8      	ldr	r0, [r5, #8]
    28a8:	2300      	movs	r3, #0
    28aa:	fbe0 c107 	umlal	ip, r1, r0, r7
    28ae:	4a0c      	ldr	r2, [pc, #48]	; (28e0 <pm_policy_next_state+0x90>)
    28b0:	4660      	mov	r0, ip
    28b2:	f7fe f83f 	bl	934 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    28b6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    28ba:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    28bc:	d001      	beq.n	28c2 <pm_policy_next_state+0x72>
    28be:	4582      	cmp	sl, r0
    28c0:	d905      	bls.n	28ce <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    28c2:	1c73      	adds	r3, r6, #1
    28c4:	d0de      	beq.n	2884 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    28c6:	9b01      	ldr	r3, [sp, #4]
    28c8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    28ca:	42b0      	cmp	r0, r6
    28cc:	d9da      	bls.n	2884 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    28ce:	3c01      	subs	r4, #1
    28d0:	b2a4      	uxth	r4, r4
    28d2:	3d0c      	subs	r5, #12
    28d4:	e7d4      	b.n	2880 <pm_policy_next_state+0x30>
    28d6:	bf00      	nop
    28d8:	20000008 	.word	0x20000008
    28dc:	000f423f 	.word	0x000f423f
    28e0:	000f4240 	.word	0x000f4240

000028e4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    28e4:	b908      	cbnz	r0, 28ea <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    28e6:	4b02      	ldr	r3, [pc, #8]	; (28f0 <pm_state_cpu_get_all+0xc>)
    28e8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    28ea:	2000      	movs	r0, #0
    28ec:	4770      	bx	lr
    28ee:	bf00      	nop
    28f0:	00007da0 	.word	0x00007da0

000028f4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    28f4:	4801      	ldr	r0, [pc, #4]	; (28fc <nrf_cc3xx_platform_abort_init+0x8>)
    28f6:	f003 bd23 	b.w	6340 <nrf_cc3xx_platform_set_abort>
    28fa:	bf00      	nop
    28fc:	00007da0 	.word	0x00007da0

00002900 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2900:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2902:	4604      	mov	r4, r0
    2904:	b918      	cbnz	r0, 290e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2906:	4b0f      	ldr	r3, [pc, #60]	; (2944 <mutex_free_platform+0x44>)
    2908:	480f      	ldr	r0, [pc, #60]	; (2948 <mutex_free_platform+0x48>)
    290a:	685b      	ldr	r3, [r3, #4]
    290c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    290e:	6861      	ldr	r1, [r4, #4]
    2910:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    2914:	d00f      	beq.n	2936 <mutex_free_platform+0x36>
    2916:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    291a:	d00c      	beq.n	2936 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    291c:	4d0b      	ldr	r5, [pc, #44]	; (294c <mutex_free_platform+0x4c>)
    291e:	42a9      	cmp	r1, r5
    2920:	d009      	beq.n	2936 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2922:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    2926:	d007      	beq.n	2938 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2928:	4621      	mov	r1, r4
    292a:	4809      	ldr	r0, [pc, #36]	; (2950 <mutex_free_platform+0x50>)
    292c:	f004 fea0 	bl	7670 <k_mem_slab_free>
        mutex->mutex = NULL;
    2930:	2300      	movs	r3, #0
    2932:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2934:	6065      	str	r5, [r4, #4]
}
    2936:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2938:	2214      	movs	r2, #20
    293a:	6820      	ldr	r0, [r4, #0]
    293c:	f004 fb69 	bl	7012 <memset>
    2940:	e7f8      	b.n	2934 <mutex_free_platform+0x34>
    2942:	bf00      	nop
    2944:	20000114 	.word	0x20000114
    2948:	00008231 	.word	0x00008231
    294c:	a95c5f2c 	.word	0xa95c5f2c
    2950:	20000d6c 	.word	0x20000d6c

00002954 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2954:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2956:	b300      	cbz	r0, 299a <mutex_lock_platform+0x46>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2958:	6843      	ldr	r3, [r0, #4]
    295a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    295e:	d10c      	bne.n	297a <mutex_lock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2960:	2201      	movs	r2, #1
    2962:	6803      	ldr	r3, [r0, #0]
    2964:	e8d3 1fef 	ldaex	r1, [r3]
    2968:	2900      	cmp	r1, #0
    296a:	d103      	bne.n	2974 <mutex_lock_platform+0x20>
    296c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2970:	2800      	cmp	r0, #0
    2972:	d1f7      	bne.n	2964 <mutex_lock_platform+0x10>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2974:	d10d      	bne.n	2992 <mutex_lock_platform+0x3e>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    2976:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2978:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    297a:	4a09      	ldr	r2, [pc, #36]	; (29a0 <mutex_lock_platform+0x4c>)
    297c:	4293      	cmp	r3, r2
    297e:	d00a      	beq.n	2996 <mutex_lock_platform+0x42>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2980:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2982:	f04f 32ff 	mov.w	r2, #4294967295
    2986:	f04f 33ff 	mov.w	r3, #4294967295
    298a:	f002 fe33 	bl	55f4 <z_impl_k_mutex_lock>
        if (ret == 0) {
    298e:	2800      	cmp	r0, #0
    2990:	d0f1      	beq.n	2976 <mutex_lock_platform+0x22>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2992:	4804      	ldr	r0, [pc, #16]	; (29a4 <mutex_lock_platform+0x50>)
    2994:	e7f0      	b.n	2978 <mutex_lock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2996:	4804      	ldr	r0, [pc, #16]	; (29a8 <mutex_lock_platform+0x54>)
    2998:	e7ee      	b.n	2978 <mutex_lock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    299a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    299e:	e7eb      	b.n	2978 <mutex_lock_platform+0x24>
    29a0:	a95c5f2c 	.word	0xa95c5f2c
    29a4:	ffff8fe9 	.word	0xffff8fe9
    29a8:	ffff8fea 	.word	0xffff8fea

000029ac <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29ac:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    29ae:	b1b8      	cbz	r0, 29e0 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    29b0:	6843      	ldr	r3, [r0, #4]
    29b2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    29b6:	d10c      	bne.n	29d2 <mutex_unlock_platform+0x26>
    29b8:	2200      	movs	r2, #0
    29ba:	6803      	ldr	r3, [r0, #0]
    29bc:	e8d3 1fef 	ldaex	r1, [r3]
    29c0:	2901      	cmp	r1, #1
    29c2:	d103      	bne.n	29cc <mutex_unlock_platform+0x20>
    29c4:	e8c3 2fe0 	stlex	r0, r2, [r3]
    29c8:	2800      	cmp	r0, #0
    29ca:	d1f7      	bne.n	29bc <mutex_unlock_platform+0x10>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    29cc:	d10b      	bne.n	29e6 <mutex_unlock_platform+0x3a>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    29ce:	2000      	movs	r0, #0
    }
}
    29d0:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    29d2:	4a07      	ldr	r2, [pc, #28]	; (29f0 <mutex_unlock_platform+0x44>)
    29d4:	4293      	cmp	r3, r2
    29d6:	d008      	beq.n	29ea <mutex_unlock_platform+0x3e>
        p_mutex = (struct k_mutex *)mutex->mutex;
    29d8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    29da:	f002 fe85 	bl	56e8 <z_impl_k_mutex_unlock>
    29de:	e7f6      	b.n	29ce <mutex_unlock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    29e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    29e4:	e7f4      	b.n	29d0 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    29e6:	4803      	ldr	r0, [pc, #12]	; (29f4 <mutex_unlock_platform+0x48>)
    29e8:	e7f2      	b.n	29d0 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    29ea:	4803      	ldr	r0, [pc, #12]	; (29f8 <mutex_unlock_platform+0x4c>)
    29ec:	e7f0      	b.n	29d0 <mutex_unlock_platform+0x24>
    29ee:	bf00      	nop
    29f0:	a95c5f2c 	.word	0xa95c5f2c
    29f4:	ffff8fe9 	.word	0xffff8fe9
    29f8:	ffff8fea 	.word	0xffff8fea

000029fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    29fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    29fe:	4604      	mov	r4, r0
    2a00:	b918      	cbnz	r0, 2a0a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2a02:	4b1d      	ldr	r3, [pc, #116]	; (2a78 <mutex_init_platform+0x7c>)
    2a04:	481d      	ldr	r0, [pc, #116]	; (2a7c <mutex_init_platform+0x80>)
    2a06:	685b      	ldr	r3, [r3, #4]
    2a08:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2a0a:	6863      	ldr	r3, [r4, #4]
    2a0c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2a10:	d02f      	beq.n	2a72 <mutex_init_platform+0x76>
    2a12:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2a16:	d02c      	beq.n	2a72 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    2a18:	4a19      	ldr	r2, [pc, #100]	; (2a80 <mutex_init_platform+0x84>)
    2a1a:	4293      	cmp	r3, r2
    2a1c:	d119      	bne.n	2a52 <mutex_init_platform+0x56>
    2a1e:	6823      	ldr	r3, [r4, #0]
    2a20:	bb03      	cbnz	r3, 2a64 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2a22:	f04f 32ff 	mov.w	r2, #4294967295
    2a26:	f04f 33ff 	mov.w	r3, #4294967295
    2a2a:	4621      	mov	r1, r4
    2a2c:	4815      	ldr	r0, [pc, #84]	; (2a84 <mutex_init_platform+0x88>)
    2a2e:	f002 fcdf 	bl	53f0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2a32:	b908      	cbnz	r0, 2a38 <mutex_init_platform+0x3c>
    2a34:	6823      	ldr	r3, [r4, #0]
    2a36:	b91b      	cbnz	r3, 2a40 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    2a38:	4b0f      	ldr	r3, [pc, #60]	; (2a78 <mutex_init_platform+0x7c>)
    2a3a:	4813      	ldr	r0, [pc, #76]	; (2a88 <mutex_init_platform+0x8c>)
    2a3c:	685b      	ldr	r3, [r3, #4]
    2a3e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2a40:	2214      	movs	r2, #20
    2a42:	2100      	movs	r1, #0
    2a44:	6820      	ldr	r0, [r4, #0]
    2a46:	f004 fae4 	bl	7012 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2a4a:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    2a4e:	6063      	str	r3, [r4, #4]
    2a50:	e008      	b.n	2a64 <mutex_init_platform+0x68>
    switch(flags){
    2a52:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2a56:	d80d      	bhi.n	2a74 <mutex_init_platform+0x78>
    2a58:	2b3a      	cmp	r3, #58	; 0x3a
    2a5a:	d003      	beq.n	2a64 <mutex_init_platform+0x68>
    2a5c:	f640 62ba 	movw	r2, #3770	; 0xeba
    2a60:	4293      	cmp	r3, r2
    2a62:	d1de      	bne.n	2a22 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    2a64:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2a66:	f004 fe46 	bl	76f6 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2a6a:	6863      	ldr	r3, [r4, #4]
    2a6c:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    2a70:	6063      	str	r3, [r4, #4]
}
    2a72:	bd10      	pop	{r4, pc}
    switch(flags){
    2a74:	4a05      	ldr	r2, [pc, #20]	; (2a8c <mutex_init_platform+0x90>)
    2a76:	e7f3      	b.n	2a60 <mutex_init_platform+0x64>
    2a78:	20000114 	.word	0x20000114
    2a7c:	00008231 	.word	0x00008231
    2a80:	a95c5f2c 	.word	0xa95c5f2c
    2a84:	20000d6c 	.word	0x20000d6c
    2a88:	00008257 	.word	0x00008257
    2a8c:	3a00003a 	.word	0x3a00003a

00002a90 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2a90:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2a92:	4906      	ldr	r1, [pc, #24]	; (2aac <nrf_cc3xx_platform_mutex_init+0x1c>)
    2a94:	2340      	movs	r3, #64	; 0x40
    2a96:	2214      	movs	r2, #20
    2a98:	4805      	ldr	r0, [pc, #20]	; (2ab0 <nrf_cc3xx_platform_mutex_init+0x20>)
    2a9a:	f004 fddb 	bl	7654 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    2a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    2aa2:	4904      	ldr	r1, [pc, #16]	; (2ab4 <nrf_cc3xx_platform_mutex_init+0x24>)
    2aa4:	4804      	ldr	r0, [pc, #16]	; (2ab8 <nrf_cc3xx_platform_mutex_init+0x28>)
    2aa6:	f003 bcbd 	b.w	6424 <nrf_cc3xx_platform_set_mutexes>
    2aaa:	bf00      	nop
    2aac:	2000086c 	.word	0x2000086c
    2ab0:	20000d6c 	.word	0x20000d6c
    2ab4:	00007da8 	.word	0x00007da8
    2ab8:	00007dbc 	.word	0x00007dbc

00002abc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2abc:	4901      	ldr	r1, [pc, #4]	; (2ac4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2abe:	2210      	movs	r2, #16
	str	r2, [r1]
    2ac0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2ac2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2ac4:	e000ed10 	.word	0xe000ed10

00002ac8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2ac8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2aca:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2acc:	f380 8811 	msr	BASEPRI, r0
	isb
    2ad0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2ad4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2ad8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2ada:	b662      	cpsie	i
	isb
    2adc:	f3bf 8f6f 	isb	sy

	bx	lr
    2ae0:	4770      	bx	lr
    2ae2:	bf00      	nop

00002ae4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2ae4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2ae6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2ae8:	f381 8811 	msr	BASEPRI, r1

	wfe
    2aec:	bf20      	wfe

	msr	BASEPRI, r0
    2aee:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2af2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2af4:	4770      	bx	lr
    2af6:	bf00      	nop

00002af8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2afc:	4681      	mov	r9, r0

	if (esf != NULL) {
    2afe:	460c      	mov	r4, r1
{
    2b00:	af00      	add	r7, sp, #0
	if (esf != NULL) {
    2b02:	2900      	cmp	r1, #0
    2b04:	d04c      	beq.n	2ba0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2b06:	e9d1 1200 	ldrd	r1, r2, [r1]
    2b0a:	466e      	mov	r6, sp
    2b0c:	b08a      	sub	sp, #40	; 0x28
    2b0e:	68a3      	ldr	r3, [r4, #8]
    2b10:	466d      	mov	r5, sp
    2b12:	f04f 0a05 	mov.w	sl, #5
    2b16:	46a8      	mov	r8, r5
    2b18:	4825      	ldr	r0, [pc, #148]	; (2bb0 <z_arm_fatal_error+0xb8>)
    2b1a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2b1e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2b22:	f848 af10 	str.w	sl, [r8, #16]!
    2b26:	2300      	movs	r3, #0
    2b28:	4642      	mov	r2, r8
    2b2a:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2b2e:	4821      	ldr	r0, [pc, #132]	; (2bb4 <z_arm_fatal_error+0xbc>)
    2b30:	f7ff fb3a 	bl	21a8 <z_impl_z_log_msg_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2b34:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2b38:	46b5      	mov	sp, r6
    2b3a:	6963      	ldr	r3, [r4, #20]
    2b3c:	46ad      	mov	sp, r5
    2b3e:	481e      	ldr	r0, [pc, #120]	; (2bb8 <z_arm_fatal_error+0xc0>)
    2b40:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2b44:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2b48:	f8c5 a010 	str.w	sl, [r5, #16]
    2b4c:	2300      	movs	r3, #0
    2b4e:	4642      	mov	r2, r8
    2b50:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2b54:	4817      	ldr	r0, [pc, #92]	; (2bb4 <z_arm_fatal_error+0xbc>)
    2b56:	f7ff fb27 	bl	21a8 <z_impl_z_log_msg_static_create>
    2b5a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2b5c:	b088      	sub	sp, #32
    2b5e:	69e3      	ldr	r3, [r4, #28]
    2b60:	466d      	mov	r5, sp
    2b62:	f04f 0a03 	mov.w	sl, #3
    2b66:	46a8      	mov	r8, r5
    2b68:	4a14      	ldr	r2, [pc, #80]	; (2bbc <z_arm_fatal_error+0xc4>)
    2b6a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2b6e:	f848 af10 	str.w	sl, [r8, #16]!
    2b72:	2300      	movs	r3, #0
    2b74:	4642      	mov	r2, r8
    2b76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2b7a:	480e      	ldr	r0, [pc, #56]	; (2bb4 <z_arm_fatal_error+0xbc>)
    2b7c:	f7ff fb14 	bl	21a8 <z_impl_z_log_msg_static_create>
    2b80:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2b82:	69a3      	ldr	r3, [r4, #24]
    2b84:	46ad      	mov	sp, r5
    2b86:	4a0e      	ldr	r2, [pc, #56]	; (2bc0 <z_arm_fatal_error+0xc8>)
    2b88:	f8c5 a010 	str.w	sl, [r5, #16]
    2b8c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2b90:	2300      	movs	r3, #0
    2b92:	4642      	mov	r2, r8
    2b94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2b98:	4806      	ldr	r0, [pc, #24]	; (2bb4 <z_arm_fatal_error+0xbc>)
    2b9a:	f7ff fb05 	bl	21a8 <z_impl_z_log_msg_static_create>
    2b9e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2ba0:	4621      	mov	r1, r4
    2ba2:	4648      	mov	r0, r9
    2ba4:	f002 faa8 	bl	50f8 <z_fatal_error>
}
    2ba8:	46bd      	mov	sp, r7
    2baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2bae:	bf00      	nop
    2bb0:	00008284 	.word	0x00008284
    2bb4:	00007ce4 	.word	0x00007ce4
    2bb8:	000082b3 	.word	0x000082b3
    2bbc:	000082e2 	.word	0x000082e2
    2bc0:	000082f1 	.word	0x000082f1

00002bc4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2bc4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2bc6:	2800      	cmp	r0, #0
    2bc8:	db07      	blt.n	2bda <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bca:	2301      	movs	r3, #1
    2bcc:	0941      	lsrs	r1, r0, #5
    2bce:	4a03      	ldr	r2, [pc, #12]	; (2bdc <arch_irq_enable+0x18>)
    2bd0:	f000 001f 	and.w	r0, r0, #31
    2bd4:	4083      	lsls	r3, r0
    2bd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2bda:	4770      	bx	lr
    2bdc:	e000e100 	.word	0xe000e100

00002be0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2be0:	4b05      	ldr	r3, [pc, #20]	; (2bf8 <arch_irq_is_enabled+0x18>)
    2be2:	0942      	lsrs	r2, r0, #5
    2be4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2be8:	2301      	movs	r3, #1
    2bea:	f000 001f 	and.w	r0, r0, #31
    2bee:	fa03 f000 	lsl.w	r0, r3, r0
}
    2bf2:	4010      	ands	r0, r2
    2bf4:	4770      	bx	lr
    2bf6:	bf00      	nop
    2bf8:	e000e100 	.word	0xe000e100

00002bfc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2bfc:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2bfe:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    2c00:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c04:	bfac      	ite	ge
    2c06:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c0a:	4b06      	ldrlt	r3, [pc, #24]	; (2c24 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c0c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2c10:	b2c9      	uxtb	r1, r1
    2c12:	bfab      	itete	ge
    2c14:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c18:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c1c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c20:	5419      	strblt	r1, [r3, r0]
}
    2c22:	4770      	bx	lr
    2c24:	e000ed14 	.word	0xe000ed14

00002c28 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2c28:	bf30      	wfi
    b z_SysNmiOnReset
    2c2a:	f7ff bffd 	b.w	2c28 <z_SysNmiOnReset>
    2c2e:	bf00      	nop

00002c30 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2c30:	4a0b      	ldr	r2, [pc, #44]	; (2c60 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2c32:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2c34:	4b0b      	ldr	r3, [pc, #44]	; (2c64 <z_arm_prep_c+0x34>)
    2c36:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2c3a:	609a      	str	r2, [r3, #8]
    2c3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c40:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2c44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2c48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2c50:	f002 fb0c 	bl	526c <z_bss_zero>
	z_data_copy();
    2c54:	f003 f914 	bl	5e80 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2c58:	f000 fb9a 	bl	3390 <z_arm_interrupt_init>
	z_cstart();
    2c5c:	f002 fb46 	bl	52ec <z_cstart>
    2c60:	00000000 	.word	0x00000000
    2c64:	e000ed00 	.word	0xe000ed00

00002c68 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2c68:	4a09      	ldr	r2, [pc, #36]	; (2c90 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2c6a:	490a      	ldr	r1, [pc, #40]	; (2c94 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2c6c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2c6e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2c70:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2c72:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c74:	4908      	ldr	r1, [pc, #32]	; (2c98 <arch_swap+0x30>)
    2c76:	684b      	ldr	r3, [r1, #4]
    2c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c7c:	604b      	str	r3, [r1, #4]
    2c7e:	2300      	movs	r3, #0
    2c80:	f383 8811 	msr	BASEPRI, r3
    2c84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2c88:	6893      	ldr	r3, [r2, #8]
}
    2c8a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2c8c:	4770      	bx	lr
    2c8e:	bf00      	nop
    2c90:	20000e24 	.word	0x20000e24
    2c94:	00007f20 	.word	0x00007f20
    2c98:	e000ed00 	.word	0xe000ed00

00002c9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2c9c:	4913      	ldr	r1, [pc, #76]	; (2cec <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2c9e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2ca0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2ca4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2ca6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2caa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2cae:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2cb0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2cb4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2cb8:	4f0d      	ldr	r7, [pc, #52]	; (2cf0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2cba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2cbe:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2cc0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2cc2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2cc4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2cc6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2cc8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2cca:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2cce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2cd2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2cd6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2cda:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2cde:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2ce0:	f004 f94c 	bl	6f7c <configure_builtin_stack_guard>
    pop {r2, lr}
    2ce4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2ce8:	4770      	bx	lr
    2cea:	0000      	.short	0x0000
    ldr r1, =_kernel
    2cec:	20000e24 	.word	0x20000e24
    ldr v4, =_SCS_ICSR
    2cf0:	e000ed04 	.word	0xe000ed04

00002cf4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2cf4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2cf8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2cfa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2cfe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2d02:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2d04:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2d08:	2902      	cmp	r1, #2
    beq _oops
    2d0a:	d0ff      	beq.n	2d0c <_oops>

00002d0c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2d0c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2d0e:	f004 f926 	bl	6f5e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2d12:	bd01      	pop	{r0, pc}

00002d14 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2d14:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2d18:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2d1a:	490b      	ldr	r1, [pc, #44]	; (2d48 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2d1c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2d20:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2d22:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2d26:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2d2a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2d2c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2d30:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2d34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2d38:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2d3c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2d3e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2d40:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2d42:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2d44:	4770      	bx	lr
    2d46:	bf00      	nop
    2d48:	000067a1 	.word	0x000067a1

00002d4c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2d4c:	4b08      	ldr	r3, [pc, #32]	; (2d70 <arch_switch_to_main_thread+0x24>)
    2d4e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2d50:	6e43      	ldr	r3, [r0, #100]	; 0x64
    2d52:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2d56:	4610      	mov	r0, r2
    2d58:	f381 8809 	msr	PSP, r1
    2d5c:	2100      	movs	r1, #0
    2d5e:	b663      	cpsie	if
    2d60:	f381 8811 	msr	BASEPRI, r1
    2d64:	f3bf 8f6f 	isb	sy
    2d68:	2200      	movs	r2, #0
    2d6a:	2300      	movs	r3, #0
    2d6c:	f003 fd18 	bl	67a0 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2d70:	20000e24 	.word	0x20000e24

00002d74 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2d74:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2d76:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2d78:	4a0b      	ldr	r2, [pc, #44]	; (2da8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2d7a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2d7c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2d7e:	bf1e      	ittt	ne
	movne	r1, #0
    2d80:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2d82:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2d84:	f004 fca8 	blne	76d8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2d88:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2d8a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2d8e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d92:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d96:	4905      	ldr	r1, [pc, #20]	; (2dac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d98:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d9a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d9c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2da2:	4903      	ldr	r1, [pc, #12]	; (2db0 <_isr_wrapper+0x3c>)
	bx r1
    2da4:	4708      	bx	r1
    2da6:	0000      	.short	0x0000
	ldr r2, =_kernel
    2da8:	20000e24 	.word	0x20000e24
	ldr r1, =_sw_isr_table
    2dac:	00007a70 	.word	0x00007a70
	ldr r1, =z_arm_int_exit
    2db0:	00002db5 	.word	0x00002db5

00002db4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2db4:	4b04      	ldr	r3, [pc, #16]	; (2dc8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2db6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2db8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2dba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2dbc:	d003      	beq.n	2dc6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2dbe:	4903      	ldr	r1, [pc, #12]	; (2dcc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2dc4:	600a      	str	r2, [r1, #0]

00002dc6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2dc6:	4770      	bx	lr
	ldr r3, =_kernel
    2dc8:	20000e24 	.word	0x20000e24
	ldr r1, =_SCS_ICSR
    2dcc:	e000ed04 	.word	0xe000ed04

00002dd0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dd4:	b086      	sub	sp, #24
    2dd6:	4606      	mov	r6, r0
    2dd8:	460d      	mov	r5, r1
    2dda:	af00      	add	r7, sp, #0
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    2ddc:	2402      	movs	r4, #2
    2dde:	4b41      	ldr	r3, [pc, #260]	; (2ee4 <mem_manage_fault.constprop.0+0x114>)
    2de0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2de4:	617b      	str	r3, [r7, #20]
    2de6:	4840      	ldr	r0, [pc, #256]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2de8:	613c      	str	r4, [r7, #16]
    2dea:	f107 0210 	add.w	r2, r7, #16
    2dee:	f004 f8c9 	bl	6f84 <z_log_msg_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2df2:	4b3e      	ldr	r3, [pc, #248]	; (2eec <mem_manage_fault.constprop.0+0x11c>)
    2df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2df6:	06db      	lsls	r3, r3, #27
    2df8:	d509      	bpl.n	2e0e <mem_manage_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2dfa:	4b3d      	ldr	r3, [pc, #244]	; (2ef0 <mem_manage_fault.constprop.0+0x120>)
    2dfc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e00:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2e04:	4838      	ldr	r0, [pc, #224]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2e06:	f107 0210 	add.w	r2, r7, #16
    2e0a:	f004 f8bb 	bl	6f84 <z_log_msg_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2e0e:	4b37      	ldr	r3, [pc, #220]	; (2eec <mem_manage_fault.constprop.0+0x11c>)
    2e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e12:	0718      	lsls	r0, r3, #28
    2e14:	d50a      	bpl.n	2e2c <mem_manage_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2e16:	4b37      	ldr	r3, [pc, #220]	; (2ef4 <mem_manage_fault.constprop.0+0x124>)
    2e18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e1c:	617b      	str	r3, [r7, #20]
    2e1e:	2302      	movs	r3, #2
    2e20:	4831      	ldr	r0, [pc, #196]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2e22:	613b      	str	r3, [r7, #16]
    2e24:	f107 0210 	add.w	r2, r7, #16
    2e28:	f004 f8ac 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2e2c:	4c2f      	ldr	r4, [pc, #188]	; (2eec <mem_manage_fault.constprop.0+0x11c>)
    2e2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e30:	0799      	lsls	r1, r3, #30
    2e32:	d522      	bpl.n	2e7a <mem_manage_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Data Access Violation");
    2e34:	46e8      	mov	r8, sp
    2e36:	4b30      	ldr	r3, [pc, #192]	; (2ef8 <mem_manage_fault.constprop.0+0x128>)
    2e38:	f107 0210 	add.w	r2, r7, #16
    2e3c:	617b      	str	r3, [r7, #20]
    2e3e:	2302      	movs	r3, #2
    2e40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e44:	613b      	str	r3, [r7, #16]
    2e46:	4828      	ldr	r0, [pc, #160]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2e48:	f004 f89c 	bl	6f84 <z_log_msg_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2e4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2e50:	0612      	lsls	r2, r2, #24
    2e52:	d512      	bpl.n	2e7a <mem_manage_fault.constprop.0+0xaa>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2e54:	b088      	sub	sp, #32
    2e56:	466a      	mov	r2, sp
    2e58:	4928      	ldr	r1, [pc, #160]	; (2efc <mem_manage_fault.constprop.0+0x12c>)
    2e5a:	4823      	ldr	r0, [pc, #140]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2e5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2e60:	2303      	movs	r3, #3
    2e62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2e66:	f842 3f10 	str.w	r3, [r2, #16]!
    2e6a:	f004 f88b 	bl	6f84 <z_log_msg_static_create.constprop.0>
    2e6e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2e70:	b11e      	cbz	r6, 2e7a <mem_manage_fault.constprop.0+0xaa>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2e72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2e78:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2e7a:	4b1c      	ldr	r3, [pc, #112]	; (2eec <mem_manage_fault.constprop.0+0x11c>)
    2e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e7e:	07dc      	lsls	r4, r3, #31
    2e80:	d50a      	bpl.n	2e98 <mem_manage_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Instruction Access Violation");
    2e82:	4b1f      	ldr	r3, [pc, #124]	; (2f00 <mem_manage_fault.constprop.0+0x130>)
    2e84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e88:	617b      	str	r3, [r7, #20]
    2e8a:	2302      	movs	r3, #2
    2e8c:	4816      	ldr	r0, [pc, #88]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2e8e:	613b      	str	r3, [r7, #16]
    2e90:	f107 0210 	add.w	r2, r7, #16
    2e94:	f004 f876 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2e98:	4b14      	ldr	r3, [pc, #80]	; (2eec <mem_manage_fault.constprop.0+0x11c>)
    2e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e9c:	0698      	lsls	r0, r3, #26
    2e9e:	d50a      	bpl.n	2eb6 <mem_manage_fault.constprop.0+0xe6>
		PR_FAULT_INFO(
    2ea0:	4b18      	ldr	r3, [pc, #96]	; (2f04 <mem_manage_fault.constprop.0+0x134>)
    2ea2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ea6:	617b      	str	r3, [r7, #20]
    2ea8:	2302      	movs	r3, #2
    2eaa:	480f      	ldr	r0, [pc, #60]	; (2ee8 <mem_manage_fault.constprop.0+0x118>)
    2eac:	613b      	str	r3, [r7, #16]
    2eae:	f107 0210 	add.w	r2, r7, #16
    2eb2:	f004 f867 	bl	6f84 <z_log_msg_static_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2eb6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2eb8:	4b0c      	ldr	r3, [pc, #48]	; (2eec <mem_manage_fault.constprop.0+0x11c>)

	return reason;
}
    2eba:	3718      	adds	r7, #24
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ebe:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2ec0:	bf58      	it	pl
    2ec2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ec6:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2ec8:	bf42      	ittt	mi
    2eca:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    2ecc:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2ed0:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2ed4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2ed8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2eda:	7028      	strb	r0, [r5, #0]
}
    2edc:	46bd      	mov	sp, r7
    2ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ee2:	bf00      	nop
    2ee4:	0000831f 	.word	0x0000831f
    2ee8:	00007ce4 	.word	0x00007ce4
    2eec:	e000ed00 	.word	0xe000ed00
    2ef0:	00008335 	.word	0x00008335
    2ef4:	00008368 	.word	0x00008368
    2ef8:	0000837b 	.word	0x0000837b
    2efc:	00008393 	.word	0x00008393
    2f00:	000083a9 	.word	0x000083a9
    2f04:	000083c8 	.word	0x000083c8

00002f08 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f0c:	b086      	sub	sp, #24
    2f0e:	4606      	mov	r6, r0
    2f10:	460d      	mov	r5, r1
    2f12:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2f14:	2402      	movs	r4, #2
    2f16:	4b3e      	ldr	r3, [pc, #248]	; (3010 <bus_fault.constprop.0+0x108>)
    2f18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f1c:	617b      	str	r3, [r7, #20]
    2f1e:	483d      	ldr	r0, [pc, #244]	; (3014 <bus_fault.constprop.0+0x10c>)
    2f20:	613c      	str	r4, [r7, #16]
    2f22:	f107 0210 	add.w	r2, r7, #16
    2f26:	f004 f82d 	bl	6f84 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f2a:	4b3b      	ldr	r3, [pc, #236]	; (3018 <bus_fault.constprop.0+0x110>)
    2f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f2e:	04d9      	lsls	r1, r3, #19
    2f30:	d509      	bpl.n	2f46 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2f32:	4b3a      	ldr	r3, [pc, #232]	; (301c <bus_fault.constprop.0+0x114>)
    2f34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f38:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2f3c:	4835      	ldr	r0, [pc, #212]	; (3014 <bus_fault.constprop.0+0x10c>)
    2f3e:	f107 0210 	add.w	r2, r7, #16
    2f42:	f004 f81f 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2f46:	4b34      	ldr	r3, [pc, #208]	; (3018 <bus_fault.constprop.0+0x110>)
    2f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f4a:	051a      	lsls	r2, r3, #20
    2f4c:	d50a      	bpl.n	2f64 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2f4e:	4b34      	ldr	r3, [pc, #208]	; (3020 <bus_fault.constprop.0+0x118>)
    2f50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f54:	617b      	str	r3, [r7, #20]
    2f56:	2302      	movs	r3, #2
    2f58:	482e      	ldr	r0, [pc, #184]	; (3014 <bus_fault.constprop.0+0x10c>)
    2f5a:	613b      	str	r3, [r7, #16]
    2f5c:	f107 0210 	add.w	r2, r7, #16
    2f60:	f004 f810 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2f64:	4c2c      	ldr	r4, [pc, #176]	; (3018 <bus_fault.constprop.0+0x110>)
    2f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f68:	059b      	lsls	r3, r3, #22
    2f6a:	d522      	bpl.n	2fb2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2f6c:	46e8      	mov	r8, sp
    2f6e:	4b2d      	ldr	r3, [pc, #180]	; (3024 <bus_fault.constprop.0+0x11c>)
    2f70:	4828      	ldr	r0, [pc, #160]	; (3014 <bus_fault.constprop.0+0x10c>)
    2f72:	617b      	str	r3, [r7, #20]
    2f74:	2302      	movs	r3, #2
    2f76:	f107 0210 	add.w	r2, r7, #16
    2f7a:	613b      	str	r3, [r7, #16]
    2f7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f80:	f004 f800 	bl	6f84 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2f84:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2f86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2f88:	0410      	lsls	r0, r2, #16
    2f8a:	d512      	bpl.n	2fb2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2f8c:	b088      	sub	sp, #32
    2f8e:	466a      	mov	r2, sp
    2f90:	4925      	ldr	r1, [pc, #148]	; (3028 <bus_fault.constprop.0+0x120>)
    2f92:	4820      	ldr	r0, [pc, #128]	; (3014 <bus_fault.constprop.0+0x10c>)
    2f94:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2f98:	2303      	movs	r3, #3
    2f9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2f9e:	f842 3f10 	str.w	r3, [r2, #16]!
    2fa2:	f003 ffef 	bl	6f84 <z_log_msg_static_create.constprop.0>
    2fa6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2fa8:	b11e      	cbz	r6, 2fb2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2faa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2fb0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2fb2:	4b19      	ldr	r3, [pc, #100]	; (3018 <bus_fault.constprop.0+0x110>)
    2fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fb6:	0559      	lsls	r1, r3, #21
    2fb8:	d50a      	bpl.n	2fd0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2fba:	4b1c      	ldr	r3, [pc, #112]	; (302c <bus_fault.constprop.0+0x124>)
    2fbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2fc0:	617b      	str	r3, [r7, #20]
    2fc2:	2302      	movs	r3, #2
    2fc4:	4813      	ldr	r0, [pc, #76]	; (3014 <bus_fault.constprop.0+0x10c>)
    2fc6:	613b      	str	r3, [r7, #16]
    2fc8:	f107 0210 	add.w	r2, r7, #16
    2fcc:	f003 ffda 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2fd0:	4b11      	ldr	r3, [pc, #68]	; (3018 <bus_fault.constprop.0+0x110>)
    2fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fd4:	05d2      	lsls	r2, r2, #23
    2fd6:	d515      	bpl.n	3004 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    2fd8:	4b15      	ldr	r3, [pc, #84]	; (3030 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2fda:	617b      	str	r3, [r7, #20]
    2fdc:	2302      	movs	r3, #2
    2fde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2fe2:	480c      	ldr	r0, [pc, #48]	; (3014 <bus_fault.constprop.0+0x10c>)
    2fe4:	613b      	str	r3, [r7, #16]
    2fe6:	f107 0210 	add.w	r2, r7, #16
    2fea:	f003 ffcb 	bl	6f84 <z_log_msg_static_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2fee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2ff0:	4a09      	ldr	r2, [pc, #36]	; (3018 <bus_fault.constprop.0+0x110>)

	return reason;
}
    2ff2:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2ff4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ff6:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2ffa:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2ffc:	7028      	strb	r0, [r5, #0]
}
    2ffe:	46bd      	mov	sp, r7
    3000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3006:	049b      	lsls	r3, r3, #18
    3008:	d5f1      	bpl.n	2fee <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    300a:	4b0a      	ldr	r3, [pc, #40]	; (3034 <bus_fault.constprop.0+0x12c>)
    300c:	e7e5      	b.n	2fda <bus_fault.constprop.0+0xd2>
    300e:	bf00      	nop
    3010:	000083f7 	.word	0x000083f7
    3014:	00007ce4 	.word	0x00007ce4
    3018:	e000ed00 	.word	0xe000ed00
    301c:	0000840d 	.word	0x0000840d
    3020:	00008368 	.word	0x00008368
    3024:	0000841e 	.word	0x0000841e
    3028:	00008437 	.word	0x00008437
    302c:	0000844c 	.word	0x0000844c
    3030:	00008467 	.word	0x00008467
    3034:	000083c8 	.word	0x000083c8

00003038 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3038:	b510      	push	{r4, lr}
    303a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    303c:	2402      	movs	r4, #2
    303e:	4b3a      	ldr	r3, [pc, #232]	; (3128 <usage_fault.constprop.0+0xf0>)
    3040:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3044:	4839      	ldr	r0, [pc, #228]	; (312c <usage_fault.constprop.0+0xf4>)
    3046:	aa04      	add	r2, sp, #16
    3048:	9305      	str	r3, [sp, #20]
    304a:	9404      	str	r4, [sp, #16]
    304c:	f003 ff9a 	bl	6f84 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3050:	4b37      	ldr	r3, [pc, #220]	; (3130 <usage_fault.constprop.0+0xf8>)
    3052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3054:	019b      	lsls	r3, r3, #6
    3056:	d508      	bpl.n	306a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    3058:	4b36      	ldr	r3, [pc, #216]	; (3134 <usage_fault.constprop.0+0xfc>)
    305a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    305e:	4833      	ldr	r0, [pc, #204]	; (312c <usage_fault.constprop.0+0xf4>)
    3060:	aa04      	add	r2, sp, #16
    3062:	e9cd 4304 	strd	r4, r3, [sp, #16]
    3066:	f003 ff8d 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    306a:	4b31      	ldr	r3, [pc, #196]	; (3130 <usage_fault.constprop.0+0xf8>)
    306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    306e:	01dc      	lsls	r4, r3, #7
    3070:	d509      	bpl.n	3086 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    3072:	4b31      	ldr	r3, [pc, #196]	; (3138 <usage_fault.constprop.0+0x100>)
    3074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3078:	9305      	str	r3, [sp, #20]
    307a:	2302      	movs	r3, #2
    307c:	482b      	ldr	r0, [pc, #172]	; (312c <usage_fault.constprop.0+0xf4>)
    307e:	aa04      	add	r2, sp, #16
    3080:	9304      	str	r3, [sp, #16]
    3082:	f003 ff7f 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3086:	4b2a      	ldr	r3, [pc, #168]	; (3130 <usage_fault.constprop.0+0xf8>)
    3088:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    308a:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    308e:	d009      	beq.n	30a4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    3090:	2402      	movs	r4, #2
    3092:	4b2a      	ldr	r3, [pc, #168]	; (313c <usage_fault.constprop.0+0x104>)
    3094:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3098:	4824      	ldr	r0, [pc, #144]	; (312c <usage_fault.constprop.0+0xf4>)
    309a:	aa04      	add	r2, sp, #16
    309c:	9305      	str	r3, [sp, #20]
    309e:	9404      	str	r4, [sp, #16]
    30a0:	f003 ff70 	bl	6f84 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    30a4:	4b22      	ldr	r3, [pc, #136]	; (3130 <usage_fault.constprop.0+0xf8>)
    30a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30a8:	0318      	lsls	r0, r3, #12
    30aa:	d509      	bpl.n	30c0 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  No coprocessor instructions");
    30ac:	4b24      	ldr	r3, [pc, #144]	; (3140 <usage_fault.constprop.0+0x108>)
    30ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30b2:	9305      	str	r3, [sp, #20]
    30b4:	2302      	movs	r3, #2
    30b6:	481d      	ldr	r0, [pc, #116]	; (312c <usage_fault.constprop.0+0xf4>)
    30b8:	aa04      	add	r2, sp, #16
    30ba:	9304      	str	r3, [sp, #16]
    30bc:	f003 ff62 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    30c0:	4b1b      	ldr	r3, [pc, #108]	; (3130 <usage_fault.constprop.0+0xf8>)
    30c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30c4:	0359      	lsls	r1, r3, #13
    30c6:	d509      	bpl.n	30dc <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    30c8:	4b1e      	ldr	r3, [pc, #120]	; (3144 <usage_fault.constprop.0+0x10c>)
    30ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30ce:	9305      	str	r3, [sp, #20]
    30d0:	2302      	movs	r3, #2
    30d2:	4816      	ldr	r0, [pc, #88]	; (312c <usage_fault.constprop.0+0xf4>)
    30d4:	aa04      	add	r2, sp, #16
    30d6:	9304      	str	r3, [sp, #16]
    30d8:	f003 ff54 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    30dc:	4b14      	ldr	r3, [pc, #80]	; (3130 <usage_fault.constprop.0+0xf8>)
    30de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30e0:	039a      	lsls	r2, r3, #14
    30e2:	d509      	bpl.n	30f8 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    30e4:	4b18      	ldr	r3, [pc, #96]	; (3148 <usage_fault.constprop.0+0x110>)
    30e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30ea:	9305      	str	r3, [sp, #20]
    30ec:	2302      	movs	r3, #2
    30ee:	480f      	ldr	r0, [pc, #60]	; (312c <usage_fault.constprop.0+0xf4>)
    30f0:	aa04      	add	r2, sp, #16
    30f2:	9304      	str	r3, [sp, #16]
    30f4:	f003 ff46 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    30f8:	4b0d      	ldr	r3, [pc, #52]	; (3130 <usage_fault.constprop.0+0xf8>)
    30fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30fc:	03db      	lsls	r3, r3, #15
    30fe:	d509      	bpl.n	3114 <usage_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3100:	4b12      	ldr	r3, [pc, #72]	; (314c <usage_fault.constprop.0+0x114>)
    3102:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3106:	9305      	str	r3, [sp, #20]
    3108:	2302      	movs	r3, #2
    310a:	4808      	ldr	r0, [pc, #32]	; (312c <usage_fault.constprop.0+0xf4>)
    310c:	aa04      	add	r2, sp, #16
    310e:	9304      	str	r3, [sp, #16]
    3110:	f003 ff38 	bl	6f84 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3114:	4a06      	ldr	r2, [pc, #24]	; (3130 <usage_fault.constprop.0+0xf8>)

	return reason;
}
    3116:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3118:	6a93      	ldr	r3, [r2, #40]	; 0x28
    311a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    311e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3122:	6293      	str	r3, [r2, #40]	; 0x28
}
    3124:	b006      	add	sp, #24
    3126:	bd10      	pop	{r4, pc}
    3128:	0000847f 	.word	0x0000847f
    312c:	00007ce4 	.word	0x00007ce4
    3130:	e000ed00 	.word	0xe000ed00
    3134:	00008497 	.word	0x00008497
    3138:	000084aa 	.word	0x000084aa
    313c:	000084c4 	.word	0x000084c4
    3140:	000084ee 	.word	0x000084ee
    3144:	0000850c 	.word	0x0000850c
    3148:	00008531 	.word	0x00008531
    314c:	0000854b 	.word	0x0000854b

00003150 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3154:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3156:	4b76      	ldr	r3, [pc, #472]	; (3330 <z_arm_fault+0x1e0>)
{
    3158:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    315a:	f8d3 8004 	ldr.w	r8, [r3, #4]
    315e:	2600      	movs	r6, #0
{
    3160:	af00      	add	r7, sp, #0
    3162:	f3c8 0408 	ubfx	r4, r8, #0, #9
    3166:	f386 8811 	msr	BASEPRI, r6
    316a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    316e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3172:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3176:	d10e      	bne.n	3196 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3178:	f002 030c 	and.w	r3, r2, #12
    317c:	2b08      	cmp	r3, #8
    317e:	d119      	bne.n	31b4 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3180:	4b6c      	ldr	r3, [pc, #432]	; (3334 <z_arm_fault+0x1e4>)
    3182:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3186:	61fb      	str	r3, [r7, #28]
    3188:	2302      	movs	r3, #2
    318a:	486b      	ldr	r0, [pc, #428]	; (3338 <z_arm_fault+0x1e8>)
    318c:	61bb      	str	r3, [r7, #24]
    318e:	f107 0218 	add.w	r2, r7, #24
    3192:	f003 fef7 	bl	6f84 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    3196:	2600      	movs	r6, #0
		return NULL;
    3198:	4635      	mov	r5, r6
	*recoverable = false;
    319a:	2300      	movs	r3, #0
    319c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    319e:	1ee3      	subs	r3, r4, #3
    31a0:	2b09      	cmp	r3, #9
    31a2:	f200 80a5 	bhi.w	32f0 <z_arm_fault+0x1a0>
    31a6:	e8df f003 	tbb	[pc, r3]
    31aa:	980a      	.short	0x980a
    31ac:	a3a3949b 	.word	0xa3a3949b
    31b0:	9ea3a3a3 	.word	0x9ea3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    31b4:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    31b6:	bf4c      	ite	mi
    31b8:	460d      	movmi	r5, r1
			*nested_exc = true;
    31ba:	2601      	movpl	r6, #1
    31bc:	e7ed      	b.n	319a <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    31be:	46e9      	mov	r9, sp
    31c0:	f04f 0802 	mov.w	r8, #2
    31c4:	4b5d      	ldr	r3, [pc, #372]	; (333c <z_arm_fault+0x1ec>)
    31c6:	f107 0218 	add.w	r2, r7, #24
    31ca:	61fb      	str	r3, [r7, #28]
    31cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31d0:	4859      	ldr	r0, [pc, #356]	; (3338 <z_arm_fault+0x1e8>)
    31d2:	f8c7 8018 	str.w	r8, [r7, #24]
    31d6:	f003 fed5 	bl	6f84 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    31da:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31dc:	4c54      	ldr	r4, [pc, #336]	; (3330 <z_arm_fault+0x1e0>)
	*recoverable = false;
    31de:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    31e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    31e2:	079a      	lsls	r2, r3, #30
    31e4:	d50b      	bpl.n	31fe <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    31e6:	4b56      	ldr	r3, [pc, #344]	; (3340 <z_arm_fault+0x1f0>)
		PR_EXC("  Debug event");
    31e8:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    31ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31f0:	4851      	ldr	r0, [pc, #324]	; (3338 <z_arm_fault+0x1e8>)
    31f2:	f107 0218 	add.w	r2, r7, #24
    31f6:	f003 fec5 	bl	6f84 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    31fa:	2400      	movs	r4, #0
    31fc:	e040      	b.n	3280 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    31fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3200:	2b00      	cmp	r3, #0
    3202:	da01      	bge.n	3208 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    3204:	4b4f      	ldr	r3, [pc, #316]	; (3344 <z_arm_fault+0x1f4>)
    3206:	e7ef      	b.n	31e8 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3208:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    320a:	005b      	lsls	r3, r3, #1
    320c:	d5f5      	bpl.n	31fa <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    320e:	4b4e      	ldr	r3, [pc, #312]	; (3348 <z_arm_fault+0x1f8>)
    3210:	f107 0218 	add.w	r2, r7, #24
    3214:	e9c7 8306 	strd	r8, r3, [r7, #24]
    3218:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    321c:	4846      	ldr	r0, [pc, #280]	; (3338 <z_arm_fault+0x1e8>)
    321e:	f003 feb1 	bl	6f84 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3222:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    3224:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    3226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    322a:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    322c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3230:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    3234:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    3236:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    323a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    323e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    3240:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3244:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    3248:	f64d 7302 	movw	r3, #57090	; 0xdf02
    324c:	429a      	cmp	r2, r3
    324e:	d007      	beq.n	3260 <z_arm_fault+0x110>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3252:	b2db      	uxtb	r3, r3
    3254:	b383      	cbz	r3, 32b8 <z_arm_fault+0x168>
			reason = mem_manage_fault(esf, 1, recoverable);
    3256:	2001      	movs	r0, #1
    3258:	1df9      	adds	r1, r7, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    325a:	f7ff fdb9 	bl	2dd0 <mem_manage_fault.constprop.0>
    325e:	e03a      	b.n	32d6 <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    3260:	b088      	sub	sp, #32
    3262:	682b      	ldr	r3, [r5, #0]
    3264:	466a      	mov	r2, sp
    3266:	4939      	ldr	r1, [pc, #228]	; (334c <z_arm_fault+0x1fc>)
    3268:	4833      	ldr	r0, [pc, #204]	; (3338 <z_arm_fault+0x1e8>)
    326a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    326e:	2303      	movs	r3, #3
    3270:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3274:	f842 3f10 	str.w	r3, [r2, #16]!
    3278:	f003 fe84 	bl	6f84 <z_log_msg_static_create.constprop.0>
    327c:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    327e:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3280:	79fb      	ldrb	r3, [r7, #7]
    3282:	b9ab      	cbnz	r3, 32b0 <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3284:	2220      	movs	r2, #32
    3286:	4629      	mov	r1, r5
    3288:	f107 0008 	add.w	r0, r7, #8
    328c:	f003 feb6 	bl	6ffc <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3292:	2e00      	cmp	r6, #0
    3294:	d047      	beq.n	3326 <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3296:	f3c3 0208 	ubfx	r2, r3, #0, #9
    329a:	b922      	cbnz	r2, 32a6 <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    329c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    32a0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    32a4:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    32a6:	4620      	mov	r0, r4
    32a8:	f107 0108 	add.w	r1, r7, #8
    32ac:	f7ff fc24 	bl	2af8 <z_arm_fatal_error>
}
    32b0:	372c      	adds	r7, #44	; 0x2c
    32b2:	46bd      	mov	sp, r7
    32b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    32b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    32ba:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    32be:	d004      	beq.n	32ca <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    32c0:	2001      	movs	r0, #1
    32c2:	1df9      	adds	r1, r7, #7
		reason = bus_fault(esf, 0, recoverable);
    32c4:	f7ff fe20 	bl	2f08 <bus_fault.constprop.0>
    32c8:	e005      	b.n	32d6 <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    32ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    32cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    32d0:	d393      	bcc.n	31fa <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    32d2:	f7ff feb1 	bl	3038 <usage_fault.constprop.0>
    32d6:	4604      	mov	r4, r0
    32d8:	e7d2      	b.n	3280 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    32da:	2000      	movs	r0, #0
    32dc:	1df9      	adds	r1, r7, #7
    32de:	e7bc      	b.n	325a <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    32e0:	2000      	movs	r0, #0
    32e2:	1df9      	adds	r1, r7, #7
    32e4:	e7ee      	b.n	32c4 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    32e6:	4b1a      	ldr	r3, [pc, #104]	; (3350 <z_arm_fault+0x200>)
    32e8:	61fb      	str	r3, [r7, #28]
    32ea:	2302      	movs	r3, #2
    32ec:	61bb      	str	r3, [r7, #24]
    32ee:	e77d      	b.n	31ec <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    32f0:	4a18      	ldr	r2, [pc, #96]	; (3354 <z_arm_fault+0x204>)
    32f2:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    32f6:	46e8      	mov	r8, sp
    32f8:	b08a      	sub	sp, #40	; 0x28
    32fa:	4b17      	ldr	r3, [pc, #92]	; (3358 <z_arm_fault+0x208>)
    32fc:	bf18      	it	ne
    32fe:	4613      	movne	r3, r2
    3300:	466a      	mov	r2, sp
    3302:	4916      	ldr	r1, [pc, #88]	; (335c <z_arm_fault+0x20c>)
    3304:	3c10      	subs	r4, #16
    3306:	e9c2 1305 	strd	r1, r3, [r2, #20]
    330a:	f44f 7300 	mov.w	r3, #512	; 0x200
    330e:	8413      	strh	r3, [r2, #32]
    3310:	4b13      	ldr	r3, [pc, #76]	; (3360 <z_arm_fault+0x210>)
    3312:	61d4      	str	r4, [r2, #28]
    3314:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    3318:	4807      	ldr	r0, [pc, #28]	; (3338 <z_arm_fault+0x1e8>)
    331a:	f842 3f10 	str.w	r3, [r2, #16]!
    331e:	f003 fe31 	bl	6f84 <z_log_msg_static_create.constprop.0>
    3322:	46c5      	mov	sp, r8
}
    3324:	e769      	b.n	31fa <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3326:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    332a:	f023 0301 	bic.w	r3, r3, #1
    332e:	e7b9      	b.n	32a4 <z_arm_fault+0x154>
    3330:	e000ed00 	.word	0xe000ed00
    3334:	000085a4 	.word	0x000085a4
    3338:	00007ce4 	.word	0x00007ce4
    333c:	000085cf 	.word	0x000085cf
    3340:	000085e6 	.word	0x000085e6
    3344:	00008607 	.word	0x00008607
    3348:	00008615 	.word	0x00008615
    334c:	00008634 	.word	0x00008634
    3350:	00008650 	.word	0x00008650
    3354:	0000858b 	.word	0x0000858b
    3358:	00008576 	.word	0x00008576
    335c:	00008674 	.word	0x00008674
    3360:	01000004 	.word	0x01000004

00003364 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3364:	4b04      	ldr	r3, [pc, #16]	; (3378 <z_arm_fault_init+0x14>)
    3366:	695a      	ldr	r2, [r3, #20]
    3368:	f042 0210 	orr.w	r2, r2, #16
    336c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    336e:	695a      	ldr	r2, [r3, #20]
    3370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3374:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3376:	4770      	bx	lr
    3378:	e000ed00 	.word	0xe000ed00

0000337c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    337c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3380:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3384:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3386:	4672      	mov	r2, lr
	bl z_arm_fault
    3388:	f7ff fee2 	bl	3150 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    338c:	bd01      	pop	{r0, pc}
    338e:	bf00      	nop

00003390 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3390:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3392:	2120      	movs	r1, #32
    3394:	4803      	ldr	r0, [pc, #12]	; (33a4 <z_arm_interrupt_init+0x14>)
    3396:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3398:	3301      	adds	r3, #1
    339a:	2b41      	cmp	r3, #65	; 0x41
    339c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    33a0:	d1f9      	bne.n	3396 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    33a2:	4770      	bx	lr
    33a4:	e000e100 	.word	0xe000e100

000033a8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    33a8:	2000      	movs	r0, #0
    msr CONTROL, r0
    33aa:	f380 8814 	msr	CONTROL, r0
    isb
    33ae:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    33b2:	2000      	movs	r0, #0
    msr MSPLIM, r0
    33b4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    33b8:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    33bc:	f7fe fc6c 	bl	1c98 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    33c0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    33c2:	490e      	ldr	r1, [pc, #56]	; (33fc <__start+0x54>)
    str r0, [r1]
    33c4:	6008      	str	r0, [r1, #0]
    dsb
    33c6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    33ca:	480d      	ldr	r0, [pc, #52]	; (3400 <__start+0x58>)
    msr msp, r0
    33cc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    33d0:	f000 f83e 	bl	3450 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    33d4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    33d6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    33da:	480a      	ldr	r0, [pc, #40]	; (3404 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    33dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    33e0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    33e2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    33e6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    33ea:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    33ec:	4308      	orrs	r0, r1
    msr CONTROL, r0
    33ee:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    33f2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    33f6:	f7ff fc1b 	bl	2c30 <z_arm_prep_c>
    33fa:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    33fc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3400:	20002080 	.word	0x20002080
    ldr r0, =z_interrupt_stacks
    3404:	20001340 	.word	0x20001340

00003408 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3408:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    340c:	4905      	ldr	r1, [pc, #20]	; (3424 <sys_arch_reboot+0x1c>)
    340e:	4b06      	ldr	r3, [pc, #24]	; (3428 <sys_arch_reboot+0x20>)
    3410:	68ca      	ldr	r2, [r1, #12]
    3412:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3416:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3418:	60cb      	str	r3, [r1, #12]
    341a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    341e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3420:	e7fd      	b.n	341e <sys_arch_reboot+0x16>
    3422:	bf00      	nop
    3424:	e000ed00 	.word	0xe000ed00
    3428:	05fa0004 	.word	0x05fa0004

0000342c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    342c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    342e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3430:	4906      	ldr	r1, [pc, #24]	; (344c <z_arm_clear_arm_mpu_config+0x20>)
    3432:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    3436:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    343a:	4293      	cmp	r3, r2
    343c:	db00      	blt.n	3440 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    343e:	4770      	bx	lr
  mpu->RNR = rnr;
    3440:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    3444:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3448:	3301      	adds	r3, #1
    344a:	e7f6      	b.n	343a <z_arm_clear_arm_mpu_config+0xe>
    344c:	e000ed00 	.word	0xe000ed00

00003450 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3450:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3452:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3454:	2400      	movs	r4, #0
    3456:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    345a:	f7ff ffe7 	bl	342c <z_arm_clear_arm_mpu_config>
    345e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3460:	f04f 30ff 	mov.w	r0, #4294967295
    3464:	4a0c      	ldr	r2, [pc, #48]	; (3498 <z_arm_init_arch_hw_at_boot+0x48>)
    3466:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    346a:	3301      	adds	r3, #1
    346c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    346e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3472:	d1f8      	bne.n	3466 <z_arm_init_arch_hw_at_boot+0x16>
    3474:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3476:	f04f 30ff 	mov.w	r0, #4294967295
    347a:	4a07      	ldr	r2, [pc, #28]	; (3498 <z_arm_init_arch_hw_at_boot+0x48>)
    347c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3480:	3301      	adds	r3, #1
    3482:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3484:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3488:	d1f8      	bne.n	347c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    348a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    348c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3490:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3494:	bd10      	pop	{r4, pc}
    3496:	bf00      	nop
    3498:	e000e100 	.word	0xe000e100

0000349c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    349c:	4b08      	ldr	r3, [pc, #32]	; (34c0 <z_impl_k_thread_abort+0x24>)
    349e:	689b      	ldr	r3, [r3, #8]
    34a0:	4283      	cmp	r3, r0
    34a2:	d10b      	bne.n	34bc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    34a4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    34a8:	b143      	cbz	r3, 34bc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    34aa:	4b06      	ldr	r3, [pc, #24]	; (34c4 <z_impl_k_thread_abort+0x28>)
    34ac:	685a      	ldr	r2, [r3, #4]
    34ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    34b2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    34b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    34b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    34ba:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    34bc:	f002 bc80 	b.w	5dc0 <z_thread_abort>
    34c0:	20000e24 	.word	0x20000e24
    34c4:	e000ed00 	.word	0xe000ed00

000034c8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    34c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    34ca:	4c09      	ldr	r4, [pc, #36]	; (34f0 <z_arm_configure_static_mpu_regions+0x28>)
    34cc:	4a09      	ldr	r2, [pc, #36]	; (34f4 <z_arm_configure_static_mpu_regions+0x2c>)
    34ce:	4623      	mov	r3, r4
    34d0:	2101      	movs	r1, #1
    34d2:	4809      	ldr	r0, [pc, #36]	; (34f8 <z_arm_configure_static_mpu_regions+0x30>)
    34d4:	f000 f92a 	bl	372c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    34d8:	2300      	movs	r3, #0
    34da:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    34dc:	4b07      	ldr	r3, [pc, #28]	; (34fc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    34de:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    34e0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    34e2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    34e4:	9301      	str	r3, [sp, #4]
    34e6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    34e8:	f000 f92a 	bl	3740 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    34ec:	b004      	add	sp, #16
    34ee:	bd10      	pop	{r4, pc}
    34f0:	20016000 	.word	0x20016000
    34f4:	20000000 	.word	0x20000000
    34f8:	00007dcc 	.word	0x00007dcc
    34fc:	20000220 	.word	0x20000220

00003500 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    3500:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    3502:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    3504:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    3506:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    350a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    350e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3510:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    3512:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    3514:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    3518:	4905      	ldr	r1, [pc, #20]	; (3530 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    351a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    351e:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    3522:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    3526:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    352a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    352e:	bd10      	pop	{r4, pc}
    3530:	e000ed00 	.word	0xe000ed00

00003534 <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
    3534:	b580      	push	{r7, lr}
    3536:	af00      	add	r7, sp, #0
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3538:	b088      	sub	sp, #32
    353a:	466a      	mov	r2, sp
    353c:	4b07      	ldr	r3, [pc, #28]	; (355c <region_allocate_and_init.part.0+0x28>)
    353e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3542:	2303      	movs	r3, #3
    3544:	f842 3f10 	str.w	r3, [r2, #16]!
    3548:	2300      	movs	r3, #0
    354a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    354e:	4804      	ldr	r0, [pc, #16]	; (3560 <region_allocate_and_init.part.0+0x2c>)
    3550:	f7fe fe2a 	bl	21a8 <z_impl_z_log_msg_static_create>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
    3554:	f06f 0015 	mvn.w	r0, #21
    3558:	46bd      	mov	sp, r7
    355a:	bd80      	pop	{r7, pc}
    355c:	0000868b 	.word	0x0000868b
    3560:	00007cdc 	.word	0x00007cdc

00003564 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3568:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    356a:	4606      	mov	r6, r0
    356c:	f04f 0900 	mov.w	r9, #0
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3570:	b087      	sub	sp, #28
	MPU->RNR = rnr;
    3572:	4d5f      	ldr	r5, [pc, #380]	; (36f0 <mpu_configure_regions_and_partition.constprop.0+0x18c>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    3574:	af00      	add	r7, sp, #0
    3576:	6079      	str	r1, [r7, #4]
	for (i = 0; i < regions_num; i++) {
    3578:	687b      	ldr	r3, [r7, #4]
    357a:	4599      	cmp	r9, r3
    357c:	da35      	bge.n	35ea <mpu_configure_regions_and_partition.constprop.0+0x86>
		if (regions[i].size == 0U) {
    357e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    3582:	f1b8 0f00 	cmp.w	r8, #0
    3586:	d054      	beq.n	3632 <mpu_configure_regions_and_partition.constprop.0+0xce>
		&&
    3588:	f1b8 0f1f 	cmp.w	r8, #31
    358c:	d91b      	bls.n	35c6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		&&
    358e:	f018 0f1f 	tst.w	r8, #31
    3592:	d118      	bne.n	35c6 <mpu_configure_regions_and_partition.constprop.0+0x62>
		((part->start &
    3594:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    3598:	f01b 0f1f 	tst.w	fp, #31
    359c:	d113      	bne.n	35c6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    359e:	4658      	mov	r0, fp
    35a0:	f003 fcf3 	bl	6f8a <arm_cmse_mpu_region_get>
    35a4:	4682      	mov	sl, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    35a6:	eb08 000b 	add.w	r0, r8, fp
    35aa:	3801      	subs	r0, #1
    35ac:	f003 fced 	bl	6f8a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    35b0:	4582      	cmp	sl, r0
    35b2:	d01f      	beq.n	35f4 <mpu_configure_regions_and_partition.constprop.0+0x90>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    35b4:	f06f 0a15 	mvn.w	sl, #21

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    35b8:	466c      	mov	r4, sp
    35ba:	b088      	sub	sp, #32
    35bc:	466a      	mov	r2, sp
    35be:	494d      	ldr	r1, [pc, #308]	; (36f4 <mpu_configure_regions_and_partition.constprop.0+0x190>)
    35c0:	e9c2 1a05 	strd	r1, sl, [r2, #20]
    35c4:	e005      	b.n	35d2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    35c6:	466c      	mov	r4, sp
    35c8:	b088      	sub	sp, #32
    35ca:	466a      	mov	r2, sp
    35cc:	4b4a      	ldr	r3, [pc, #296]	; (36f8 <mpu_configure_regions_and_partition.constprop.0+0x194>)
    35ce:	e9c2 3905 	strd	r3, r9, [r2, #20]
			LOG_ERR("Invalid underlying region index %u",
    35d2:	2303      	movs	r3, #3
    35d4:	f842 3f10 	str.w	r3, [r2, #16]!
    35d8:	2300      	movs	r3, #0
    35da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    35de:	4847      	ldr	r0, [pc, #284]	; (36fc <mpu_configure_regions_and_partition.constprop.0+0x198>)
    35e0:	f7fe fde2 	bl	21a8 <z_impl_z_log_msg_static_create>
    35e4:	46a5      	mov	sp, r4
			return -EINVAL;
    35e6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    35ea:	4620      	mov	r0, r4
    35ec:	371c      	adds	r7, #28
    35ee:	46bd      	mov	sp, r7
    35f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    35f4:	f11a 0f16 	cmn.w	sl, #22
    35f8:	d0de      	beq.n	35b8 <mpu_configure_regions_and_partition.constprop.0+0x54>
    35fa:	4554      	cmp	r4, sl
    35fc:	dddc      	ble.n	35b8 <mpu_configure_regions_and_partition.constprop.0+0x54>
	MPU->RNR = rnr;
    35fe:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    3602:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    3606:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RLAR;
    360a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    360e:	f020 001f 	bic.w	r0, r0, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3612:	f042 081f 	orr.w	r8, r2, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3616:	e9d6 2100 	ldrd	r2, r1, [r6]
    361a:	4411      	add	r1, r2
		if ((regions[i].start == u_reg_base) &&
    361c:	4290      	cmp	r0, r2
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    361e:	f101 3bff 	add.w	fp, r1, #4294967295
		if ((regions[i].start == u_reg_base) &&
    3622:	d11e      	bne.n	3662 <mpu_configure_regions_and_partition.constprop.0+0xfe>
    3624:	45d8      	cmp	r8, fp
    3626:	d108      	bne.n	363a <mpu_configure_regions_and_partition.constprop.0+0xd6>
			mpu_configure_region(u_reg_index, &regions[i]);
    3628:	4631      	mov	r1, r6
    362a:	fa5f f08a 	uxtb.w	r0, sl
    362e:	f003 fcb5 	bl	6f9c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    3632:	f109 0901 	add.w	r9, r9, #1
    3636:	360c      	adds	r6, #12
    3638:	e79e      	b.n	3578 <mpu_configure_regions_and_partition.constprop.0+0x14>
	MPU->RNR = rnr;
    363a:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    363e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    3642:	f021 011f 	bic.w	r1, r1, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    3646:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    364a:	430b      	orrs	r3, r1
				mpu_configure_region(reg_index, &regions[i]);
    364c:	4631      	mov	r1, r6
	MPU->RBAR = rbar;
    364e:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    3652:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    3654:	f003 fca2 	bl	6f9c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3658:	f110 0f16 	cmn.w	r0, #22
    365c:	d0c3      	beq.n	35e6 <mpu_configure_regions_and_partition.constprop.0+0x82>
			reg_index++;
    365e:	1c44      	adds	r4, r0, #1
    3660:	e7e7      	b.n	3632 <mpu_configure_regions_and_partition.constprop.0+0xce>
				regions[i].start - 1);
    3662:	3a01      	subs	r2, #1
		} else if (reg_last == u_reg_last) {
    3664:	45d8      	cmp	r8, fp
				mpu_configure_region(reg_index, &regions[i]);
    3666:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
    3668:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    366c:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    3670:	d108      	bne.n	3684 <mpu_configure_regions_and_partition.constprop.0+0x120>
	return MPU->RLAR;
    3672:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    3676:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3678:	f003 031f 	and.w	r3, r3, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    367c:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    367e:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    3682:	e7e7      	b.n	3654 <mpu_configure_regions_and_partition.constprop.0+0xf0>
	return MPU->RLAR;
    3684:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3688:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    368c:	430a      	orrs	r2, r1
	MPU->RLAR = rlar;
    368e:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    3692:	4631      	mov	r1, r6
    3694:	f003 fc82 	bl	6f9c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    3698:	f110 0f16 	cmn.w	r0, #22
    369c:	d0a3      	beq.n	35e6 <mpu_configure_regions_and_partition.constprop.0+0x82>
	MPU->RNR = rnr;
    369e:	f8c5 a098 	str.w	sl, [r5, #152]	; 0x98
	return MPU->RBAR;
    36a2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    36a6:	7c3b      	ldrb	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    36a8:	f108 38ff 	add.w	r8, r8, #4294967295
	attr->rbar = mpu_get_rbar() &
    36ac:	f362 0304 	bfi	r3, r2, #0, #5
    36b0:	743b      	strb	r3, [r7, #16]
	return MPU->RLAR;
    36b2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    36b6:	7c3a      	ldrb	r2, [r7, #16]
    36b8:	085b      	lsrs	r3, r3, #1
    36ba:	f363 1247 	bfi	r2, r3, #5, #3
    36be:	743a      	strb	r2, [r7, #16]
			fill_region.base = regions[i].start +
    36c0:	e9d6 3200 	ldrd	r3, r2, [r6]
    36c4:	4413      	add	r3, r2
    36c6:	60bb      	str	r3, [r7, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    36c8:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    36cc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    36ce:	4443      	add	r3, r8
    36d0:	eba3 030b 	sub.w	r3, r3, fp
				region_allocate_and_init(reg_index,
    36d4:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
    36d6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    36da:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    36dc:	617b      	str	r3, [r7, #20]
    36de:	d902      	bls.n	36e6 <mpu_configure_regions_and_partition.constprop.0+0x182>
    36e0:	f7ff ff28 	bl	3534 <region_allocate_and_init.part.0>
			if (reg_index == -EINVAL) {
    36e4:	e7b8      	b.n	3658 <mpu_configure_regions_and_partition.constprop.0+0xf4>
	region_init(index, region_conf);
    36e6:	f107 0108 	add.w	r1, r7, #8
    36ea:	f7ff ff09 	bl	3500 <region_init>
    36ee:	e7b6      	b.n	365e <mpu_configure_regions_and_partition.constprop.0+0xfa>
    36f0:	e000ed00 	.word	0xe000ed00
    36f4:	000086d4 	.word	0x000086d4
    36f8:	000086b1 	.word	0x000086b1
    36fc:	00007cdc 	.word	0x00007cdc

00003700 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3700:	2205      	movs	r2, #5
    3702:	4b04      	ldr	r3, [pc, #16]	; (3714 <arm_core_mpu_enable+0x14>)
    3704:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3708:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    370c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3710:	4770      	bx	lr
    3712:	bf00      	nop
    3714:	e000ed00 	.word	0xe000ed00

00003718 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3718:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    371c:	2200      	movs	r2, #0
    371e:	4b02      	ldr	r3, [pc, #8]	; (3728 <arm_core_mpu_disable+0x10>)
    3720:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3724:	4770      	bx	lr
    3726:	bf00      	nop
    3728:	e000ed00 	.word	0xe000ed00

0000372c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    372c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    372e:	4c03      	ldr	r4, [pc, #12]	; (373c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3730:	7822      	ldrb	r2, [r4, #0]
    3732:	f7ff ff17 	bl	3564 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3736:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3738:	bd10      	pop	{r4, pc}
    373a:	bf00      	nop
    373c:	20001038 	.word	0x20001038

00003740 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    3740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3744:	4d29      	ldr	r5, [pc, #164]	; (37ec <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    3746:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    3748:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    374a:	f04f 0800 	mov.w	r8, #0
    374e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    3750:	4f27      	ldr	r7, [pc, #156]	; (37f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3752:	45d0      	cmp	r8, sl
    3754:	da1b      	bge.n	378e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    3756:	f8d6 9004 	ldr.w	r9, [r6, #4]
    375a:	f1b9 0f00 	cmp.w	r9, #0
    375e:	d03f      	beq.n	37e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    3760:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    3762:	4608      	mov	r0, r1
    3764:	9101      	str	r1, [sp, #4]
    3766:	f003 fc10 	bl	6f8a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    376a:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    376c:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    376e:	eb09 0001 	add.w	r0, r9, r1
    3772:	3801      	subs	r0, #1
    3774:	f003 fc09 	bl	6f8a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    3778:	4284      	cmp	r4, r0
    377a:	f04f 0214 	mov.w	r2, #20
    377e:	4b1d      	ldr	r3, [pc, #116]	; (37f4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    3780:	d008      	beq.n	3794 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    3782:	fb02 f308 	mul.w	r3, r2, r8
    3786:	f06f 0215 	mvn.w	r2, #21
    378a:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    378e:	b003      	add	sp, #12
    3790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    3794:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    3798:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    379a:	d0f8      	beq.n	378e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    379c:	7819      	ldrb	r1, [r3, #0]
    379e:	42a1      	cmp	r1, r4
    37a0:	ddf5      	ble.n	378e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    37a2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    37a6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    37aa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    37ae:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    37b2:	f100 0108 	add.w	r1, r0, #8
    37b6:	7b00      	ldrb	r0, [r0, #12]
    37b8:	f364 0004 	bfi	r0, r4, #0, #5
    37bc:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    37be:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    37c2:	790c      	ldrb	r4, [r1, #4]
    37c4:	0840      	lsrs	r0, r0, #1
    37c6:	f360 1447 	bfi	r4, r0, #5, #3
    37ca:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    37cc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    37d0:	f021 011f 	bic.w	r1, r1, #31
    37d4:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    37d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    37da:	f021 011f 	bic.w	r1, r1, #31
    37de:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    37e0:	f108 0801 	add.w	r8, r8, #1
    37e4:	3514      	adds	r5, #20
    37e6:	360c      	adds	r6, #12
    37e8:	e7b3      	b.n	3752 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    37ea:	bf00      	nop
    37ec:	20000d88 	.word	0x20000d88
    37f0:	e000ed00 	.word	0xe000ed00
    37f4:	20001038 	.word	0x20001038

000037f8 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    37f8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    37fa:	4d0e      	ldr	r5, [pc, #56]	; (3834 <z_arm_mpu_init+0x3c>)
    37fc:	682c      	ldr	r4, [r5, #0]
    37fe:	2c10      	cmp	r4, #16
    3800:	d815      	bhi.n	382e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3802:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    3804:	f7ff ff88 	bl	3718 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    3808:	4b0b      	ldr	r3, [pc, #44]	; (3838 <z_arm_mpu_init+0x40>)
    380a:	4a0c      	ldr	r2, [pc, #48]	; (383c <z_arm_mpu_init+0x44>)
    380c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3810:	4284      	cmp	r4, r0
    3812:	d105      	bne.n	3820 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3814:	4b0a      	ldr	r3, [pc, #40]	; (3840 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3816:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    3818:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    381a:	f7ff ff71 	bl	3700 <arm_core_mpu_enable>
}
    381e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    3820:	6869      	ldr	r1, [r5, #4]
    3822:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    3826:	f7ff fe6b 	bl	3500 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    382a:	3001      	adds	r0, #1
    382c:	e7f0      	b.n	3810 <z_arm_mpu_init+0x18>
		return -1;
    382e:	f04f 30ff 	mov.w	r0, #4294967295
    3832:	e7f4      	b.n	381e <z_arm_mpu_init+0x26>
    3834:	00007dd8 	.word	0x00007dd8
    3838:	e000ed00 	.word	0xe000ed00
    383c:	0044ffaa 	.word	0x0044ffaa
    3840:	20001038 	.word	0x20001038

00003844 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3844:	4b01      	ldr	r3, [pc, #4]	; (384c <__stdout_hook_install+0x8>)
    3846:	6018      	str	r0, [r3, #0]
}
    3848:	4770      	bx	lr
    384a:	bf00      	nop
    384c:	2000002c 	.word	0x2000002c

00003850 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3850:	4b08      	ldr	r3, [pc, #32]	; (3874 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3852:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3854:	1ac3      	subs	r3, r0, r3
{
    3856:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3858:	4907      	ldr	r1, [pc, #28]	; (3878 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    385a:	109b      	asrs	r3, r3, #2
{
    385c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    385e:	4359      	muls	r1, r3
    3860:	2240      	movs	r2, #64	; 0x40
    3862:	4806      	ldr	r0, [pc, #24]	; (387c <onoff_stop+0x2c>)
    3864:	f003 fbfd 	bl	7062 <stop>
	notify(mgr, res);
    3868:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    386a:	4601      	mov	r1, r0
	notify(mgr, res);
    386c:	4620      	mov	r0, r4
}
    386e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3872:	4718      	bx	r3
    3874:	20000db0 	.word	0x20000db0
    3878:	b6db6db7 	.word	0xb6db6db7
    387c:	000079f8 	.word	0x000079f8

00003880 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3880:	2340      	movs	r3, #64	; 0x40
{
    3882:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3884:	4c0b      	ldr	r4, [pc, #44]	; (38b4 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3886:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    3888:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    388a:	460b      	mov	r3, r1
{
    388c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    388e:	490a      	ldr	r1, [pc, #40]	; (38b8 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    3890:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3892:	4361      	muls	r1, r4
{
    3894:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3896:	4a09      	ldr	r2, [pc, #36]	; (38bc <onoff_start+0x3c>)
    3898:	4809      	ldr	r0, [pc, #36]	; (38c0 <onoff_start+0x40>)
    389a:	f003 fc0e 	bl	70ba <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    389e:	1e01      	subs	r1, r0, #0
    38a0:	da05      	bge.n	38ae <onoff_start+0x2e>
		notify(mgr, err);
    38a2:	4630      	mov	r0, r6
    38a4:	462b      	mov	r3, r5
	}
}
    38a6:	b002      	add	sp, #8
    38a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    38ac:	4718      	bx	r3
}
    38ae:	b002      	add	sp, #8
    38b0:	bd70      	pop	{r4, r5, r6, pc}
    38b2:	bf00      	nop
    38b4:	20000db0 	.word	0x20000db0
    38b8:	b6db6db7 	.word	0xb6db6db7
    38bc:	00007125 	.word	0x00007125
    38c0:	000079f8 	.word	0x000079f8

000038c4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    38c4:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38c6:	2200      	movs	r2, #0
    38c8:	2101      	movs	r1, #1
{
    38ca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38cc:	2005      	movs	r0, #5
    38ce:	f7ff f995 	bl	2bfc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    38d2:	480f      	ldr	r0, [pc, #60]	; (3910 <clk_init+0x4c>)
    38d4:	f001 f888 	bl	49e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    38d8:	4b0e      	ldr	r3, [pc, #56]	; (3914 <clk_init+0x50>)
    38da:	4298      	cmp	r0, r3
    38dc:	d115      	bne.n	390a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    38de:	f003 fe43 	bl	7568 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    38e2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    38e4:	490c      	ldr	r1, [pc, #48]	; (3918 <clk_init+0x54>)
    38e6:	4630      	mov	r0, r6
    38e8:	f002 ffb4 	bl	6854 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    38ec:	2800      	cmp	r0, #0
    38ee:	db0b      	blt.n	3908 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    38f0:	2501      	movs	r5, #1
    38f2:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    38f4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    38f6:	4908      	ldr	r1, [pc, #32]	; (3918 <clk_init+0x54>)
    38f8:	f104 001c 	add.w	r0, r4, #28
    38fc:	f002 ffaa 	bl	6854 <onoff_manager_init>
		if (err < 0) {
    3900:	2800      	cmp	r0, #0
    3902:	db01      	blt.n	3908 <clk_init+0x44>
	}

	return 0;
    3904:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3906:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    3908:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    390a:	f06f 0004 	mvn.w	r0, #4
    390e:	e7fb      	b.n	3908 <clk_init+0x44>
    3910:	00003951 	.word	0x00003951
    3914:	0bad0000 	.word	0x0bad0000
    3918:	00007e00 	.word	0x00007e00

0000391c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    391c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    391e:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    3920:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    3922:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3924:	434b      	muls	r3, r1
    3926:	4808      	ldr	r0, [pc, #32]	; (3948 <clkstarted_handle.constprop.0+0x2c>)
    3928:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    392a:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    392c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3930:	4418      	add	r0, r3
	sub_data->cb = NULL;
    3932:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3934:	f003 fb82 	bl	703c <set_on_state>
	if (callback) {
    3938:	b12d      	cbz	r5, 3946 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    393a:	4632      	mov	r2, r6
    393c:	462b      	mov	r3, r5
}
    393e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3942:	4802      	ldr	r0, [pc, #8]	; (394c <clkstarted_handle.constprop.0+0x30>)
    3944:	4718      	bx	r3
}
    3946:	bd70      	pop	{r4, r5, r6, pc}
    3948:	20000db0 	.word	0x20000db0
    394c:	000079f8 	.word	0x000079f8

00003950 <clock_event_handler>:
	switch (event) {
    3950:	b110      	cbz	r0, 3958 <clock_event_handler+0x8>
    3952:	2801      	cmp	r0, #1
    3954:	d004      	beq.n	3960 <clock_event_handler+0x10>
    3956:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3958:	4b03      	ldr	r3, [pc, #12]	; (3968 <clock_event_handler+0x18>)
    395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    395c:	075b      	lsls	r3, r3, #29
    395e:	d101      	bne.n	3964 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3960:	f7ff bfdc 	b.w	391c <clkstarted_handle.constprop.0>
}
    3964:	4770      	bx	lr
    3966:	bf00      	nop
    3968:	20000db0 	.word	0x20000db0

0000396c <generic_hfclk_start>:
{
    396c:	b508      	push	{r3, lr}
	__asm__ volatile(
    396e:	f04f 0320 	mov.w	r3, #32
    3972:	f3ef 8111 	mrs	r1, BASEPRI
    3976:	f383 8812 	msr	BASEPRI_MAX, r3
    397a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    397e:	4a12      	ldr	r2, [pc, #72]	; (39c8 <generic_hfclk_start+0x5c>)
    3980:	6813      	ldr	r3, [r2, #0]
    3982:	f043 0002 	orr.w	r0, r3, #2
    3986:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3988:	07da      	lsls	r2, r3, #31
    398a:	d408      	bmi.n	399e <generic_hfclk_start+0x32>
	__asm__ volatile(
    398c:	f381 8811 	msr	BASEPRI, r1
    3990:	f3bf 8f6f 	isb	sy
}
    3994:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3998:	2001      	movs	r0, #1
    399a:	f003 bdf3 	b.w	7584 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    399e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    39a2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    39a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    39aa:	07d3      	lsls	r3, r2, #31
    39ac:	d5ee      	bpl.n	398c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    39ae:	4807      	ldr	r0, [pc, #28]	; (39cc <generic_hfclk_start+0x60>)
    39b0:	f003 fb44 	bl	703c <set_on_state>
    39b4:	f381 8811 	msr	BASEPRI, r1
    39b8:	f3bf 8f6f 	isb	sy
}
    39bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    39c0:	2000      	movs	r0, #0
    39c2:	f7ff bfab 	b.w	391c <clkstarted_handle.constprop.0>
    39c6:	bf00      	nop
    39c8:	20000e00 	.word	0x20000e00
    39cc:	20000df0 	.word	0x20000df0

000039d0 <api_blocking_start>:
{
    39d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39d2:	2200      	movs	r2, #0
    39d4:	2301      	movs	r3, #1
    39d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39da:	466b      	mov	r3, sp
    39dc:	4a08      	ldr	r2, [pc, #32]	; (3a00 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    39de:	f8cd d000 	str.w	sp, [sp]
    39e2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    39e6:	f003 fb96 	bl	7116 <api_start>
	if (err < 0) {
    39ea:	2800      	cmp	r0, #0
    39ec:	db05      	blt.n	39fa <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    39ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    39f2:	2300      	movs	r3, #0
    39f4:	4668      	mov	r0, sp
    39f6:	f001 fed3 	bl	57a0 <z_impl_k_sem_take>
}
    39fa:	b005      	add	sp, #20
    39fc:	f85d fb04 	ldr.w	pc, [sp], #4
    3a00:	00007143 	.word	0x00007143

00003a04 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a04:	4b07      	ldr	r3, [pc, #28]	; (3a24 <generic_hfclk_stop+0x20>)
    3a06:	e8d3 2fef 	ldaex	r2, [r3]
    3a0a:	f022 0102 	bic.w	r1, r2, #2
    3a0e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    3a12:	2800      	cmp	r0, #0
    3a14:	d1f7      	bne.n	3a06 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3a16:	07d3      	lsls	r3, r2, #31
    3a18:	d402      	bmi.n	3a20 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3a1a:	2001      	movs	r0, #1
    3a1c:	f003 bdf2 	b.w	7604 <nrfx_clock_stop>
}
    3a20:	4770      	bx	lr
    3a22:	bf00      	nop
    3a24:	20000e00 	.word	0x20000e00

00003a28 <z_nrf_clock_control_lf_on>:
{
    3a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3a2c:	2201      	movs	r2, #1
    3a2e:	4607      	mov	r7, r0
    3a30:	4937      	ldr	r1, [pc, #220]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3a32:	e8d1 3fef 	ldaex	r3, [r1]
    3a36:	e8c1 2fe0 	stlex	r0, r2, [r1]
    3a3a:	2800      	cmp	r0, #0
    3a3c:	d1f9      	bne.n	3a32 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    3a3e:	b933      	cbnz	r3, 3a4e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3a40:	4934      	ldr	r1, [pc, #208]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
		err = onoff_request(mgr, &cli);
    3a42:	4835      	ldr	r0, [pc, #212]	; (3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>)
    3a44:	604b      	str	r3, [r1, #4]
    3a46:	60cb      	str	r3, [r1, #12]
    3a48:	608a      	str	r2, [r1, #8]
    3a4a:	f002 ff16 	bl	687a <onoff_request>
	switch (start_mode) {
    3a4e:	1e7b      	subs	r3, r7, #1
    3a50:	2b01      	cmp	r3, #1
    3a52:	d82b      	bhi.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3a54:	2f01      	cmp	r7, #1
    3a56:	d107      	bne.n	3a68 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3a58:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a5c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3a60:	f003 0303 	and.w	r3, r3, #3
    3a64:	2b02      	cmp	r3, #2
    3a66:	d021      	beq.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3a68:	f003 fe2b 	bl	76c2 <k_is_in_isr>
    3a6c:	4605      	mov	r5, r0
    3a6e:	b9f8      	cbnz	r0, 3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
	return !z_sys_post_kernel;
    3a70:	4b2a      	ldr	r3, [pc, #168]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3a72:	781b      	ldrb	r3, [r3, #0]
    3a74:	b1e3      	cbz	r3, 3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    p_reg->INTENCLR = mask;
    3a76:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a7a:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3a7c:	4606      	mov	r6, r0
    3a7e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a82:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a86:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>
    3a8a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a8e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    3a92:	03d2      	lsls	r2, r2, #15
    3a94:	d516      	bpl.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3a96:	f003 0303 	and.w	r3, r3, #3
    3a9a:	2b02      	cmp	r3, #2
    3a9c:	d001      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3a9e:	2f01      	cmp	r7, #1
    3aa0:	d110      	bne.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
	if (isr_mode) {
    3aa2:	b375      	cbz	r5, 3b02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6a>
    3aa4:	f386 8811 	msr	BASEPRI, r6
    3aa8:	f3bf 8f6f 	isb	sy
}
    3aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    3ab0:	f04f 0320 	mov.w	r3, #32
    3ab4:	f3ef 8611 	mrs	r6, BASEPRI
    3ab8:	f383 8812 	msr	BASEPRI_MAX, r3
    3abc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3ac0:	2501      	movs	r5, #1
    3ac2:	e7de      	b.n	3a82 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3ac4:	b1c5      	cbz	r5, 3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3ac6:	4630      	mov	r0, r6
    3ac8:	f7ff f80c 	bl	2ae4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3acc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3ad0:	b2db      	uxtb	r3, r3
    3ad2:	2b01      	cmp	r3, #1
    3ad4:	d1d9      	bne.n	3a8a <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3ad6:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3ada:	2a00      	cmp	r2, #0
    3adc:	d0d5      	beq.n	3a8a <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ade:	2200      	movs	r2, #0
    3ae0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3ae4:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3ae8:	2202      	movs	r2, #2
    3aea:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    3aee:	2220      	movs	r2, #32
    3af0:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3af4:	60a3      	str	r3, [r4, #8]
}
    3af6:	e7c8      	b.n	3a8a <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    3af8:	2100      	movs	r1, #0
    3afa:	2021      	movs	r0, #33	; 0x21
    3afc:	f002 f940 	bl	5d80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3b00:	e7e4      	b.n	3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    p_reg->INTENSET = mask;
    3b02:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3b06:	2202      	movs	r2, #2
    3b08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3b0c:	e7ce      	b.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3b0e:	bf00      	nop
    3b10:	20000dac 	.word	0x20000dac
    3b14:	20000d9c 	.word	0x20000d9c
    3b18:	20000dcc 	.word	0x20000dcc
    3b1c:	2000103d 	.word	0x2000103d
    3b20:	e000e100 	.word	0xe000e100

00003b24 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3b24:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    3b26:	4807      	ldr	r0, [pc, #28]	; (3b44 <uart_console_init+0x20>)
    3b28:	f003 fd6f 	bl	760a <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    3b2c:	b138      	cbz	r0, 3b3e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    3b2e:	4806      	ldr	r0, [pc, #24]	; (3b48 <uart_console_init+0x24>)
    3b30:	f7ff fe88 	bl	3844 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3b34:	4804      	ldr	r0, [pc, #16]	; (3b48 <uart_console_init+0x24>)
    3b36:	f7fd fb85 	bl	1244 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3b3a:	2000      	movs	r0, #0
}
    3b3c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    3b3e:	f06f 0012 	mvn.w	r0, #18
    3b42:	e7fb      	b.n	3b3c <uart_console_init+0x18>
    3b44:	00007a40 	.word	0x00007a40
    3b48:	00003b4d 	.word	0x00003b4d

00003b4c <console_out>:
	if ('\n' == c) {
    3b4c:	280a      	cmp	r0, #10
{
    3b4e:	b538      	push	{r3, r4, r5, lr}
    3b50:	4604      	mov	r4, r0
    3b52:	4d07      	ldr	r5, [pc, #28]	; (3b70 <console_out+0x24>)
	if ('\n' == c) {
    3b54:	d104      	bne.n	3b60 <console_out+0x14>
    3b56:	68ab      	ldr	r3, [r5, #8]
    3b58:	210d      	movs	r1, #13
    3b5a:	4628      	mov	r0, r5
    3b5c:	685b      	ldr	r3, [r3, #4]
    3b5e:	4798      	blx	r3
    3b60:	68ab      	ldr	r3, [r5, #8]
    3b62:	4803      	ldr	r0, [pc, #12]	; (3b70 <console_out+0x24>)
    3b64:	685b      	ldr	r3, [r3, #4]
    3b66:	b2e1      	uxtb	r1, r4
    3b68:	4798      	blx	r3
}
    3b6a:	4620      	mov	r0, r4
    3b6c:	bd38      	pop	{r3, r4, r5, pc}
    3b6e:	bf00      	nop
    3b70:	00007a40 	.word	0x00007a40

00003b74 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3b74:	b530      	push	{r4, r5, lr}
	return port->config;
    3b76:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b78:	f001 041f 	and.w	r4, r1, #31
    3b7c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3b7e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    3b82:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b84:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3b88:	d105      	bne.n	3b96 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3b8a:	4620      	mov	r0, r4
    3b8c:	f001 f9c0 	bl	4f10 <nrfx_gpiote_trigger_disable>

		return 0;
    3b90:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    3b92:	b005      	add	sp, #20
    3b94:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b96:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3b98:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b9c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3ba0:	d114      	bne.n	3bcc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3ba2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3ba6:	bf0c      	ite	eq
    3ba8:	2304      	moveq	r3, #4
    3baa:	2305      	movne	r3, #5
    3bac:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3bb0:	2300      	movs	r3, #0
    3bb2:	4620      	mov	r0, r4
    3bb4:	4619      	mov	r1, r3
    3bb6:	aa02      	add	r2, sp, #8
    3bb8:	f000 ffe0 	bl	4b7c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3bbc:	4b1c      	ldr	r3, [pc, #112]	; (3c30 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    3bbe:	4298      	cmp	r0, r3
    3bc0:	d133      	bne.n	3c2a <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3bc2:	2101      	movs	r1, #1
    3bc4:	4620      	mov	r0, r4
    3bc6:	f001 f95f 	bl	4e88 <nrfx_gpiote_trigger_enable>
	return 0;
    3bca:	e7e1      	b.n	3b90 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3bcc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3bd0:	d020      	beq.n	3c14 <gpio_nrfx_pin_interrupt_configure+0xa0>
    3bd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3bd6:	bf14      	ite	ne
    3bd8:	2301      	movne	r3, #1
    3bda:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3bdc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3be0:	6883      	ldr	r3, [r0, #8]
    3be2:	40cb      	lsrs	r3, r1
    3be4:	07d9      	lsls	r1, r3, #31
    3be6:	d4e3      	bmi.n	3bb0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    3be8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3bec:	d1e0      	bne.n	3bb0 <gpio_nrfx_pin_interrupt_configure+0x3c>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3bee:	4a11      	ldr	r2, [pc, #68]	; (3c34 <gpio_nrfx_pin_interrupt_configure+0xc0>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3bf0:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3bf4:	3380      	adds	r3, #128	; 0x80
    3bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3bfa:	07db      	lsls	r3, r3, #31
    3bfc:	d4d8      	bmi.n	3bb0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3bfe:	f10d 0507 	add.w	r5, sp, #7
    3c02:	4629      	mov	r1, r5
    3c04:	4620      	mov	r0, r4
    3c06:	f001 f8eb 	bl	4de0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3c0a:	4b0b      	ldr	r3, [pc, #44]	; (3c38 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3c0c:	4298      	cmp	r0, r3
    3c0e:	d003      	beq.n	3c18 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    3c10:	9503      	str	r5, [sp, #12]
    3c12:	e7cd      	b.n	3bb0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3c14:	2303      	movs	r3, #3
    3c16:	e7e1      	b.n	3bdc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3c18:	4628      	mov	r0, r5
    3c1a:	f001 f92f 	bl	4e7c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3c1e:	4b04      	ldr	r3, [pc, #16]	; (3c30 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    3c20:	4298      	cmp	r0, r3
    3c22:	d0f5      	beq.n	3c10 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    3c24:	f06f 000b 	mvn.w	r0, #11
    3c28:	e7b3      	b.n	3b92 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3c2a:	f06f 0015 	mvn.w	r0, #21
    3c2e:	e7b0      	b.n	3b92 <gpio_nrfx_pin_interrupt_configure+0x1e>
    3c30:	0bad0000 	.word	0x0bad0000
    3c34:	50842500 	.word	0x50842500
    3c38:	0bad0004 	.word	0x0bad0004

00003c3c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3c3c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3c3e:	f001 f90d 	bl	4e5c <nrfx_gpiote_is_init>
    3c42:	4604      	mov	r4, r0
    3c44:	b968      	cbnz	r0, 3c62 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3c46:	f001 f8e1 	bl	4e0c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3c4a:	4b08      	ldr	r3, [pc, #32]	; (3c6c <gpio_nrfx_init+0x30>)
    3c4c:	4298      	cmp	r0, r3
    3c4e:	d10a      	bne.n	3c66 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3c50:	4621      	mov	r1, r4
    3c52:	4807      	ldr	r0, [pc, #28]	; (3c70 <gpio_nrfx_init+0x34>)
    3c54:	f001 f8be 	bl	4dd4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3c58:	4622      	mov	r2, r4
    3c5a:	2105      	movs	r1, #5
    3c5c:	200d      	movs	r0, #13
    3c5e:	f7fe ffcd 	bl	2bfc <z_arm_irq_priority_set>
		return 0;
    3c62:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3c64:	bd10      	pop	{r4, pc}
		return -EIO;
    3c66:	f06f 0004 	mvn.w	r0, #4
    3c6a:	e7fb      	b.n	3c64 <gpio_nrfx_init+0x28>
    3c6c:	0bad0000 	.word	0x0bad0000
    3c70:	00003c75 	.word	0x00003c75

00003c74 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c74:	0943      	lsrs	r3, r0, #5
{
    3c76:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3c78:	d107      	bne.n	3c8a <nrfx_gpio_handler+0x16>
	return list->head;
    3c7a:	4b0b      	ldr	r3, [pc, #44]	; (3ca8 <nrfx_gpio_handler+0x34>)
    3c7c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c7e:	b121      	cbz	r1, 3c8a <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    3c80:	2501      	movs	r5, #1
	return node->next;
    3c82:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3c84:	4e09      	ldr	r6, [pc, #36]	; (3cac <nrfx_gpio_handler+0x38>)
    3c86:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c88:	b901      	cbnz	r1, 3c8c <nrfx_gpio_handler+0x18>
}
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3c8c:	688a      	ldr	r2, [r1, #8]
    3c8e:	402a      	ands	r2, r5
    3c90:	d002      	beq.n	3c98 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    3c92:	4630      	mov	r0, r6
    3c94:	684b      	ldr	r3, [r1, #4]
    3c96:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3c98:	b11c      	cbz	r4, 3ca2 <nrfx_gpio_handler+0x2e>
    3c9a:	6823      	ldr	r3, [r4, #0]
    3c9c:	4621      	mov	r1, r4
    3c9e:	461c      	mov	r4, r3
    3ca0:	e7f2      	b.n	3c88 <nrfx_gpio_handler+0x14>
    3ca2:	4623      	mov	r3, r4
    3ca4:	e7fa      	b.n	3c9c <nrfx_gpio_handler+0x28>
    3ca6:	bf00      	nop
    3ca8:	20000e04 	.word	0x20000e04
    3cac:	00007a10 	.word	0x00007a10

00003cb0 <gpio_nrfx_pin_configure>:
{
    3cb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3cb4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3cb6:	f001 051f 	and.w	r5, r1, #31
    3cba:	7b3b      	ldrb	r3, [r7, #12]
{
    3cbc:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3cbe:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3cc2:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3cc4:	4628      	mov	r0, r5
    3cc6:	f10d 0103 	add.w	r1, sp, #3
    3cca:	f001 f889 	bl	4de0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3cce:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3cd2:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3cd4:	d10b      	bne.n	3cee <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3cd6:	4628      	mov	r0, r5
    3cd8:	f001 f942 	bl	4f60 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3cdc:	4b3c      	ldr	r3, [pc, #240]	; (3dd0 <gpio_nrfx_pin_configure+0x120>)
    3cde:	4598      	cmp	r8, r3
    3ce0:	d103      	bne.n	3cea <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    3ce2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3ce6:	f001 f8c3 	bl	4e70 <nrfx_gpiote_channel_free>
		return 0;
    3cea:	2000      	movs	r0, #0
    3cec:	e00c      	b.n	3d08 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3cee:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3cf0:	4628      	mov	r0, r5
    3cf2:	4619      	mov	r1, r3
    3cf4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    3cf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3cfa:	f000 ff3f 	bl	4b7c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3cfe:	4b34      	ldr	r3, [pc, #208]	; (3dd0 <gpio_nrfx_pin_configure+0x120>)
    3d00:	4298      	cmp	r0, r3
    3d02:	d004      	beq.n	3d0e <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3d04:	f06f 0015 	mvn.w	r0, #21
}
    3d08:	b004      	add	sp, #16
    3d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3d0e:	4580      	cmp	r8, r0
    3d10:	d103      	bne.n	3d1a <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    3d12:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3d16:	f001 f8ab 	bl	4e70 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3d1a:	03a3      	lsls	r3, r4, #14
    3d1c:	d549      	bpl.n	3db2 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3d1e:	f240 3306 	movw	r3, #774	; 0x306
    3d22:	4023      	ands	r3, r4
    3d24:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3d28:	d019      	beq.n	3d5e <gpio_nrfx_pin_configure+0xae>
    3d2a:	d80c      	bhi.n	3d46 <gpio_nrfx_pin_configure+0x96>
    3d2c:	2b06      	cmp	r3, #6
    3d2e:	d017      	beq.n	3d60 <gpio_nrfx_pin_configure+0xb0>
    3d30:	d804      	bhi.n	3d3c <gpio_nrfx_pin_configure+0x8c>
    3d32:	b1ab      	cbz	r3, 3d60 <gpio_nrfx_pin_configure+0xb0>
    3d34:	2b02      	cmp	r3, #2
    3d36:	d1e5      	bne.n	3d04 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3d38:	2304      	movs	r3, #4
    3d3a:	e011      	b.n	3d60 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3d40:	d1e0      	bne.n	3d04 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    3d42:	2301      	movs	r3, #1
    3d44:	e00c      	b.n	3d60 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3d46:	f240 2202 	movw	r2, #514	; 0x202
    3d4a:	4293      	cmp	r3, r2
    3d4c:	d026      	beq.n	3d9c <gpio_nrfx_pin_configure+0xec>
    3d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3d52:	d025      	beq.n	3da0 <gpio_nrfx_pin_configure+0xf0>
    3d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3d58:	d1d4      	bne.n	3d04 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3d5a:	2302      	movs	r3, #2
    3d5c:	e000      	b.n	3d60 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3d5e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3d60:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3d64:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3d68:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3d6c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3d6e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    3d72:	bf4c      	ite	mi
    3d74:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3d76:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3d7a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3d7c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3d80:	d510      	bpl.n	3da4 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3d82:	2301      	movs	r3, #1
    3d84:	687a      	ldr	r2, [r7, #4]
    3d86:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3d88:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3d8a:	2200      	movs	r2, #0
    3d8c:	4628      	mov	r0, r5
    3d8e:	a901      	add	r1, sp, #4
    3d90:	f000 ffa0 	bl	4cd4 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3d94:	4b0e      	ldr	r3, [pc, #56]	; (3dd0 <gpio_nrfx_pin_configure+0x120>)
    3d96:	4298      	cmp	r0, r3
    3d98:	d0a7      	beq.n	3cea <gpio_nrfx_pin_configure+0x3a>
    3d9a:	e7b3      	b.n	3d04 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3d9c:	2305      	movs	r3, #5
    3d9e:	e7df      	b.n	3d60 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3da0:	2303      	movs	r3, #3
    3da2:	e7dd      	b.n	3d60 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3da4:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3da6:	bf41      	itttt	mi
    3da8:	2301      	movmi	r3, #1
    3daa:	687a      	ldrmi	r2, [r7, #4]
    3dac:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3dae:	60d3      	strmi	r3, [r2, #12]
}
    3db0:	e7eb      	b.n	3d8a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    3db2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3db4:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3db8:	bf4c      	ite	mi
    3dba:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    3dbc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3dc0:	461a      	mov	r2, r3
    3dc2:	4628      	mov	r0, r5
    3dc4:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    3dc6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3dca:	f000 fed7 	bl	4b7c <nrfx_gpiote_input_configure>
    3dce:	e7e1      	b.n	3d94 <gpio_nrfx_pin_configure+0xe4>
    3dd0:	0bad0000 	.word	0x0bad0000

00003dd4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3dd6:	794b      	ldrb	r3, [r1, #5]
    3dd8:	2b01      	cmp	r3, #1
    3dda:	d026      	beq.n	3e2a <uarte_nrfx_configure+0x56>
    3ddc:	2b03      	cmp	r3, #3
    3dde:	d121      	bne.n	3e24 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3de0:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3de2:	798b      	ldrb	r3, [r1, #6]
    3de4:	2b03      	cmp	r3, #3
    3de6:	d11d      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3de8:	79ce      	ldrb	r6, [r1, #7]
    3dea:	b10e      	cbz	r6, 3df0 <uarte_nrfx_configure+0x1c>
    3dec:	2e01      	cmp	r6, #1
    3dee:	d119      	bne.n	3e24 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3df0:	790a      	ldrb	r2, [r1, #4]
    3df2:	b112      	cbz	r2, 3dfa <uarte_nrfx_configure+0x26>
    3df4:	2a02      	cmp	r2, #2
    3df6:	d115      	bne.n	3e24 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3df8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3dfa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3dfc:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    3dfe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3e02:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    3e04:	d067      	beq.n	3ed6 <uarte_nrfx_configure+0x102>
    3e06:	d82d      	bhi.n	3e64 <uarte_nrfx_configure+0x90>
    3e08:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3e0c:	d066      	beq.n	3edc <uarte_nrfx_configure+0x108>
    3e0e:	d816      	bhi.n	3e3e <uarte_nrfx_configure+0x6a>
    3e10:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3e14:	d064      	beq.n	3ee0 <uarte_nrfx_configure+0x10c>
    3e16:	d80a      	bhi.n	3e2e <uarte_nrfx_configure+0x5a>
    3e18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3e1c:	d063      	beq.n	3ee6 <uarte_nrfx_configure+0x112>
    3e1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3e22:	d063      	beq.n	3eec <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    3e24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3e28:	e054      	b.n	3ed4 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    3e2a:	2500      	movs	r5, #0
    3e2c:	e7d9      	b.n	3de2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3e2e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3e32:	d05e      	beq.n	3ef2 <uarte_nrfx_configure+0x11e>
    3e34:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3e38:	d1f4      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3e3a:	4b38      	ldr	r3, [pc, #224]	; (3f1c <uarte_nrfx_configure+0x148>)
    3e3c:	e03c      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3e3e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3e42:	d059      	beq.n	3ef8 <uarte_nrfx_configure+0x124>
    3e44:	d807      	bhi.n	3e56 <uarte_nrfx_configure+0x82>
    3e46:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3e4a:	d057      	beq.n	3efc <uarte_nrfx_configure+0x128>
    3e4c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3e50:	d1e8      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3e52:	4b33      	ldr	r3, [pc, #204]	; (3f20 <uarte_nrfx_configure+0x14c>)
    3e54:	e030      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3e56:	f647 2412 	movw	r4, #31250	; 0x7a12
    3e5a:	42a3      	cmp	r3, r4
    3e5c:	d1e2      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3e5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3e62:	e029      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3e64:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3e68:	d04a      	beq.n	3f00 <uarte_nrfx_configure+0x12c>
    3e6a:	d813      	bhi.n	3e94 <uarte_nrfx_configure+0xc0>
    3e6c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3e70:	d049      	beq.n	3f06 <uarte_nrfx_configure+0x132>
    3e72:	d809      	bhi.n	3e88 <uarte_nrfx_configure+0xb4>
    3e74:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    3e78:	42a3      	cmp	r3, r4
    3e7a:	d046      	beq.n	3f0a <uarte_nrfx_configure+0x136>
    3e7c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3e80:	d1d0      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3e82:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3e86:	e017      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3e88:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3e8c:	d1ca      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3e8e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3e92:	e011      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3e94:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3e98:	d03a      	beq.n	3f10 <uarte_nrfx_configure+0x13c>
    3e9a:	d808      	bhi.n	3eae <uarte_nrfx_configure+0xda>
    3e9c:	4c21      	ldr	r4, [pc, #132]	; (3f24 <uarte_nrfx_configure+0x150>)
    3e9e:	42a3      	cmp	r3, r4
    3ea0:	d039      	beq.n	3f16 <uarte_nrfx_configure+0x142>
    3ea2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3ea6:	d1bd      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3ea8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3eac:	e004      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3eae:	4c1e      	ldr	r4, [pc, #120]	; (3f28 <uarte_nrfx_configure+0x154>)
    3eb0:	42a3      	cmp	r3, r4
    3eb2:	d1b7      	bne.n	3e24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3eb8:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3eba:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    3ebe:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    3ec0:	4335      	orrs	r5, r6
    3ec2:	681b      	ldr	r3, [r3, #0]
    3ec4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3ec6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3eca:	1d23      	adds	r3, r4, #4
    3ecc:	c903      	ldmia	r1, {r0, r1}
    3ece:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3ed2:	2000      	movs	r0, #0
}
    3ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3ed6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3eda:	e7ed      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3edc:	4b13      	ldr	r3, [pc, #76]	; (3f2c <uarte_nrfx_configure+0x158>)
    3ede:	e7eb      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3ee0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ee4:	e7e8      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3ee6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3eea:	e7e5      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3eec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3ef0:	e7e2      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3ef2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3ef6:	e7df      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3ef8:	4b0d      	ldr	r3, [pc, #52]	; (3f30 <uarte_nrfx_configure+0x15c>)
    3efa:	e7dd      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3efc:	4b0d      	ldr	r3, [pc, #52]	; (3f34 <uarte_nrfx_configure+0x160>)
    3efe:	e7db      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3f00:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3f04:	e7d8      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3f06:	4b0c      	ldr	r3, [pc, #48]	; (3f38 <uarte_nrfx_configure+0x164>)
    3f08:	e7d6      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3f0a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3f0e:	e7d3      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3f10:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3f14:	e7d0      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3f16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3f1a:	e7cd      	b.n	3eb8 <uarte_nrfx_configure+0xe4>
    3f1c:	0013b000 	.word	0x0013b000
    3f20:	004ea000 	.word	0x004ea000
    3f24:	0003d090 	.word	0x0003d090
    3f28:	000f4240 	.word	0x000f4240
    3f2c:	00275000 	.word	0x00275000
    3f30:	0075c000 	.word	0x0075c000
    3f34:	003af000 	.word	0x003af000
    3f38:	013a9000 	.word	0x013a9000

00003f3c <uarte_instance_init.constprop.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3f3c:	2100      	movs	r1, #0
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    3f42:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    3f44:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    3f46:	683c      	ldr	r4, [r7, #0]
static int uarte_instance_init(const struct device *dev,
    3f48:	b087      	sub	sp, #28
    3f4a:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3f4e:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3f50:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
    3f54:	4680      	mov	r8, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3f56:	466a      	mov	r2, sp
    3f58:	4648      	mov	r0, r9
    3f5a:	f003 f9d1 	bl	7300 <pinctrl_lookup_state>
	if (ret < 0) {
    3f5e:	1e05      	subs	r5, r0, #0
    3f60:	db25      	blt.n	3fae <uarte_instance_init.constprop.0+0x72>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3f62:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3f64:	f8d9 2000 	ldr.w	r2, [r9]
    3f68:	7919      	ldrb	r1, [r3, #4]
    3f6a:	6818      	ldr	r0, [r3, #0]
    3f6c:	f000 faf6 	bl	455c <pinctrl_configure_pins>
	if (err < 0) {
    3f70:	1e05      	subs	r5, r0, #0
    3f72:	db1c      	blt.n	3fae <uarte_instance_init.constprop.0+0x72>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    3f74:	4640      	mov	r0, r8
    3f76:	1d31      	adds	r1, r6, #4
    3f78:	f7ff ff2c 	bl	3dd4 <uarte_nrfx_configure>
	if (err) {
    3f7c:	4605      	mov	r5, r0
    3f7e:	b9b0      	cbnz	r0, 3fae <uarte_instance_init.constprop.0+0x72>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3f80:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3f82:	0799      	lsls	r1, r3, #30
    3f84:	d524      	bpl.n	3fd0 <uarte_instance_init.constprop.0+0x94>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3f86:	f106 0018 	add.w	r0, r6, #24
    3f8a:	f000 fd71 	bl	4a70 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3f8e:	4b24      	ldr	r3, [pc, #144]	; (4020 <uarte_instance_init.constprop.0+0xe4>)
    3f90:	4298      	cmp	r0, r3
    3f92:	d010      	beq.n	3fb6 <uarte_instance_init.constprop.0+0x7a>
		LOG_ERR("Failed to allocate PPI Channel");
    3f94:	4b23      	ldr	r3, [pc, #140]	; (4024 <uarte_instance_init.constprop.0+0xe8>)
    3f96:	9305      	str	r3, [sp, #20]
    3f98:	2302      	movs	r3, #2
    3f9a:	9304      	str	r3, [sp, #16]
    3f9c:	462b      	mov	r3, r5
		return -EIO;
    3f9e:	f06f 0504 	mvn.w	r5, #4
    3fa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fa6:	4820      	ldr	r0, [pc, #128]	; (4028 <uarte_instance_init.constprop.0+0xec>)
    3fa8:	aa04      	add	r2, sp, #16
    3faa:	f7fe f8fd 	bl	21a8 <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3fae:	4628      	mov	r0, r5
    3fb0:	b007      	add	sp, #28
    3fb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3fb6:	7e33      	ldrb	r3, [r6, #24]
    3fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3fbc:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3fc0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3fc4:	2301      	movs	r3, #1
    3fc6:	7e32      	ldrb	r2, [r6, #24]
    3fc8:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3fca:	4a18      	ldr	r2, [pc, #96]	; (402c <uarte_instance_init.constprop.0+0xf0>)
    3fcc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3fd0:	2308      	movs	r3, #8
    3fd2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3fd6:	7a3b      	ldrb	r3, [r7, #8]
    3fd8:	b953      	cbnz	r3, 3ff0 <uarte_instance_init.constprop.0+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fda:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3fde:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3fe2:	6973      	ldr	r3, [r6, #20]
    3fe4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3fe8:	2301      	movs	r3, #1
    3fea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fee:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3ff0:	687b      	ldr	r3, [r7, #4]
    3ff2:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3ff4:	bf5c      	itt	pl
    3ff6:	f44f 7380 	movpl.w	r3, #256	; 0x100
    3ffa:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3ffe:	687b      	ldr	r3, [r7, #4]
    4000:	06db      	lsls	r3, r3, #27
    4002:	bf44      	itt	mi
    4004:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4008:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    400c:	6933      	ldr	r3, [r6, #16]
    400e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4012:	2300      	movs	r3, #0
    4014:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4018:	2301      	movs	r3, #1
    401a:	60a3      	str	r3, [r4, #8]
    401c:	60e3      	str	r3, [r4, #12]
	return 0;
    401e:	e7c6      	b.n	3fae <uarte_instance_init.constprop.0+0x72>
    4020:	0bad0000 	.word	0x0bad0000
    4024:	00008737 	.word	0x00008737
    4028:	00007cfc 	.word	0x00007cfc
    402c:	50017000 	.word	0x50017000

00004030 <uarte_nrfx_poll_out>:
{
    4030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4032:	4604      	mov	r4, r0
    4034:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    4036:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4038:	f003 fb43 	bl	76c2 <k_is_in_isr>
    403c:	b9b0      	cbnz	r0, 406c <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    403e:	4b2e      	ldr	r3, [pc, #184]	; (40f8 <uarte_nrfx_poll_out+0xc8>)
    4040:	781b      	ldrb	r3, [r3, #0]
    4042:	b19b      	cbz	r3, 406c <uarte_nrfx_poll_out+0x3c>
{
    4044:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4046:	6860      	ldr	r0, [r4, #4]
    4048:	f003 f8ee 	bl	7228 <is_tx_ready.isra.0>
    404c:	bb00      	cbnz	r0, 4090 <uarte_nrfx_poll_out+0x60>
    404e:	2001      	movs	r0, #1
    4050:	f003 fa2e 	bl	74b0 <nrfx_busy_wait>
    4054:	3e01      	subs	r6, #1
    4056:	d1f6      	bne.n	4046 <uarte_nrfx_poll_out+0x16>
    4058:	2100      	movs	r1, #0
    405a:	2021      	movs	r0, #33	; 0x21
    405c:	f001 fe90 	bl	5d80 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4060:	e7f0      	b.n	4044 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    4062:	f386 8811 	msr	BASEPRI, r6
    4066:	f3bf 8f6f 	isb	sy
}
    406a:	e7f5      	b.n	4058 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    406c:	f04f 0320 	mov.w	r3, #32
    4070:	f3ef 8611 	mrs	r6, BASEPRI
    4074:	f383 8812 	msr	BASEPRI_MAX, r3
    4078:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    407c:	6860      	ldr	r0, [r4, #4]
    407e:	4631      	mov	r1, r6
    4080:	f003 f8d2 	bl	7228 <is_tx_ready.isra.0>
    4084:	b990      	cbnz	r0, 40ac <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    4086:	f386 8811 	msr	BASEPRI, r6
    408a:	f3bf 8f6f 	isb	sy
}
    408e:	e7ed      	b.n	406c <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    4090:	f04f 0320 	mov.w	r3, #32
    4094:	f3ef 8611 	mrs	r6, BASEPRI
    4098:	f383 8812 	msr	BASEPRI_MAX, r3
    409c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    40a0:	6860      	ldr	r0, [r4, #4]
    40a2:	4631      	mov	r1, r6
    40a4:	f003 f8c0 	bl	7228 <is_tx_ready.isra.0>
    40a8:	2800      	cmp	r0, #0
    40aa:	d0da      	beq.n	4062 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    40ac:	693b      	ldr	r3, [r7, #16]
    40ae:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    40b0:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    40b2:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    40b4:	6813      	ldr	r3, [r2, #0]
    40b6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    40ba:	2001      	movs	r0, #1
    40bc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40c0:	2000      	movs	r0, #0
    40c2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    40c6:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    40ca:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    40ce:	6852      	ldr	r2, [r2, #4]
    40d0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    40d4:	06d2      	lsls	r2, r2, #27
    40d6:	d508      	bpl.n	40ea <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    40d8:	2008      	movs	r0, #8
	return config->uarte_regs;
    40da:	6862      	ldr	r2, [r4, #4]
    40dc:	6812      	ldr	r2, [r2, #0]
    40de:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    40e2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    40e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40ea:	2201      	movs	r2, #1
    40ec:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    40ee:	f381 8811 	msr	BASEPRI, r1
    40f2:	f3bf 8f6f 	isb	sy
}
    40f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40f8:	2000103d 	.word	0x2000103d

000040fc <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    40fc:	2301      	movs	r3, #1
    40fe:	4083      	lsls	r3, r0
{
    4100:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4102:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4104:	4a0b      	ldr	r2, [pc, #44]	; (4134 <compare_int_lock+0x38>)
    4106:	e8d2 1fef 	ldaex	r1, [r2]
    410a:	ea01 0504 	and.w	r5, r1, r4
    410e:	e8c2 5fe6 	stlex	r6, r5, [r2]
    4112:	2e00      	cmp	r6, #0
    4114:	d1f7      	bne.n	4106 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4116:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    411a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    411c:	4806      	ldr	r0, [pc, #24]	; (4138 <compare_int_lock+0x3c>)
    411e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    4122:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4126:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    412a:	420b      	tst	r3, r1
}
    412c:	bf14      	ite	ne
    412e:	2001      	movne	r0, #1
    4130:	2000      	moveq	r0, #0
    4132:	bd70      	pop	{r4, r5, r6, pc}
    4134:	20000e14 	.word	0x20000e14
    4138:	50015000 	.word	0x50015000

0000413c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    413e:	491b      	ldr	r1, [pc, #108]	; (41ac <sys_clock_timeout_handler+0x70>)
{
    4140:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4142:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4146:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4148:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    414c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4150:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4152:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4156:	d30f      	bcc.n	4178 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4158:	f001 ff78 	bl	604c <sys_clock_announce>
    return p_reg->CC[ch];
    415c:	00a3      	lsls	r3, r4, #2
    415e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4162:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4166:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    416a:	4295      	cmp	r5, r2
    416c:	d11d      	bne.n	41aa <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    416e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4172:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    4176:	e012      	b.n	419e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4178:	4b0d      	ldr	r3, [pc, #52]	; (41b0 <sys_clock_timeout_handler+0x74>)
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	0a1a      	lsrs	r2, r3, #8
    417e:	061b      	lsls	r3, r3, #24
    4180:	195e      	adds	r6, r3, r5
    4182:	4b0c      	ldr	r3, [pc, #48]	; (41b4 <sys_clock_timeout_handler+0x78>)
    4184:	f142 0700 	adc.w	r7, r2, #0
    4188:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    418c:	f001 ff5e 	bl	604c <sys_clock_announce>
    return p_reg->CC[ch];
    4190:	4a09      	ldr	r2, [pc, #36]	; (41b8 <sys_clock_timeout_handler+0x7c>)
    4192:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    4196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    419a:	429d      	cmp	r5, r3
    419c:	d105      	bne.n	41aa <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    419e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    41a2:	4a05      	ldr	r2, [pc, #20]	; (41b8 <sys_clock_timeout_handler+0x7c>)
    41a4:	40a3      	lsls	r3, r4
    41a6:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    41aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41ac:	200006f0 	.word	0x200006f0
    41b0:	20000e18 	.word	0x20000e18
    41b4:	200006f8 	.word	0x200006f8
    41b8:	50015000 	.word	0x50015000

000041bc <compare_int_unlock>:
	if (key) {
    41bc:	b1d9      	cbz	r1, 41f6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    41be:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    41c0:	4a0d      	ldr	r2, [pc, #52]	; (41f8 <compare_int_unlock+0x3c>)
    41c2:	4083      	lsls	r3, r0
    41c4:	e8d2 cfef 	ldaex	ip, [r2]
    41c8:	ea4c 0c03 	orr.w	ip, ip, r3
    41cc:	e8c2 cfe1 	stlex	r1, ip, [r2]
    41d0:	2900      	cmp	r1, #0
    41d2:	d1f7      	bne.n	41c4 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    41d8:	4a08      	ldr	r2, [pc, #32]	; (41fc <compare_int_unlock+0x40>)
    41da:	4083      	lsls	r3, r0
    41dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    41e0:	4b07      	ldr	r3, [pc, #28]	; (4200 <compare_int_unlock+0x44>)
    41e2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    41e6:	40c3      	lsrs	r3, r0
    41e8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41ea:	bf42      	ittt	mi
    41ec:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    41f0:	4b04      	ldrmi	r3, [pc, #16]	; (4204 <compare_int_unlock+0x48>)
    41f2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    41f6:	4770      	bx	lr
    41f8:	20000e14 	.word	0x20000e14
    41fc:	50015000 	.word	0x50015000
    4200:	20000e10 	.word	0x20000e10
    4204:	e000e100 	.word	0xe000e100

00004208 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4208:	4b0d      	ldr	r3, [pc, #52]	; (4240 <z_nrf_rtc_timer_read+0x38>)
    420a:	6818      	ldr	r0, [r3, #0]
    420c:	0a01      	lsrs	r1, r0, #8
    420e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4210:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4214:	4b0b      	ldr	r3, [pc, #44]	; (4244 <z_nrf_rtc_timer_read+0x3c>)
    4216:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    421a:	1818      	adds	r0, r3, r0
    421c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4224:	d20a      	bcs.n	423c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4226:	4b08      	ldr	r3, [pc, #32]	; (4248 <z_nrf_rtc_timer_read+0x40>)
    4228:	e9d3 2300 	ldrd	r2, r3, [r3]
    422c:	4290      	cmp	r0, r2
    422e:	eb71 0303 	sbcs.w	r3, r1, r3
    4232:	d203      	bcs.n	423c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4234:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4238:	f141 0100 	adc.w	r1, r1, #0
}
    423c:	4770      	bx	lr
    423e:	bf00      	nop
    4240:	20000e18 	.word	0x20000e18
    4244:	50015000 	.word	0x50015000
    4248:	200006f8 	.word	0x200006f8

0000424c <compare_set>:
{
    424c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4250:	4614      	mov	r4, r2
    4252:	461d      	mov	r5, r3
    4254:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    4256:	f7ff ff51 	bl	40fc <compare_int_lock>
    425a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    425c:	f7ff ffd4 	bl	4208 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4260:	42a0      	cmp	r0, r4
    4262:	eb71 0305 	sbcs.w	r3, r1, r5
    4266:	d27a      	bcs.n	435e <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    4268:	4b44      	ldr	r3, [pc, #272]	; (437c <compare_set+0x130>)
    426a:	1a20      	subs	r0, r4, r0
    426c:	eb65 0101 	sbc.w	r1, r5, r1
    4270:	4298      	cmp	r0, r3
    4272:	f171 0100 	sbcs.w	r1, r1, #0
    4276:	d27d      	bcs.n	4374 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
    4278:	4b41      	ldr	r3, [pc, #260]	; (4380 <compare_set+0x134>)
    427a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    427e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4282:	429d      	cmp	r5, r3
    4284:	bf08      	it	eq
    4286:	4294      	cmpeq	r4, r2
    4288:	d054      	beq.n	4334 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    428a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    428e:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4292:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4294:	2100      	movs	r1, #0
    4296:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    429a:	f107 0850 	add.w	r8, r7, #80	; 0x50
    429e:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    42a2:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    42a6:	40bb      	lsls	r3, r7
    42a8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    42ac:	fa1f f888 	uxth.w	r8, r8
    42b0:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    42b4:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    42b6:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    42ba:	4b32      	ldr	r3, [pc, #200]	; (4384 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    42bc:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
     return p_reg->COUNTER;
    42c0:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    42c4:	eba0 000a 	sub.w	r0, r0, sl
    42c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    42cc:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    42d0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    42d2:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
    42d6:	d104      	bne.n	42e2 <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
    42d8:	2013      	movs	r0, #19
    42da:	f003 fb2c 	bl	7936 <z_impl_k_busy_wait>
    42de:	2100      	movs	r1, #0
    42e0:	4b28      	ldr	r3, [pc, #160]	; (4384 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    42e2:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    42e6:	eba6 000c 	sub.w	r0, r6, ip
    42ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    42ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    42f2:	bf88      	it	hi
    42f4:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    42f6:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
    42fa:	9a01      	ldr	r2, [sp, #4]
    42fc:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4300:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    4304:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    4308:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    430c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    4310:	4582      	cmp	sl, r0
    4312:	d006      	beq.n	4322 <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    4314:	1a30      	subs	r0, r6, r0
    4316:	3802      	subs	r0, #2
    4318:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    431c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4320:	d81b      	bhi.n	435a <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    4322:	eba6 060b 	sub.w	r6, r6, fp
    4326:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    432a:	1936      	adds	r6, r6, r4
    432c:	f145 0300 	adc.w	r3, r5, #0
    4330:	4634      	mov	r4, r6
    4332:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    4334:	4912      	ldr	r1, [pc, #72]	; (4380 <compare_set+0x134>)
	cc_data[chan].callback = handler;
    4336:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    4338:	eb01 1207 	add.w	r2, r1, r7, lsl #4
    433c:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    4340:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    4342:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
    4344:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4348:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    434a:	4638      	mov	r0, r7
    434c:	9900      	ldr	r1, [sp, #0]
    434e:	f7ff ff35 	bl	41bc <compare_int_unlock>
}
    4352:	4620      	mov	r0, r4
    4354:	b003      	add	sp, #12
    4356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    435a:	4630      	mov	r0, r6
    435c:	e7b0      	b.n	42c0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    435e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4360:	4a09      	ldr	r2, [pc, #36]	; (4388 <compare_set+0x13c>)
    4362:	40bb      	lsls	r3, r7
    4364:	e8d2 0fef 	ldaex	r0, [r2]
    4368:	4318      	orrs	r0, r3
    436a:	e8c2 0fe1 	stlex	r1, r0, [r2]
    436e:	2900      	cmp	r1, #0
    4370:	d0e0      	beq.n	4334 <compare_set+0xe8>
    4372:	e7f7      	b.n	4364 <compare_set+0x118>
			return -EINVAL;
    4374:	f06f 0415 	mvn.w	r4, #21
    4378:	e7e7      	b.n	434a <compare_set+0xfe>
    437a:	bf00      	nop
    437c:	01000001 	.word	0x01000001
    4380:	200006e0 	.word	0x200006e0
    4384:	50015000 	.word	0x50015000
    4388:	20000e10 	.word	0x20000e10

0000438c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    438c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    438e:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4390:	f04f 30ff 	mov.w	r0, #4294967295
    4394:	f04f 31ff 	mov.w	r1, #4294967295
    4398:	4d16      	ldr	r5, [pc, #88]	; (43f4 <sys_clock_driver_init+0x68>)
    439a:	4b17      	ldr	r3, [pc, #92]	; (43f8 <sys_clock_driver_init+0x6c>)
    439c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    43a0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    43a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43a8:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    43aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    43ae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    43b2:	4b12      	ldr	r3, [pc, #72]	; (43fc <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    43b4:	2101      	movs	r1, #1
    43b6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    43ba:	2015      	movs	r0, #21
    43bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    43c0:	4622      	mov	r2, r4
    43c2:	f7fe fc1b 	bl	2bfc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    43c6:	2015      	movs	r0, #21
    43c8:	f7fe fbfc 	bl	2bc4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    43cc:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    43ce:	4a0c      	ldr	r2, [pc, #48]	; (4400 <sys_clock_driver_init+0x74>)
    43d0:	60ab      	str	r3, [r5, #8]
    43d2:	602b      	str	r3, [r5, #0]
    43d4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    43d6:	4b0b      	ldr	r3, [pc, #44]	; (4404 <sys_clock_driver_init+0x78>)
    43d8:	4a0b      	ldr	r2, [pc, #44]	; (4408 <sys_clock_driver_init+0x7c>)
    43da:	9300      	str	r3, [sp, #0]
    43dc:	4620      	mov	r0, r4
    43de:	2300      	movs	r3, #0
    43e0:	9401      	str	r4, [sp, #4]
    43e2:	f7ff ff33 	bl	424c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    43e6:	4630      	mov	r0, r6
    43e8:	f7ff fb1e 	bl	3a28 <z_nrf_clock_control_lf_on>

	return 0;
}
    43ec:	4620      	mov	r0, r4
    43ee:	b002      	add	sp, #8
    43f0:	bd70      	pop	{r4, r5, r6, pc}
    43f2:	bf00      	nop
    43f4:	50015000 	.word	0x50015000
    43f8:	200006e0 	.word	0x200006e0
    43fc:	e000e100 	.word	0xe000e100
    4400:	20000e14 	.word	0x20000e14
    4404:	0000413d 	.word	0x0000413d
    4408:	007fffff 	.word	0x007fffff

0000440c <rtc_nrf_isr>:
{
    440c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4410:	4b31      	ldr	r3, [pc, #196]	; (44d8 <rtc_nrf_isr+0xcc>)
    4412:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4416:	0792      	lsls	r2, r2, #30
    4418:	d50b      	bpl.n	4432 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    441a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    441e:	b142      	cbz	r2, 4432 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4420:	2200      	movs	r2, #0
    4422:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    4426:	4a2d      	ldr	r2, [pc, #180]	; (44dc <rtc_nrf_isr+0xd0>)
    4428:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    442c:	6813      	ldr	r3, [r2, #0]
    442e:	3301      	adds	r3, #1
    4430:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4432:	f04f 0320 	mov.w	r3, #32
    4436:	f3ef 8211 	mrs	r2, BASEPRI
    443a:	f383 8812 	msr	BASEPRI_MAX, r3
    443e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4442:	4c25      	ldr	r4, [pc, #148]	; (44d8 <rtc_nrf_isr+0xcc>)
    4444:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4448:	03db      	lsls	r3, r3, #15
    444a:	d525      	bpl.n	4498 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    444c:	4b24      	ldr	r3, [pc, #144]	; (44e0 <rtc_nrf_isr+0xd4>)
    444e:	e8d3 1fef 	ldaex	r1, [r3]
    4452:	f021 0001 	bic.w	r0, r1, #1
    4456:	e8c3 0fe5 	stlex	r5, r0, [r3]
    445a:	2d00      	cmp	r5, #0
    445c:	d1f7      	bne.n	444e <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    445e:	b911      	cbnz	r1, 4466 <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4460:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    4464:	b1c3      	cbz	r3, 4498 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4466:	2500      	movs	r5, #0
    4468:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    446c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    4470:	f382 8811 	msr	BASEPRI, r2
    4474:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    4478:	f7ff fec6 	bl	4208 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    447c:	f04f 0320 	mov.w	r3, #32
    4480:	f3ef 8211 	mrs	r2, BASEPRI
    4484:	f383 8812 	msr	BASEPRI_MAX, r3
    4488:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    448c:	4b15      	ldr	r3, [pc, #84]	; (44e4 <rtc_nrf_isr+0xd8>)
    448e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4492:	42b0      	cmp	r0, r6
    4494:	41b9      	sbcs	r1, r7
    4496:	d206      	bcs.n	44a6 <rtc_nrf_isr+0x9a>
	__asm__ volatile(
    4498:	f382 8811 	msr	BASEPRI, r2
    449c:	f3bf 8f6f 	isb	sy
}
    44a0:	b003      	add	sp, #12
    44a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    44a6:	f04f 38ff 	mov.w	r8, #4294967295
			user_context = cc_data[chan].user_context;
    44aa:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    44ae:	f04f 39ff 	mov.w	r9, #4294967295
			cc_data[chan].callback = NULL;
    44b2:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    44b4:	e9c3 8902 	strd	r8, r9, [r3, #8]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    44b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    44bc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    44c0:	f382 8811 	msr	BASEPRI, r2
    44c4:	f3bf 8f6f 	isb	sy
		if (handler) {
    44c8:	2900      	cmp	r1, #0
    44ca:	d0e9      	beq.n	44a0 <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    44cc:	9000      	str	r0, [sp, #0]
    44ce:	4632      	mov	r2, r6
    44d0:	463b      	mov	r3, r7
    44d2:	4628      	mov	r0, r5
    44d4:	4788      	blx	r1
}
    44d6:	e7e3      	b.n	44a0 <rtc_nrf_isr+0x94>
    44d8:	50015000 	.word	0x50015000
    44dc:	20000e18 	.word	0x20000e18
    44e0:	20000e10 	.word	0x20000e10
    44e4:	200006e0 	.word	0x200006e0

000044e8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    44e8:	1c43      	adds	r3, r0, #1
{
    44ea:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    44ec:	d020      	beq.n	4530 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    44ee:	2801      	cmp	r0, #1
    44f0:	dd20      	ble.n	4534 <sys_clock_set_timeout+0x4c>
    44f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    44f6:	da1f      	bge.n	4538 <sys_clock_set_timeout+0x50>
    44f8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    44fa:	f7ff fe85 	bl	4208 <z_nrf_rtc_timer_read>
    44fe:	4b0f      	ldr	r3, [pc, #60]	; (453c <sys_clock_set_timeout+0x54>)
    4500:	e9d3 1300 	ldrd	r1, r3, [r3]
    4504:	1a42      	subs	r2, r0, r1
		ticks = 0;
    4506:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    450a:	bf28      	it	cs
    450c:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
    450e:	480c      	ldr	r0, [pc, #48]	; (4540 <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4510:	3201      	adds	r2, #1
    4512:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    4514:	4282      	cmp	r2, r0
    4516:	bf28      	it	cs
    4518:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    451a:	2000      	movs	r0, #0
    451c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    451e:	4909      	ldr	r1, [pc, #36]	; (4544 <sys_clock_set_timeout+0x5c>)
    4520:	9001      	str	r0, [sp, #4]
    4522:	9100      	str	r1, [sp, #0]
    4524:	f143 0300 	adc.w	r3, r3, #0
    4528:	f7ff fe90 	bl	424c <compare_set>
}
    452c:	b002      	add	sp, #8
    452e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4530:	4803      	ldr	r0, [pc, #12]	; (4540 <sys_clock_set_timeout+0x58>)
    4532:	e7e1      	b.n	44f8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4534:	2400      	movs	r4, #0
    4536:	e7e0      	b.n	44fa <sys_clock_set_timeout+0x12>
    4538:	4c01      	ldr	r4, [pc, #4]	; (4540 <sys_clock_set_timeout+0x58>)
    453a:	e7de      	b.n	44fa <sys_clock_set_timeout+0x12>
    453c:	200006f0 	.word	0x200006f0
    4540:	007fffff 	.word	0x007fffff
    4544:	0000413d 	.word	0x0000413d

00004548 <sys_clock_elapsed>:
{
    4548:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    454a:	f7ff fe5d 	bl	4208 <z_nrf_rtc_timer_read>
    454e:	4b02      	ldr	r3, [pc, #8]	; (4558 <sys_clock_elapsed+0x10>)
    4550:	681b      	ldr	r3, [r3, #0]
}
    4552:	1ac0      	subs	r0, r0, r3
    4554:	bd08      	pop	{r3, pc}
    4556:	bf00      	nop
    4558:	200006f0 	.word	0x200006f0

0000455c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4560:	2701      	movs	r7, #1
    p_reg->OUTSET = set_mask;
    4562:	4e3f      	ldr	r6, [pc, #252]	; (4660 <pinctrl_configure_pins+0x104>)
    4564:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4568:	4281      	cmp	r1, r0
    456a:	d102      	bne.n	4572 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    456c:	2000      	movs	r0, #0
}
    456e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4572:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4574:	f005 037f 	and.w	r3, r5, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4578:	f3c5 2443 	ubfx	r4, r5, #9, #4
			pin = 0xFFFFFFFFU;
    457c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    457e:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    4582:	bf08      	it	eq
    4584:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    4588:	2d19      	cmp	r5, #25
    458a:	d866      	bhi.n	465a <pinctrl_configure_pins+0xfe>
    458c:	e8df f005 	tbb	[pc, r5]
    4590:	1e1b160d 	.word	0x1e1b160d
    4594:	651e2d21 	.word	0x651e2d21
    4598:	31656565 	.word	0x31656565
    459c:	65656551 	.word	0x65656551
    45a0:	65656565 	.word	0x65656565
    45a4:	5c546565 	.word	0x5c546565
    45a8:	625f      	.short	0x625f
			NRF_PSEL_UART(reg, TXD) = pin;
    45aa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    45ae:	f003 051f 	and.w	r5, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    45b2:	fa07 f505 	lsl.w	r5, r7, r5
    p_reg->OUTSET = set_mask;
    45b6:	60b5      	str	r5, [r6, #8]
}
    45b8:	2501      	movs	r5, #1
    45ba:	e002      	b.n	45c2 <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    45bc:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    45c0:	2500      	movs	r5, #0
    45c2:	46ac      	mov	ip, r5
    45c4:	e01c      	b.n	4600 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_UART(reg, RTS) = pin;
    45c6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    45ca:	e7f0      	b.n	45ae <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, CTS) = pin;
    45cc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    45d0:	e7f6      	b.n	45c0 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    45d2:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    45d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    45d8:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    45dc:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    45e0:	f8c6 c00c 	str.w	ip, [r6, #12]
}
    45e4:	f04f 0c01 	mov.w	ip, #1
    45e8:	e00a      	b.n	4600 <pinctrl_configure_pins+0xa4>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    45ea:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    45ee:	2501      	movs	r5, #1
    45f0:	e7f2      	b.n	45d8 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    45f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    45f6:	2c00      	cmp	r4, #0
    45f8:	d1e2      	bne.n	45c0 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    45fa:	2500      	movs	r5, #0
				drive = NRF_DRIVE_S0D1;
    45fc:	2406      	movs	r4, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    45fe:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4600:	f850 eb04 	ldr.w	lr, [r0], #4
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4604:	0224      	lsls	r4, r4, #8
    4606:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    460a:	f1b8 0f00 	cmp.w	r8, #0
    460e:	bf1c      	itt	ne
    4610:	f04f 0c00 	movne.w	ip, #0
    4614:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4616:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
    461a:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
    *p_pin = pin_number & 0x1F;
    461e:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4622:	ea44 040c 	orr.w	r4, r4, ip
    4626:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    462a:	3380      	adds	r3, #128	; 0x80
    462c:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4630:	e79a      	b.n	4568 <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    4632:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4636:	e7de      	b.n	45f6 <pinctrl_configure_pins+0x9a>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    4638:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    463c:	6805      	ldr	r5, [r0, #0]
    463e:	f3c5 3580 	ubfx	r5, r5, #14, #1
    if (value == 0)
    4642:	2d00      	cmp	r5, #0
    4644:	d0d3      	beq.n	45ee <pinctrl_configure_pins+0x92>
    4646:	e7b2      	b.n	45ae <pinctrl_configure_pins+0x52>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    4648:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    464c:	e7f6      	b.n	463c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    464e:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    4652:	e7f3      	b.n	463c <pinctrl_configure_pins+0xe0>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    4654:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    4658:	e7f0      	b.n	463c <pinctrl_configure_pins+0xe0>
		switch (NRF_GET_FUN(pins[i])) {
    465a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    465e:	e786      	b.n	456e <pinctrl_configure_pins+0x12>
    4660:	50842500 	.word	0x50842500

00004664 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    4666:	f7fd fcbf 	bl	1fe8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    466a:	4b07      	ldr	r3, [pc, #28]	; (4688 <k_sys_fatal_error_handler+0x24>)
    466c:	9305      	str	r3, [sp, #20]
    466e:	2302      	movs	r3, #2
    4670:	9304      	str	r3, [sp, #16]
    4672:	4806      	ldr	r0, [pc, #24]	; (468c <k_sys_fatal_error_handler+0x28>)
    4674:	2300      	movs	r3, #0
    4676:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    467a:	aa04      	add	r2, sp, #16
    467c:	f7fd fd94 	bl	21a8 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    4680:	2000      	movs	r0, #0
    4682:	f7fe fec1 	bl	3408 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    4686:	bf00      	nop
    4688:	0000877a 	.word	0x0000877a
    468c:	00007cb4 	.word	0x00007cb4

00004690 <hx711_init>:
{
    4690:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct hx711_config *cfg = dev->config;
    4692:	6846      	ldr	r6, [r0, #4]
	struct hx711_data *data = dev->data;
    4694:	6905      	ldr	r5, [r0, #16]
{
    4696:	4607      	mov	r7, r0
	data->sck_gpio = cfg->sck_ctrl;
    4698:	68f0      	ldr	r0, [r6, #12]
{
    469a:	b087      	sub	sp, #28
	data->sck_gpio = cfg->sck_ctrl;
    469c:	60a8      	str	r0, [r5, #8]
				 GPIO_OUTPUT_INACTIVE | cfg->sck_flags);
    469e:	8a32      	ldrh	r2, [r6, #16]
	ret = gpio_pin_configure(data->sck_gpio, cfg->sck_pin,
    46a0:	7ab1      	ldrb	r1, [r6, #10]
    46a2:	f442 12b0 	orr.w	r2, r2, #1441792	; 0x160000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    46a6:	f002 fe4c 	bl	7342 <z_impl_gpio_pin_configure>
	if (ret != 0) {
    46aa:	4604      	mov	r4, r0
    46ac:	b9f0      	cbnz	r0, 46ec <hx711_init+0x5c>
	return z_impl_k_sem_init(sem, initial_count, limit);
    46ae:	2201      	movs	r2, #1
    46b0:	f105 001c 	add.w	r0, r5, #28
    46b4:	4611      	mov	r1, r2
    46b6:	f003 f825 	bl	7704 <z_impl_k_sem_init>
	data->dout_gpio = cfg->sck_ctrl;
    46ba:	68f0      	ldr	r0, [r6, #12]
    46bc:	6068      	str	r0, [r5, #4]
	ret = gpio_pin_configure(data->dout_gpio, cfg->dout_pin, GPIO_INPUT | cfg->dout_flags);
    46be:	8932      	ldrh	r2, [r6, #8]
    46c0:	7831      	ldrb	r1, [r6, #0]
    46c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    46c6:	f002 fe3c 	bl	7342 <z_impl_gpio_pin_configure>
	if (ret != 0) {
    46ca:	4604      	mov	r4, r0
    46cc:	b970      	cbnz	r0, 46ec <hx711_init+0x5c>
	gpio_init_callback(&data->dout_gpio_cb, hx711_gpio_callback, BIT(cfg->dout_pin));
    46ce:	2201      	movs	r2, #1
    46d0:	7833      	ldrb	r3, [r6, #0]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    46d2:	4814      	ldr	r0, [pc, #80]	; (4724 <hx711_init+0x94>)
    46d4:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
    46d8:	e9c5 0305 	strd	r0, r3, [r5, #20]
	if (gpio_add_callback(data->dout_gpio, &data->dout_gpio_cb) < 0) {
    46dc:	6868      	ldr	r0, [r5, #4]
	gpio_init_callback(&data->dout_gpio_cb, hx711_gpio_callback, BIT(cfg->dout_pin));
    46de:	f105 0110 	add.w	r1, r5, #16
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    46e2:	6883      	ldr	r3, [r0, #8]
    46e4:	69db      	ldr	r3, [r3, #28]
    46e6:	b923      	cbnz	r3, 46f2 <hx711_init+0x62>
		return -EIO;
    46e8:	f06f 0404 	mvn.w	r4, #4
}
    46ec:	4620      	mov	r0, r4
    46ee:	b007      	add	sp, #28
    46f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    46f2:	4798      	blx	r3
	if (gpio_add_callback(data->dout_gpio, &data->dout_gpio_cb) < 0) {
    46f4:	2800      	cmp	r0, #0
    46f6:	dbf7      	blt.n	46e8 <hx711_init+0x58>
	ret = gpio_pin_interrupt_configure(data->dout_gpio, cfg->dout_pin,
    46f8:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
    46fc:	7831      	ldrb	r1, [r6, #0]
    46fe:	6868      	ldr	r0, [r5, #4]
    4700:	f002 fe39 	bl	7376 <gpio_pin_interrupt_configure>
	if (ret != 0) {
    4704:	4604      	mov	r4, r0
    4706:	b158      	cbz	r0, 4720 <hx711_init+0x90>
		LOG_ERR("Failed to set dout GPIO interrupt");
    4708:	4b07      	ldr	r3, [pc, #28]	; (4728 <hx711_init+0x98>)
    470a:	9305      	str	r3, [sp, #20]
    470c:	2302      	movs	r3, #2
    470e:	9304      	str	r3, [sp, #16]
    4710:	2300      	movs	r3, #0
    4712:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4716:	4805      	ldr	r0, [pc, #20]	; (472c <hx711_init+0x9c>)
    4718:	aa04      	add	r2, sp, #16
    471a:	f7fd fd45 	bl	21a8 <z_impl_z_log_msg_static_create>
		return ret;
    471e:	e7e5      	b.n	46ec <hx711_init+0x5c>
	data->dev = dev;
    4720:	602f      	str	r7, [r5, #0]
	return ret;
    4722:	e7e3      	b.n	46ec <hx711_init+0x5c>
    4724:	0000739f 	.word	0x0000739f
    4728:	00008797 	.word	0x00008797
    472c:	00007c9c 	.word	0x00007c9c

00004730 <hx711_sample_fetch>:
{
    4730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4734:	b087      	sub	sp, #28
	struct hx711_data *data = dev->data;
    4736:	6904      	ldr	r4, [r0, #16]
	const struct hx711_config *cfg = dev->config;
    4738:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (data->power != HX711_POWER_ON) {
    473c:	f894 503e 	ldrb.w	r5, [r4, #62]	; 0x3e
{
    4740:	af00      	add	r7, sp, #0
	if (data->power != HX711_POWER_ON) {
    4742:	2d00      	cmp	r5, #0
    4744:	d14d      	bne.n	47e2 <hx711_sample_fetch+0xb2>
	return z_impl_k_sem_take(sem, timeout);
    4746:	f644 42cd 	movw	r2, #19661	; 0x4ccd
    474a:	2300      	movs	r3, #0
    474c:	f104 001c 	add.w	r0, r4, #28
    4750:	f001 f826 	bl	57a0 <z_impl_k_sem_take>
	if (k_sem_take(&data->dout_sem, K_MSEC(SAMPLE_FETCH_TIMEOUT_MS))) {
    4754:	4606      	mov	r6, r0
    4756:	b358      	cbz	r0, 47b0 <hx711_sample_fetch+0x80>
		LOG_ERR("Weight data not ready within %d ms", SAMPLE_FETCH_TIMEOUT_MS);
    4758:	466e      	mov	r6, sp
    475a:	b088      	sub	sp, #32
    475c:	466a      	mov	r2, sp
    475e:	4b22      	ldr	r3, [pc, #136]	; (47e8 <hx711_sample_fetch+0xb8>)
    4760:	6153      	str	r3, [r2, #20]
    4762:	f44f 7316 	mov.w	r3, #600	; 0x258
    4766:	6193      	str	r3, [r2, #24]
    4768:	2303      	movs	r3, #3
    476a:	f842 3f10 	str.w	r3, [r2, #16]!
    476e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4772:	462b      	mov	r3, r5
    4774:	481d      	ldr	r0, [pc, #116]	; (47ec <hx711_sample_fetch+0xbc>)
    4776:	f7fd fd17 	bl	21a8 <z_impl_z_log_msg_static_create>
    477a:	46b5      	mov	sp, r6
	ret = gpio_pin_interrupt_configure(data->dout_gpio, cfg->dout_pin, GPIO_INT_EDGE_TO_INACTIVE);
    477c:	6860      	ldr	r0, [r4, #4]
    477e:	f04f 7270 	mov.w	r2, #62914560	; 0x3c00000
    4782:	f898 1000 	ldrb.w	r1, [r8]
    4786:	f002 fdf6 	bl	7376 <gpio_pin_interrupt_configure>
	if (ret != 0) {
    478a:	4604      	mov	r4, r0
    478c:	b158      	cbz	r0, 47a6 <hx711_sample_fetch+0x76>
		LOG_ERR("Failed to set dout GPIO interrupt");
    478e:	4b18      	ldr	r3, [pc, #96]	; (47f0 <hx711_sample_fetch+0xc0>)
    4790:	617b      	str	r3, [r7, #20]
    4792:	2302      	movs	r3, #2
    4794:	613b      	str	r3, [r7, #16]
    4796:	2300      	movs	r3, #0
    4798:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    479c:	4813      	ldr	r0, [pc, #76]	; (47ec <hx711_sample_fetch+0xbc>)
    479e:	f107 0210 	add.w	r2, r7, #16
    47a2:	f7fd fd01 	bl	21a8 <z_impl_z_log_msg_static_create>
}
    47a6:	4620      	mov	r0, r4
    47a8:	371c      	adds	r7, #28
    47aa:	46bd      	mov	sp, r7
    47ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    47b0:	f04f 0918 	mov.w	r9, #24
	uint32_t count = 0;
    47b4:	4605      	mov	r5, r0
		if (hx711_cycle(data)) {
    47b6:	4620      	mov	r0, r4
		count = count << 1;
    47b8:	006d      	lsls	r5, r5, #1
		if (hx711_cycle(data)) {
    47ba:	f002 fe10 	bl	73de <hx711_cycle>
    47be:	b100      	cbz	r0, 47c2 <hx711_sample_fetch+0x92>
			count++;
    47c0:	3501      	adds	r5, #1
	for (i = 0; i < 24; i++) {
    47c2:	f1b9 0901 	subs.w	r9, r9, #1
    47c6:	d1f6      	bne.n	47b6 <hx711_sample_fetch+0x86>
	for (i = 0; i < data->gain; i++) {
    47c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    47cc:	42b3      	cmp	r3, r6
    47ce:	dc03      	bgt.n	47d8 <hx711_sample_fetch+0xa8>
	count ^= 0x800000;
    47d0:	f485 0500 	eor.w	r5, r5, #8388608	; 0x800000
	data->reading = count;
    47d4:	62e5      	str	r5, [r4, #44]	; 0x2c
    47d6:	e7d1      	b.n	477c <hx711_sample_fetch+0x4c>
		hx711_cycle(data);
    47d8:	4620      	mov	r0, r4
    47da:	f002 fe00 	bl	73de <hx711_cycle>
	for (i = 0; i < data->gain; i++) {
    47de:	3601      	adds	r6, #1
    47e0:	e7f2      	b.n	47c8 <hx711_sample_fetch+0x98>
		return -EACCES;
    47e2:	f06f 040c 	mvn.w	r4, #12
    47e6:	e7de      	b.n	47a6 <hx711_sample_fetch+0x76>
    47e8:	000087b9 	.word	0x000087b9
    47ec:	00007c9c 	.word	0x00007c9c
    47f0:	00008797 	.word	0x00008797

000047f4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    47f4:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    47f6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    47fa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    47fe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    4802:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    4806:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    4808:	bf01      	itttt	eq
    480a:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    480e:	2200      	moveq	r2, #0
    4810:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    4814:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    4818:	f002 fe39 	bl	748e <nrf91_errata_14>
    481c:	b128      	cbz	r0, 482a <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    481e:	2201      	movs	r2, #1
    4820:	4b4d      	ldr	r3, [pc, #308]	; (4958 <SystemInit+0x164>)
    4822:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4826:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    482a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    482e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4832:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4836:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    483a:	2a09      	cmp	r2, #9
    483c:	d105      	bne.n	484a <SystemInit+0x56>
            {
                switch(var2)
    483e:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4840:	bf1e      	ittt	ne
    4842:	2201      	movne	r2, #1
    4844:	4b44      	ldrne	r3, [pc, #272]	; (4958 <SystemInit+0x164>)
    4846:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    484a:	f002 fe20 	bl	748e <nrf91_errata_14>
    484e:	b118      	cbz	r0, 4858 <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4850:	220e      	movs	r2, #14
    4852:	4b42      	ldr	r3, [pc, #264]	; (495c <SystemInit+0x168>)
    4854:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    4858:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    485c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4860:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4864:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    4868:	2a09      	cmp	r2, #9
    486a:	d106      	bne.n	487a <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    486c:	2200      	movs	r2, #0
    486e:	4b3a      	ldr	r3, [pc, #232]	; (4958 <SystemInit+0x164>)
    4870:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4874:	2201      	movs	r2, #1
    4876:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    487a:	2200      	movs	r2, #0
    487c:	00d3      	lsls	r3, r2, #3
        #endif

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    487e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    4882:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    4886:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    488a:	3101      	adds	r1, #1
    488c:	d008      	beq.n	48a0 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    488e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4892:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4894:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4898:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    489c:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    489e:	d1ed      	bne.n	487c <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    48a0:	4b2f      	ldr	r3, [pc, #188]	; (4960 <SystemInit+0x16c>)
    48a2:	69da      	ldr	r2, [r3, #28]
    48a4:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    48a8:	07d1      	lsls	r1, r2, #31
    48aa:	d545      	bpl.n	4938 <SystemInit+0x144>
    48ac:	f3bf 8f4f 	dsb	sy
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48b0:	4b2c      	ldr	r3, [pc, #176]	; (4964 <SystemInit+0x170>)
    48b2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48b6:	2a01      	cmp	r2, #1
    48b8:	d1fb      	bne.n	48b2 <SystemInit+0xbe>
            NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    48ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    48c2:	2a01      	cmp	r2, #1
    48c4:	d1fb      	bne.n	48be <SystemInit+0xca>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    48c6:	4b26      	ldr	r3, [pc, #152]	; (4960 <SystemInit+0x16c>)
    48c8:	69da      	ldr	r2, [r3, #28]
    48ca:	f3bf 8f4f 	dsb	sy
        if ((HFXOSRC_readout & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    48ce:	07d2      	lsls	r2, r2, #31
    48d0:	d50a      	bpl.n	48e8 <SystemInit+0xf4>
                  uicr_erased_value = NRF_UICR_S->HFXOSRC;
    48d2:	69da      	ldr	r2, [r3, #28]
                  uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    48d4:	f022 0201 	bic.w	r2, r2, #1
                  NRF_UICR_S->HFXOSRC = uicr_new_value;
    48d8:	61da      	str	r2, [r3, #28]
    48da:	f3bf 8f4f 	dsb	sy
                  while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    48de:	4a21      	ldr	r2, [pc, #132]	; (4964 <SystemInit+0x170>)
    48e0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    48e4:	2b01      	cmp	r3, #1
    48e6:	d1fb      	bne.n	48e0 <SystemInit+0xec>
        uint32_t val = *word;
    48e8:	4a1d      	ldr	r2, [pc, #116]	; (4960 <SystemInit+0x16c>)
    48ea:	6a13      	ldr	r3, [r2, #32]
    48ec:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    48f0:	3301      	adds	r3, #1
    48f2:	d10c      	bne.n	490e <SystemInit+0x11a>
                  uicr_erased_value = NRF_UICR_S->HFXOCNT;
    48f4:	6a13      	ldr	r3, [r2, #32]
                  uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    48f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    48fa:	f043 0320 	orr.w	r3, r3, #32
                  NRF_UICR_S->HFXOCNT = uicr_new_value;
    48fe:	6213      	str	r3, [r2, #32]
    4900:	f3bf 8f4f 	dsb	sy
                  while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4904:	4a17      	ldr	r2, [pc, #92]	; (4964 <SystemInit+0x170>)
    4906:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    490a:	2b01      	cmp	r3, #1
    490c:	d1fb      	bne.n	4906 <SystemInit+0x112>
            NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    490e:	2200      	movs	r2, #0
    4910:	4b14      	ldr	r3, [pc, #80]	; (4964 <SystemInit+0x170>)
    4912:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4916:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    491a:	2a01      	cmp	r2, #1
    491c:	d1fb      	bne.n	4916 <SystemInit+0x122>
    491e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4922:	4911      	ldr	r1, [pc, #68]	; (4968 <SystemInit+0x174>)
    4924:	4b11      	ldr	r3, [pc, #68]	; (496c <SystemInit+0x178>)
    4926:	68ca      	ldr	r2, [r1, #12]
    4928:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    492c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    492e:	60cb      	str	r3, [r1, #12]
    4930:	f3bf 8f4f 	dsb	sy
    __NOP();
    4934:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4936:	e7fd      	b.n	4934 <SystemInit+0x140>
        uint32_t val = *word;
    4938:	6a1b      	ldr	r3, [r3, #32]
    493a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    493e:	3301      	adds	r3, #1
    4940:	d0b4      	beq.n	48ac <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    4942:	4a09      	ldr	r2, [pc, #36]	; (4968 <SystemInit+0x174>)
    4944:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    4948:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    494c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    4950:	4b07      	ldr	r3, [pc, #28]	; (4970 <SystemInit+0x17c>)
    4952:	4a08      	ldr	r2, [pc, #32]	; (4974 <SystemInit+0x180>)
    4954:	601a      	str	r2, [r3, #0]
}
    4956:	bd08      	pop	{r3, pc}
    4958:	50004000 	.word	0x50004000
    495c:	5003a000 	.word	0x5003a000
    4960:	00ff8000 	.word	0x00ff8000
    4964:	50039000 	.word	0x50039000
    4968:	e000ed00 	.word	0xe000ed00
    496c:	05fa0004 	.word	0x05fa0004
    4970:	200000a8 	.word	0x200000a8
    4974:	03d09000 	.word	0x03d09000

00004978 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4978:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    497a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    497c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    497e:	fab2 f382 	clz	r3, r2
    4982:	f1c3 031f 	rsb	r3, r3, #31
    4986:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4988:	fa05 f403 	lsl.w	r4, r5, r3
    498c:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4990:	e8d0 6fef 	ldaex	r6, [r0]
    4994:	4296      	cmp	r6, r2
    4996:	d104      	bne.n	49a2 <nrfx_flag32_alloc+0x2a>
    4998:	e8c0 4fec 	stlex	ip, r4, [r0]
    499c:	f1bc 0f00 	cmp.w	ip, #0
    49a0:	d1f6      	bne.n	4990 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    49a2:	d1eb      	bne.n	497c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    49a4:	4801      	ldr	r0, [pc, #4]	; (49ac <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    49a6:	700b      	strb	r3, [r1, #0]
}
    49a8:	bd70      	pop	{r4, r5, r6, pc}
    49aa:	bf00      	nop
    49ac:	0bad0000 	.word	0x0bad0000

000049b0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    49b0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    49b2:	6803      	ldr	r3, [r0, #0]
    49b4:	40cb      	lsrs	r3, r1
    49b6:	07db      	lsls	r3, r3, #31
    49b8:	d410      	bmi.n	49dc <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    49ba:	2301      	movs	r3, #1
    49bc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    49be:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    49c0:	ea43 0102 	orr.w	r1, r3, r2
    49c4:	e8d0 4fef 	ldaex	r4, [r0]
    49c8:	4294      	cmp	r4, r2
    49ca:	d104      	bne.n	49d6 <nrfx_flag32_free+0x26>
    49cc:	e8c0 1fec 	stlex	ip, r1, [r0]
    49d0:	f1bc 0f00 	cmp.w	ip, #0
    49d4:	d1f6      	bne.n	49c4 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    49d6:	d1f2      	bne.n	49be <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    49d8:	4801      	ldr	r0, [pc, #4]	; (49e0 <nrfx_flag32_free+0x30>)
}
    49da:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    49dc:	4801      	ldr	r0, [pc, #4]	; (49e4 <nrfx_flag32_free+0x34>)
    49de:	e7fc      	b.n	49da <nrfx_flag32_free+0x2a>
    49e0:	0bad0000 	.word	0x0bad0000
    49e4:	0bad0004 	.word	0x0bad0004

000049e8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    49e8:	4b04      	ldr	r3, [pc, #16]	; (49fc <nrfx_clock_init+0x14>)
    49ea:	791a      	ldrb	r2, [r3, #4]
    49ec:	b922      	cbnz	r2, 49f8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    49ee:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    49f0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    49f2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    49f4:	4802      	ldr	r0, [pc, #8]	; (4a00 <nrfx_clock_init+0x18>)
    49f6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    49f8:	4802      	ldr	r0, [pc, #8]	; (4a04 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    49fa:	4770      	bx	lr
    49fc:	20000e1c 	.word	0x20000e1c
    4a00:	0bad0000 	.word	0x0bad0000
    4a04:	0bad000c 	.word	0x0bad000c

00004a08 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4a0c:	b510      	push	{r4, lr}
    4a0e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4a12:	b152      	cbz	r2, 4a2a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a14:	2000      	movs	r0, #0
    4a16:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4a1a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4a1e:	2201      	movs	r2, #1
    4a20:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4a24:	4b11      	ldr	r3, [pc, #68]	; (4a6c <nrfx_power_clock_irq_handler+0x64>)
    4a26:	681b      	ldr	r3, [r3, #0]
    4a28:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a2a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4a32:	b18a      	cbz	r2, 4a58 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a34:	2200      	movs	r2, #0
    4a36:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a3a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a3e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a42:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4a46:	f002 0203 	and.w	r2, r2, #3
    4a4a:	2a01      	cmp	r2, #1
    4a4c:	f04f 0102 	mov.w	r1, #2
    4a50:	d103      	bne.n	4a5a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a52:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a56:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a58:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4a5a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a5e:	4b03      	ldr	r3, [pc, #12]	; (4a6c <nrfx_power_clock_irq_handler+0x64>)
    4a60:	2001      	movs	r0, #1
}
    4a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a66:	681b      	ldr	r3, [r3, #0]
    4a68:	4718      	bx	r3
    4a6a:	bf00      	nop
    4a6c:	20000e1c 	.word	0x20000e1c

00004a70 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4a70:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4a72:	4801      	ldr	r0, [pc, #4]	; (4a78 <nrfx_dppi_channel_alloc+0x8>)
    4a74:	f7ff bf80 	b.w	4978 <nrfx_flag32_alloc>
    4a78:	200000ac 	.word	0x200000ac

00004a7c <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a7c:	4a06      	ldr	r2, [pc, #24]	; (4a98 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    4a7e:	f000 001f 	and.w	r0, r0, #31
    4a82:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a86:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    cnf &= ~to_update;
    4a8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4a8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4a92:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    4a96:	4770      	bx	lr
    4a98:	50842500 	.word	0x50842500

00004a9c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4a9c:	4b03      	ldr	r3, [pc, #12]	; (4aac <pin_in_use_by_te+0x10>)
    4a9e:	3008      	adds	r0, #8
    4aa0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4aa4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4aa8:	4770      	bx	lr
    4aaa:	bf00      	nop
    4aac:	200000b0 	.word	0x200000b0

00004ab0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4ab0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ab2:	4c0d      	ldr	r4, [pc, #52]	; (4ae8 <call_handler+0x38>)
    4ab4:	f100 0308 	add.w	r3, r0, #8
    4ab8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    4abc:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4abe:	05da      	lsls	r2, r3, #23
{
    4ac0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4ac2:	d507      	bpl.n	4ad4 <call_handler+0x24>
    4ac4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4ac8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4acc:	6852      	ldr	r2, [r2, #4]
    4ace:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4ad2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4ad4:	68a3      	ldr	r3, [r4, #8]
    4ad6:	b12b      	cbz	r3, 4ae4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4ad8:	4631      	mov	r1, r6
    4ada:	4628      	mov	r0, r5
    4adc:	68e2      	ldr	r2, [r4, #12]
    }
}
    4ade:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4ae2:	4718      	bx	r3
}
    4ae4:	bd70      	pop	{r4, r5, r6, pc}
    4ae6:	bf00      	nop
    4ae8:	200000b0 	.word	0x200000b0

00004aec <release_handler>:
{
    4aec:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4aee:	4a12      	ldr	r2, [pc, #72]	; (4b38 <release_handler+0x4c>)
    4af0:	3008      	adds	r0, #8
    4af2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4af6:	05d9      	lsls	r1, r3, #23
    4af8:	d51b      	bpl.n	4b32 <release_handler+0x46>
    4afa:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4afe:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4b02:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b06:	2000      	movs	r0, #0
    4b08:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4b0c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4b10:	f413 7f80 	tst.w	r3, #256	; 0x100
    4b14:	d003      	beq.n	4b1e <release_handler+0x32>
    4b16:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4b1a:	4299      	cmp	r1, r3
    4b1c:	d009      	beq.n	4b32 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b1e:	3001      	adds	r0, #1
    4b20:	2820      	cmp	r0, #32
    4b22:	d1f3      	bne.n	4b0c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4b24:	2300      	movs	r3, #0
    4b26:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b2a:	4804      	ldr	r0, [pc, #16]	; (4b3c <release_handler+0x50>)
}
    4b2c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4b2e:	f7ff bf3f 	b.w	49b0 <nrfx_flag32_free>
}
    4b32:	bc10      	pop	{r4}
    4b34:	4770      	bx	lr
    4b36:	bf00      	nop
    4b38:	200000b0 	.word	0x200000b0
    4b3c:	20000104 	.word	0x20000104

00004b40 <pin_handler_trigger_uninit>:
{
    4b40:	b538      	push	{r3, r4, r5, lr}
    4b42:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4b44:	f7ff ffaa 	bl	4a9c <pin_in_use_by_te>
    4b48:	4c0b      	ldr	r4, [pc, #44]	; (4b78 <pin_handler_trigger_uninit+0x38>)
    4b4a:	f102 0508 	add.w	r5, r2, #8
    4b4e:	b160      	cbz	r0, 4b6a <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b50:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4b52:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b56:	0b5b      	lsrs	r3, r3, #13
    4b58:	009b      	lsls	r3, r3, #2
    4b5a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4b5e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4b62:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    4b66:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4b6a:	4610      	mov	r0, r2
    4b6c:	f7ff ffbe 	bl	4aec <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b70:	2300      	movs	r3, #0
    4b72:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b76:	bd38      	pop	{r3, r4, r5, pc}
    4b78:	200000b0 	.word	0x200000b0

00004b7c <nrfx_gpiote_input_configure>:
{
    4b7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4b80:	4604      	mov	r4, r0
    4b82:	461d      	mov	r5, r3
    if (p_input_config)
    4b84:	b309      	cbz	r1, 4bca <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b86:	4f4e      	ldr	r7, [pc, #312]	; (4cc0 <nrfx_gpiote_input_configure+0x144>)
    4b88:	f100 0808 	add.w	r8, r0, #8
    4b8c:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b90:	07b3      	lsls	r3, r6, #30
    4b92:	d506      	bpl.n	4ba2 <nrfx_gpiote_input_configure+0x26>
    4b94:	f7ff ff82 	bl	4a9c <pin_in_use_by_te>
    4b98:	b118      	cbz	r0, 4ba2 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4b9a:	484a      	ldr	r0, [pc, #296]	; (4cc4 <nrfx_gpiote_input_configure+0x148>)
}
    4b9c:	b002      	add	sp, #8
    4b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4ba2:	4849      	ldr	r0, [pc, #292]	; (4cc8 <nrfx_gpiote_input_configure+0x14c>)
    *p_pin = pin_number & 0x1F;
    4ba4:	f004 031f 	and.w	r3, r4, #31
    4ba8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4bac:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4bb0:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    4bb2:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4bb6:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4bba:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4bbe:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    4bc2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    4bc6:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    4bca:	b19a      	cbz	r2, 4bf4 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bcc:	4e3c      	ldr	r6, [pc, #240]	; (4cc0 <nrfx_gpiote_input_configure+0x144>)
    4bce:	f104 0708 	add.w	r7, r4, #8
    4bd2:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4bd6:	7813      	ldrb	r3, [r2, #0]
        if (pin_is_output(pin))
    4bd8:	f011 0f02 	tst.w	r1, #2
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4bdc:	6850      	ldr	r0, [r2, #4]
        if (pin_is_output(pin))
    4bde:	d00c      	beq.n	4bfa <nrfx_gpiote_input_configure+0x7e>
            if (use_evt)
    4be0:	2800      	cmp	r0, #0
    4be2:	d1da      	bne.n	4b9a <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4be4:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
    4be8:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4bec:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
    4bf0:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    4bf4:	bbd5      	cbnz	r5, 4c6c <nrfx_gpiote_input_configure+0xf0>
        err = NRFX_SUCCESS;
    4bf6:	4835      	ldr	r0, [pc, #212]	; (4ccc <nrfx_gpiote_input_configure+0x150>)
    4bf8:	e7d0      	b.n	4b9c <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4bfa:	f021 0120 	bic.w	r1, r1, #32
    4bfe:	04c9      	lsls	r1, r1, #19
    4c00:	0cc9      	lsrs	r1, r1, #19
    4c02:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    4c06:	2800      	cmp	r0, #0
    4c08:	d0ec      	beq.n	4be4 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    4c0a:	2b03      	cmp	r3, #3
    4c0c:	d8c5      	bhi.n	4b9a <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4c0e:	6852      	ldr	r2, [r2, #4]
    4c10:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4c14:	4662      	mov	r2, ip
    4c16:	0092      	lsls	r2, r2, #2
    4c18:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4c1c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4c20:	b923      	cbnz	r3, 4c2c <nrfx_gpiote_input_configure+0xb0>
    p_reg->CONFIG[idx] = 0;
    4c22:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4c26:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
#endif
}
    4c2a:	e7db      	b.n	4be4 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4c2c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c30:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4c34:	f020 0003 	bic.w	r0, r0, #3
    4c38:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c3c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4c40:	f041 0120 	orr.w	r1, r1, #32
    4c44:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    4c48:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4c4c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c50:	0220      	lsls	r0, r4, #8
    4c52:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4c56:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    4c5a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    4c5e:	ea40 000e 	orr.w	r0, r0, lr
    4c62:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4c66:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    4c6a:	e7bb      	b.n	4be4 <nrfx_gpiote_input_configure+0x68>
    release_handler(pin);
    4c6c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c6e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c72:	f7ff ff3b 	bl	4aec <release_handler>
    if (!handler)
    4c76:	2e00      	cmp	r6, #0
    4c78:	d0bd      	beq.n	4bf6 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c7a:	4d11      	ldr	r5, [pc, #68]	; (4cc0 <nrfx_gpiote_input_configure+0x144>)
    4c7c:	e9d5 2300 	ldrd	r2, r3, [r5]
    4c80:	4296      	cmp	r6, r2
    4c82:	d101      	bne.n	4c88 <nrfx_gpiote_input_configure+0x10c>
    4c84:	429f      	cmp	r7, r3
    4c86:	d018      	beq.n	4cba <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4c88:	4811      	ldr	r0, [pc, #68]	; (4cd0 <nrfx_gpiote_input_configure+0x154>)
    4c8a:	f10d 0107 	add.w	r1, sp, #7
    4c8e:	f7ff fe73 	bl	4978 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4c92:	4b0e      	ldr	r3, [pc, #56]	; (4ccc <nrfx_gpiote_input_configure+0x150>)
    4c94:	4298      	cmp	r0, r3
    4c96:	d181      	bne.n	4b9c <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4c98:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4c9c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4ca0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4ca2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4ca4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4ca8:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cac:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4cb4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4cb8:	e79d      	b.n	4bf6 <nrfx_gpiote_input_configure+0x7a>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4cba:	2200      	movs	r2, #0
    4cbc:	e7ee      	b.n	4c9c <nrfx_gpiote_input_configure+0x120>
    4cbe:	bf00      	nop
    4cc0:	200000b0 	.word	0x200000b0
    4cc4:	0bad0004 	.word	0x0bad0004
    4cc8:	50842500 	.word	0x50842500
    4ccc:	0bad0000 	.word	0x0bad0000
    4cd0:	20000104 	.word	0x20000104

00004cd4 <nrfx_gpiote_output_configure>:
{
    4cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cd6:	4604      	mov	r4, r0
    if (p_config)
    4cd8:	b379      	cbz	r1, 4d3a <nrfx_gpiote_output_configure+0x66>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cda:	4e3a      	ldr	r6, [pc, #232]	; (4dc4 <nrfx_gpiote_output_configure+0xf0>)
    4cdc:	f100 0708 	add.w	r7, r0, #8
    4ce0:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4ce4:	07ab      	lsls	r3, r5, #30
    4ce6:	d404      	bmi.n	4cf2 <nrfx_gpiote_output_configure+0x1e>
    4ce8:	f7ff fed8 	bl	4a9c <pin_in_use_by_te>
    4cec:	b108      	cbz	r0, 4cf2 <nrfx_gpiote_output_configure+0x1e>
{
    4cee:	4836      	ldr	r0, [pc, #216]	; (4dc8 <nrfx_gpiote_output_configure+0xf4>)
}
    4cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4cf2:	f015 0f1c 	tst.w	r5, #28
    4cf6:	784b      	ldrb	r3, [r1, #1]
    4cf8:	d122      	bne.n	4d40 <nrfx_gpiote_output_configure+0x6c>
    *p_pin = pin_number & 0x1F;
    4cfa:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4cfe:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4dcc <nrfx_gpiote_output_configure+0xf8>
    4d02:	f100 0e80 	add.w	lr, r0, #128	; 0x80
    4d06:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4d0a:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d0e:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4d10:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4d14:	7809      	ldrb	r1, [r1, #0]
    4d16:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    cnf &= ~to_update;
    4d1a:	f02c 0c07 	bic.w	ip, ip, #7
    4d1e:	ea43 030c 	orr.w	r3, r3, ip
    4d22:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    4d26:	4929      	ldr	r1, [pc, #164]	; (4dcc <nrfx_gpiote_output_configure+0xf8>)
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d28:	f043 0301 	orr.w	r3, r3, #1
    reg->PIN_CNF[pin_number] = cnf;
    4d2c:	3080      	adds	r0, #128	; 0x80
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4d2e:	f045 0503 	orr.w	r5, r5, #3
    4d32:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    4d36:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4d3a:	b922      	cbnz	r2, 4d46 <nrfx_gpiote_output_configure+0x72>
    return NRFX_SUCCESS;
    4d3c:	4824      	ldr	r0, [pc, #144]	; (4dd0 <nrfx_gpiote_output_configure+0xfc>)
    4d3e:	e7d7      	b.n	4cf0 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4d40:	2b01      	cmp	r3, #1
    4d42:	d1da      	bne.n	4cfa <nrfx_gpiote_output_configure+0x26>
    4d44:	e7d3      	b.n	4cee <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d46:	4e1f      	ldr	r6, [pc, #124]	; (4dc4 <nrfx_gpiote_output_configure+0xf0>)
    4d48:	f104 0708 	add.w	r7, r4, #8
    4d4c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4d50:	0783      	lsls	r3, r0, #30
    4d52:	d5cc      	bpl.n	4cee <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4d54:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4d58:	2300      	movs	r3, #0
    4d5a:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4d5c:	f020 0020 	bic.w	r0, r0, #32
    4d60:	0089      	lsls	r1, r1, #2
    4d62:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4d66:	04c0      	lsls	r0, r0, #19
    4d68:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4d6c:	0cc0      	lsrs	r0, r0, #19
    4d6e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4d72:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4d76:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d7a:	7855      	ldrb	r5, [r2, #1]
    4d7c:	2d00      	cmp	r5, #0
    4d7e:	d0dd      	beq.n	4d3c <nrfx_gpiote_output_configure+0x68>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d80:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4d84:	7892      	ldrb	r2, [r2, #2]
    4d86:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4d8a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d8e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d92:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d96:	0223      	lsls	r3, r4, #8
    4d98:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d9c:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d9e:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4da2:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4da6:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4da8:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4daa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4dae:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4db2:	4313      	orrs	r3, r2
    4db4:	f040 0020 	orr.w	r0, r0, #32
    4db8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4dbc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4dc0:	e7bc      	b.n	4d3c <nrfx_gpiote_output_configure+0x68>
    4dc2:	bf00      	nop
    4dc4:	200000b0 	.word	0x200000b0
    4dc8:	0bad0004 	.word	0x0bad0004
    4dcc:	50842500 	.word	0x50842500
    4dd0:	0bad0000 	.word	0x0bad0000

00004dd4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4dd4:	4b01      	ldr	r3, [pc, #4]	; (4ddc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4dd6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4dda:	4770      	bx	lr
    4ddc:	200000b0 	.word	0x200000b0

00004de0 <nrfx_gpiote_channel_get>:
{
    4de0:	b508      	push	{r3, lr}
    4de2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4de4:	f7ff fe5a 	bl	4a9c <pin_in_use_by_te>
    4de8:	b138      	cbz	r0, 4dfa <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4dea:	4b05      	ldr	r3, [pc, #20]	; (4e00 <nrfx_gpiote_channel_get+0x20>)
    4dec:	3208      	adds	r2, #8
    4dee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4df2:	4804      	ldr	r0, [pc, #16]	; (4e04 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4df4:	0b5b      	lsrs	r3, r3, #13
    4df6:	700b      	strb	r3, [r1, #0]
}
    4df8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4dfa:	4803      	ldr	r0, [pc, #12]	; (4e08 <nrfx_gpiote_channel_get+0x28>)
    4dfc:	e7fc      	b.n	4df8 <nrfx_gpiote_channel_get+0x18>
    4dfe:	bf00      	nop
    4e00:	200000b0 	.word	0x200000b0
    4e04:	0bad0000 	.word	0x0bad0000
    4e08:	0bad0004 	.word	0x0bad0004

00004e0c <nrfx_gpiote_init>:
{
    4e0c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4e0e:	4c0f      	ldr	r4, [pc, #60]	; (4e4c <nrfx_gpiote_init+0x40>)
    4e10:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4e14:	b9bd      	cbnz	r5, 4e46 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4e16:	2240      	movs	r2, #64	; 0x40
    4e18:	4629      	mov	r1, r5
    4e1a:	f104 0010 	add.w	r0, r4, #16
    4e1e:	f002 f8f8 	bl	7012 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4e22:	200d      	movs	r0, #13
    4e24:	f7fd fece 	bl	2bc4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e28:	4b09      	ldr	r3, [pc, #36]	; (4e50 <nrfx_gpiote_init+0x44>)
    return err_code;
    4e2a:	480a      	ldr	r0, [pc, #40]	; (4e54 <nrfx_gpiote_init+0x48>)
    4e2c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4e30:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4e34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4e38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4e3c:	2301      	movs	r3, #1
    4e3e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4e42:	6563      	str	r3, [r4, #84]	; 0x54
}
    4e44:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4e46:	4804      	ldr	r0, [pc, #16]	; (4e58 <nrfx_gpiote_init+0x4c>)
    4e48:	e7fc      	b.n	4e44 <nrfx_gpiote_init+0x38>
    4e4a:	bf00      	nop
    4e4c:	200000b0 	.word	0x200000b0
    4e50:	5000d000 	.word	0x5000d000
    4e54:	0bad0000 	.word	0x0bad0000
    4e58:	0bad0005 	.word	0x0bad0005

00004e5c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4e5c:	4b03      	ldr	r3, [pc, #12]	; (4e6c <nrfx_gpiote_is_init+0x10>)
    4e5e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4e62:	3800      	subs	r0, #0
    4e64:	bf18      	it	ne
    4e66:	2001      	movne	r0, #1
    4e68:	4770      	bx	lr
    4e6a:	bf00      	nop
    4e6c:	200000b0 	.word	0x200000b0

00004e70 <nrfx_gpiote_channel_free>:
{
    4e70:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e72:	4801      	ldr	r0, [pc, #4]	; (4e78 <nrfx_gpiote_channel_free+0x8>)
    4e74:	f7ff bd9c 	b.w	49b0 <nrfx_flag32_free>
    4e78:	20000100 	.word	0x20000100

00004e7c <nrfx_gpiote_channel_alloc>:
{
    4e7c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e7e:	4801      	ldr	r0, [pc, #4]	; (4e84 <nrfx_gpiote_channel_alloc+0x8>)
    4e80:	f7ff bd7a 	b.w	4978 <nrfx_flag32_alloc>
    4e84:	20000100 	.word	0x20000100

00004e88 <nrfx_gpiote_trigger_enable>:
{
    4e88:	4602      	mov	r2, r0
    4e8a:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e8c:	f7ff fe06 	bl	4a9c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e90:	4b1c      	ldr	r3, [pc, #112]	; (4f04 <nrfx_gpiote_trigger_enable+0x7c>)
    4e92:	f102 0408 	add.w	r4, r2, #8
    4e96:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4e9a:	b1e0      	cbz	r0, 4ed6 <nrfx_gpiote_trigger_enable+0x4e>
    4e9c:	f013 0402 	ands.w	r4, r3, #2
    4ea0:	d119      	bne.n	4ed6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ea2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4ea4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4ea6:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4eaa:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4eae:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4eb2:	6004      	str	r4, [r0, #0]
    4eb4:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4eb8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4eba:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4ebe:	f040 0001 	orr.w	r0, r0, #1
    4ec2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4ec6:	b129      	cbz	r1, 4ed4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4ec8:	2201      	movs	r2, #1
    4eca:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4ece:	4a0e      	ldr	r2, [pc, #56]	; (4f08 <nrfx_gpiote_trigger_enable+0x80>)
    4ed0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4ed4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4ed6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4eda:	2b04      	cmp	r3, #4
    4edc:	d00e      	beq.n	4efc <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4ede:	2b05      	cmp	r3, #5
    4ee0:	d00e      	beq.n	4f00 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    4ee2:	4b0a      	ldr	r3, [pc, #40]	; (4f0c <nrfx_gpiote_trigger_enable+0x84>)
    4ee4:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    4ee6:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4eea:	40d9      	lsrs	r1, r3
    4eec:	f001 0101 	and.w	r1, r1, #1
    4ef0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4ef2:	4610      	mov	r0, r2
}
    4ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4ef8:	f7ff bdc0 	b.w	4a7c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4efc:	2103      	movs	r1, #3
    4efe:	e7f8      	b.n	4ef2 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4f00:	2102      	movs	r1, #2
    4f02:	e7f6      	b.n	4ef2 <nrfx_gpiote_trigger_enable+0x6a>
    4f04:	200000b0 	.word	0x200000b0
    4f08:	5000d000 	.word	0x5000d000
    4f0c:	50842500 	.word	0x50842500

00004f10 <nrfx_gpiote_trigger_disable>:
{
    4f10:	b508      	push	{r3, lr}
    4f12:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f14:	f7ff fdc2 	bl	4a9c <pin_in_use_by_te>
    4f18:	b1c0      	cbz	r0, 4f4c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4f1a:	4b0f      	ldr	r3, [pc, #60]	; (4f58 <nrfx_gpiote_trigger_disable+0x48>)
    4f1c:	f102 0108 	add.w	r1, r2, #8
    4f20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f24:	0799      	lsls	r1, r3, #30
    4f26:	d411      	bmi.n	4f4c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f28:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f2a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f2c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4f2e:	490b      	ldr	r1, [pc, #44]	; (4f5c <nrfx_gpiote_trigger_disable+0x4c>)
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4f36:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4f3a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4f3e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4f42:	f022 0203 	bic.w	r2, r2, #3
    4f46:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4f4a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f4c:	2100      	movs	r1, #0
}
    4f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4f52:	4610      	mov	r0, r2
    4f54:	f7ff bd92 	b.w	4a7c <nrf_gpio_cfg_sense_set>
    4f58:	200000b0 	.word	0x200000b0
    4f5c:	5000d000 	.word	0x5000d000

00004f60 <nrfx_gpiote_pin_uninit>:
{
    4f60:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4f62:	4b0c      	ldr	r3, [pc, #48]	; (4f94 <nrfx_gpiote_pin_uninit+0x34>)
    4f64:	f100 0208 	add.w	r2, r0, #8
    4f68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4f6c:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4f6e:	07db      	lsls	r3, r3, #31
    4f70:	d50d      	bpl.n	4f8e <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    4f72:	f7ff ffcd 	bl	4f10 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4f76:	4620      	mov	r0, r4
    4f78:	f7ff fde2 	bl	4b40 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4f7c:	2202      	movs	r2, #2
    4f7e:	4b06      	ldr	r3, [pc, #24]	; (4f98 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    4f80:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4f84:	3480      	adds	r4, #128	; 0x80
    4f86:	4805      	ldr	r0, [pc, #20]	; (4f9c <nrfx_gpiote_pin_uninit+0x3c>)
    4f88:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4f8c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f8e:	4804      	ldr	r0, [pc, #16]	; (4fa0 <nrfx_gpiote_pin_uninit+0x40>)
    4f90:	e7fc      	b.n	4f8c <nrfx_gpiote_pin_uninit+0x2c>
    4f92:	bf00      	nop
    4f94:	200000b0 	.word	0x200000b0
    4f98:	50842500 	.word	0x50842500
    4f9c:	0bad0000 	.word	0x0bad0000
    4fa0:	0bad0004 	.word	0x0bad0004

00004fa4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4fa8:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4faa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fac:	462c      	mov	r4, r5
{
    4fae:	4b4d      	ldr	r3, [pc, #308]	; (50e4 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4fb0:	484d      	ldr	r0, [pc, #308]	; (50e8 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fb2:	494e      	ldr	r1, [pc, #312]	; (50ec <nrfx_gpiote_irq_handler+0x148>)
{
    4fb4:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fb6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4fb8:	b136      	cbz	r6, 4fc8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4fba:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4fbe:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fc0:	bf1e      	ittt	ne
    4fc2:	601c      	strne	r4, [r3, #0]
    4fc4:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4fc6:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fc8:	3304      	adds	r3, #4
    4fca:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4fcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4fd0:	d1f1      	bne.n	4fb6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fd2:	4f45      	ldr	r7, [pc, #276]	; (50e8 <nrfx_gpiote_irq_handler+0x144>)
    4fd4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4fd8:	b193      	cbz	r3, 5000 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    4fda:	4e45      	ldr	r6, [pc, #276]	; (50f0 <nrfx_gpiote_irq_handler+0x14c>)
    4fdc:	6a33      	ldr	r3, [r6, #32]
    4fde:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4fe0:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4fe2:	f04f 0a01 	mov.w	sl, #1
    4fe6:	f10d 090c 	add.w	r9, sp, #12
            while (latch[i])
    4fea:	9803      	ldr	r0, [sp, #12]
    4fec:	b970      	cbnz	r0, 500c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4fee:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    4ff2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4ff6:	6a33      	ldr	r3, [r6, #32]
    4ff8:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4ffa:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d1f0      	bne.n	4fe2 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    5000:	2401      	movs	r4, #1
    while (mask)
    5002:	2d00      	cmp	r5, #0
    5004:	d156      	bne.n	50b4 <nrfx_gpiote_irq_handler+0x110>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5006:	b005      	add	sp, #20
    5008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    500c:	fa90 fba0 	rbit	fp, r0
    5010:	fabb fb8b 	clz	fp, fp
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5014:	4a37      	ldr	r2, [pc, #220]	; (50f4 <nrfx_gpiote_irq_handler+0x150>)
    5016:	f10b 0308 	add.w	r3, fp, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    501a:	ea4f 0cdb 	mov.w	ip, fp, lsr #3
    501e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    5022:	f00b 0407 	and.w	r4, fp, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5026:	f819 300c 	ldrb.w	r3, [r9, ip]
    502a:	fa0a f404 	lsl.w	r4, sl, r4
    502e:	ea23 0304 	bic.w	r3, r3, r4
    5032:	f809 300c 	strb.w	r3, [r9, ip]
    5036:	eb06 038b 	add.w	r3, r6, fp, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    503a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    503e:	f3c1 0282 	ubfx	r2, r1, #2, #3
    if (is_level(trigger))
    5042:	06c9      	lsls	r1, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5044:	4690      	mov	r8, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5046:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    504a:	d518      	bpl.n	507e <nrfx_gpiote_irq_handler+0xda>
        call_handler(pin, trigger);
    504c:	4611      	mov	r1, r2
    504e:	4658      	mov	r0, fp
    5050:	9301      	str	r3, [sp, #4]
    5052:	f7ff fd2d 	bl	4ab0 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5056:	9b01      	ldr	r3, [sp, #4]
    5058:	b2e4      	uxtb	r4, r4
    505a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    505e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5062:	429c      	cmp	r4, r3
    5064:	d107      	bne.n	5076 <nrfx_gpiote_irq_handler+0xd2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5066:	2100      	movs	r1, #0
    5068:	4658      	mov	r0, fp
    506a:	f7ff fd07 	bl	4a7c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    506e:	4621      	mov	r1, r4
    5070:	4658      	mov	r0, fp
    5072:	f7ff fd03 	bl	4a7c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    5076:	fa0a f00b 	lsl.w	r0, sl, fp
    507a:	6230      	str	r0, [r6, #32]
}
    507c:	e7b5      	b.n	4fea <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    507e:	2c02      	cmp	r4, #2
    5080:	d10c      	bne.n	509c <nrfx_gpiote_irq_handler+0xf8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5082:	2103      	movs	r1, #3
    5084:	4658      	mov	r0, fp
    5086:	f7ff fcf9 	bl	4a7c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    508a:	f008 0305 	and.w	r3, r8, #5
    508e:	2b01      	cmp	r3, #1
    5090:	d1f1      	bne.n	5076 <nrfx_gpiote_irq_handler+0xd2>
            call_handler(pin, trigger);
    5092:	4641      	mov	r1, r8
    5094:	4658      	mov	r0, fp
    5096:	f7ff fd0b 	bl	4ab0 <call_handler>
    509a:	e7ec      	b.n	5076 <nrfx_gpiote_irq_handler+0xd2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    509c:	2102      	movs	r1, #2
    509e:	4658      	mov	r0, fp
    50a0:	9201      	str	r2, [sp, #4]
    50a2:	f7ff fceb 	bl	4a7c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    50a6:	9a01      	ldr	r2, [sp, #4]
    50a8:	2a03      	cmp	r2, #3
    50aa:	d0f2      	beq.n	5092 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    50ac:	2c03      	cmp	r4, #3
    50ae:	d1e2      	bne.n	5076 <nrfx_gpiote_irq_handler+0xd2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    50b0:	428a      	cmp	r2, r1
    50b2:	e7ed      	b.n	5090 <nrfx_gpiote_irq_handler+0xec>
        uint32_t ch = NRF_CTZ(mask);
    50b4:	fa95 f3a5 	rbit	r3, r5
    50b8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    50bc:	fa04 f203 	lsl.w	r2, r4, r3
    50c0:	009b      	lsls	r3, r3, #2
    50c2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    50c6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    50ca:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    50ce:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50d2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    50d6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    50da:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    50de:	f7ff fce7 	bl	4ab0 <call_handler>
    50e2:	e78e      	b.n	5002 <nrfx_gpiote_irq_handler+0x5e>
    50e4:	5000d100 	.word	0x5000d100
    50e8:	5000d000 	.word	0x5000d000
    50ec:	5000d120 	.word	0x5000d120
    50f0:	50842500 	.word	0x50842500
    50f4:	200000b0 	.word	0x200000b0

000050f8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    50f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50fc:	b086      	sub	sp, #24
    50fe:	4605      	mov	r5, r0
    5100:	460e      	mov	r6, r1
    5102:	af00      	add	r7, sp, #0
	__asm__ volatile(
    5104:	f04f 0320 	mov.w	r3, #32
    5108:	f3ef 8811 	mrs	r8, BASEPRI
    510c:	f383 8812 	msr	BASEPRI_MAX, r3
    5110:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5114:	f000 fe4e 	bl	5db4 <z_impl_z_current_get>
    5118:	2d04      	cmp	r5, #4
    511a:	bf98      	it	ls
    511c:	4b2c      	ldrls	r3, [pc, #176]	; (51d0 <z_fatal_error+0xd8>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    511e:	46e9      	mov	r9, sp
    5120:	b08a      	sub	sp, #40	; 0x28
    5122:	4604      	mov	r4, r0
    5124:	466a      	mov	r2, sp
    5126:	bf94      	ite	ls
    5128:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    512c:	4b29      	ldrhi	r3, [pc, #164]	; (51d4 <z_fatal_error+0xdc>)
    512e:	61d3      	str	r3, [r2, #28]
    5130:	f240 3301 	movw	r3, #769	; 0x301
    5134:	f04f 0a00 	mov.w	sl, #0
    5138:	8493      	strh	r3, [r2, #36]	; 0x24
    513a:	4927      	ldr	r1, [pc, #156]	; (51d8 <z_fatal_error+0xe0>)
    513c:	4b27      	ldr	r3, [pc, #156]	; (51dc <z_fatal_error+0xe4>)
    513e:	e9c2 1505 	strd	r1, r5, [r2, #20]
    5142:	f8c2 a020 	str.w	sl, [r2, #32]
    5146:	f842 3f10 	str.w	r3, [r2, #16]!
    514a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    514e:	4653      	mov	r3, sl
    5150:	4823      	ldr	r0, [pc, #140]	; (51e0 <z_fatal_error+0xe8>)
    5152:	f7fd f829 	bl	21a8 <z_impl_z_log_msg_static_create>
    5156:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5158:	b17e      	cbz	r6, 517a <z_fatal_error+0x82>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    515a:	69f3      	ldr	r3, [r6, #28]
    515c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5160:	b15b      	cbz	r3, 517a <z_fatal_error+0x82>
		LOG_ERR("Fault during interrupt handling\n");
    5162:	4b20      	ldr	r3, [pc, #128]	; (51e4 <z_fatal_error+0xec>)
    5164:	617b      	str	r3, [r7, #20]
    5166:	2302      	movs	r3, #2
    5168:	613b      	str	r3, [r7, #16]
    516a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    516e:	4653      	mov	r3, sl
    5170:	481b      	ldr	r0, [pc, #108]	; (51e0 <z_fatal_error+0xe8>)
    5172:	f107 0210 	add.w	r2, r7, #16
    5176:	f7fd f817 	bl	21a8 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    517a:	b12c      	cbz	r4, 5188 <z_fatal_error+0x90>
    517c:	4620      	mov	r0, r4
    517e:	f002 faa9 	bl	76d4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5182:	b108      	cbz	r0, 5188 <z_fatal_error+0x90>
    5184:	7803      	ldrb	r3, [r0, #0]
    5186:	b903      	cbnz	r3, 518a <z_fatal_error+0x92>
		thread_name = "unknown";
    5188:	4817      	ldr	r0, [pc, #92]	; (51e8 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    518a:	46e9      	mov	r9, sp
    518c:	b08a      	sub	sp, #40	; 0x28
    518e:	466a      	mov	r2, sp
    5190:	4b16      	ldr	r3, [pc, #88]	; (51ec <z_fatal_error+0xf4>)
    5192:	61d0      	str	r0, [r2, #28]
    5194:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5198:	f240 3301 	movw	r3, #769	; 0x301
    519c:	8413      	strh	r3, [r2, #32]
    519e:	4b14      	ldr	r3, [pc, #80]	; (51f0 <z_fatal_error+0xf8>)
    51a0:	f842 3f10 	str.w	r3, [r2, #16]!
    51a4:	2300      	movs	r3, #0
    51a6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    51aa:	480d      	ldr	r0, [pc, #52]	; (51e0 <z_fatal_error+0xe8>)
    51ac:	f7fc fffc 	bl	21a8 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    51b0:	4631      	mov	r1, r6
    51b2:	46cd      	mov	sp, r9
    51b4:	4628      	mov	r0, r5
    51b6:	f7ff fa55 	bl	4664 <k_sys_fatal_error_handler>
	__asm__ volatile(
    51ba:	f388 8811 	msr	BASEPRI, r8
    51be:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    51c2:	4620      	mov	r0, r4
    51c4:	f7fe f96a 	bl	349c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    51c8:	3718      	adds	r7, #24
    51ca:	46bd      	mov	sp, r7
    51cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51d0:	00007f24 	.word	0x00007f24
    51d4:	000087e2 	.word	0x000087e2
    51d8:	000087f8 	.word	0x000087f8
    51dc:	01000005 	.word	0x01000005
    51e0:	00007ce4 	.word	0x00007ce4
    51e4:	00008820 	.word	0x00008820
    51e8:	000087f0 	.word	0x000087f0
    51ec:	00008841 	.word	0x00008841
    51f0:	01000004 	.word	0x01000004

000051f4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51f4:	4b0f      	ldr	r3, [pc, #60]	; (5234 <z_sys_init_run_level+0x40>)
{
    51f6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    51f8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    51fc:	3001      	adds	r0, #1
    51fe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5202:	42a6      	cmp	r6, r4
    5204:	d800      	bhi.n	5208 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5206:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5208:	e9d4 3500 	ldrd	r3, r5, [r4]
    520c:	4628      	mov	r0, r5
    520e:	4798      	blx	r3
		if (dev != NULL) {
    5210:	b16d      	cbz	r5, 522e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    5212:	b138      	cbz	r0, 5224 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5214:	2800      	cmp	r0, #0
    5216:	bfb8      	it	lt
    5218:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    521a:	28ff      	cmp	r0, #255	; 0xff
    521c:	bfa8      	it	ge
    521e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    5220:	68eb      	ldr	r3, [r5, #12]
    5222:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5224:	68ea      	ldr	r2, [r5, #12]
    5226:	7853      	ldrb	r3, [r2, #1]
    5228:	f043 0301 	orr.w	r3, r3, #1
    522c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    522e:	3408      	adds	r4, #8
    5230:	e7e7      	b.n	5202 <z_sys_init_run_level+0xe>
    5232:	bf00      	nop
    5234:	00007f38 	.word	0x00007f38

00005238 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5238:	2201      	movs	r2, #1
{
    523a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    523c:	4b09      	ldr	r3, [pc, #36]	; (5264 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    523e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5240:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5242:	f7ff ffd7 	bl	51f4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5246:	f001 f82d 	bl	62a4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    524a:	2004      	movs	r0, #4
    524c:	f7ff ffd2 	bl	51f4 <z_sys_init_run_level>

	z_init_static_threads();
    5250:	f000 f958 	bl	5504 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5254:	f7fb fd92 	bl	d7c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5258:	4a03      	ldr	r2, [pc, #12]	; (5268 <bg_thread_main+0x30>)
    525a:	7b13      	ldrb	r3, [r2, #12]
    525c:	f023 0301 	bic.w	r3, r3, #1
    5260:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5262:	bd08      	pop	{r3, pc}
    5264:	2000103d 	.word	0x2000103d
    5268:	20000780 	.word	0x20000780

0000526c <z_bss_zero>:
{
    526c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    526e:	4803      	ldr	r0, [pc, #12]	; (527c <z_bss_zero+0x10>)
    5270:	4a03      	ldr	r2, [pc, #12]	; (5280 <z_bss_zero+0x14>)
    5272:	2100      	movs	r1, #0
    5274:	1a12      	subs	r2, r2, r0
    5276:	f002 f9d3 	bl	7620 <z_early_memset>
}
    527a:	bd08      	pop	{r3, pc}
    527c:	20000220 	.word	0x20000220
    5280:	20001040 	.word	0x20001040

00005284 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    5284:	2300      	movs	r3, #0
    5286:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5288:	b570      	push	{r4, r5, r6, lr}
    528a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    528c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5290:	220f      	movs	r2, #15
    5292:	9301      	str	r3, [sp, #4]
    5294:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5298:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    529a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    529e:	4d0e      	ldr	r5, [pc, #56]	; (52d8 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    52a0:	4e0e      	ldr	r6, [pc, #56]	; (52dc <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    52a2:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    52a6:	490e      	ldr	r1, [pc, #56]	; (52e0 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    52a8:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    52ac:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    52ae:	fb02 1100 	mla	r1, r2, r0, r1
    52b2:	4b0c      	ldr	r3, [pc, #48]	; (52e4 <z_init_cpu+0x60>)
    52b4:	4630      	mov	r0, r6
    52b6:	9500      	str	r5, [sp, #0]
    52b8:	f000 f8c8 	bl	544c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    52bc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    52be:	752c      	strb	r4, [r5, #20]
    52c0:	f023 0304 	bic.w	r3, r3, #4
    52c4:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    52c6:	4b08      	ldr	r3, [pc, #32]	; (52e8 <z_init_cpu+0x64>)
    52c8:	3401      	adds	r4, #1
    52ca:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    52ce:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    52d0:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    52d2:	b006      	add	sp, #24
    52d4:	bd70      	pop	{r4, r5, r6, pc}
    52d6:	bf00      	nop
    52d8:	20000e24 	.word	0x20000e24
    52dc:	20000700 	.word	0x20000700
    52e0:	20001b40 	.word	0x20001b40
    52e4:	000055bd 	.word	0x000055bd
    52e8:	20001340 	.word	0x20001340

000052ec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    52ec:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    52ee:	2000      	movs	r0, #0
{
    52f0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    52f2:	f7ff ff7f 	bl	51f4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    52f6:	4b2e      	ldr	r3, [pc, #184]	; (53b0 <z_cstart+0xc4>)
	uint32_t msp =
    52f8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    52fc:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    5300:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5304:	2400      	movs	r4, #0
    5306:	23e0      	movs	r3, #224	; 0xe0
    5308:	4d2a      	ldr	r5, [pc, #168]	; (53b4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    530a:	4e2b      	ldr	r6, [pc, #172]	; (53b8 <z_cstart+0xcc>)
    530c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5310:	77ec      	strb	r4, [r5, #31]
    5312:	762c      	strb	r4, [r5, #24]
    5314:	766c      	strb	r4, [r5, #25]
    5316:	76ac      	strb	r4, [r5, #26]
    5318:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    531c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    531e:	4f27      	ldr	r7, [pc, #156]	; (53bc <z_cstart+0xd0>)
    5320:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5324:	626b      	str	r3, [r5, #36]	; 0x24
    5326:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    532a:	f7fe f81b 	bl	3364 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    532e:	f7fd fbc5 	bl	2abc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5332:	f04f 33ff 	mov.w	r3, #4294967295
    5336:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5338:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    533a:	f7fe fa5d 	bl	37f8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    533e:	f7fe f8c3 	bl	34c8 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5342:	f7fc fdc5 	bl	1ed0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5346:	f240 1301 	movw	r3, #257	; 0x101
    534a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    534e:	ab06      	add	r3, sp, #24
    5350:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5352:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    5356:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5358:	f002 f956 	bl	7608 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    535c:	2001      	movs	r0, #1
    535e:	f7ff ff49 	bl	51f4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5362:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    5364:	4d16      	ldr	r5, [pc, #88]	; (53c0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    5366:	f7ff ff45 	bl	51f4 <z_sys_init_run_level>
	z_sched_init();
    536a:	f000 fc7b 	bl	5c64 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    536e:	4b15      	ldr	r3, [pc, #84]	; (53c4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5370:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5372:	9305      	str	r3, [sp, #20]
    5374:	2301      	movs	r3, #1
    5376:	4914      	ldr	r1, [pc, #80]	; (53c8 <z_cstart+0xdc>)
    5378:	f44f 6280 	mov.w	r2, #1024	; 0x400
    537c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5380:	4628      	mov	r0, r5
    5382:	463b      	mov	r3, r7
    5384:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5388:	9400      	str	r4, [sp, #0]
    538a:	f000 f85f 	bl	544c <z_setup_new_thread>
    538e:	4606      	mov	r6, r0
    5390:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    5392:	4628      	mov	r0, r5
    5394:	f022 0204 	bic.w	r2, r2, #4
    5398:	736a      	strb	r2, [r5, #13]
    539a:	f002 fa1b 	bl	77d4 <z_ready_thread>
	z_init_cpu(0);
    539e:	4620      	mov	r0, r4
    53a0:	f7ff ff70 	bl	5284 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    53a4:	463a      	mov	r2, r7
    53a6:	4631      	mov	r1, r6
    53a8:	4628      	mov	r0, r5
    53aa:	f7fd fccf 	bl	2d4c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    53ae:	bf00      	nop
    53b0:	20001340 	.word	0x20001340
    53b4:	e000ed00 	.word	0xe000ed00
    53b8:	20000e24 	.word	0x20000e24
    53bc:	00005239 	.word	0x00005239
    53c0:	20000780 	.word	0x20000780
    53c4:	0000807c 	.word	0x0000807c
    53c8:	20001c80 	.word	0x20001c80

000053cc <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
    53cc:	2000      	movs	r0, #0
{
    53ce:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    53d0:	4c05      	ldr	r4, [pc, #20]	; (53e8 <init_mem_slab_module+0x1c>)
    53d2:	4d06      	ldr	r5, [pc, #24]	; (53ec <init_mem_slab_module+0x20>)
    53d4:	42ac      	cmp	r4, r5
    53d6:	d300      	bcc.n	53da <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    53d8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    53da:	4620      	mov	r0, r4
    53dc:	f002 f924 	bl	7628 <create_free_list>
		if (rc < 0) {
    53e0:	2800      	cmp	r0, #0
    53e2:	dbf9      	blt.n	53d8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    53e4:	341c      	adds	r4, #28
    53e6:	e7f5      	b.n	53d4 <init_mem_slab_module+0x8>
    53e8:	200001bc 	.word	0x200001bc
    53ec:	200001bc 	.word	0x200001bc

000053f0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    53f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    53f2:	460c      	mov	r4, r1
	__asm__ volatile(
    53f4:	f04f 0520 	mov.w	r5, #32
    53f8:	f3ef 8111 	mrs	r1, BASEPRI
    53fc:	f385 8812 	msr	BASEPRI_MAX, r5
    5400:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5404:	6945      	ldr	r5, [r0, #20]
    5406:	b15d      	cbz	r5, 5420 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5408:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    540a:	682b      	ldr	r3, [r5, #0]
    540c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    540e:	6983      	ldr	r3, [r0, #24]
    5410:	3301      	adds	r3, #1
    5412:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5414:	2000      	movs	r0, #0
	__asm__ volatile(
    5416:	f381 8811 	msr	BASEPRI, r1
    541a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    541e:	e011      	b.n	5444 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5420:	ea52 0603 	orrs.w	r6, r2, r3
    5424:	d103      	bne.n	542e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    5426:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    542a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    542c:	e7f3      	b.n	5416 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    542e:	e9cd 2300 	strd	r2, r3, [sp]
    5432:	4602      	mov	r2, r0
    5434:	3008      	adds	r0, #8
    5436:	f000 fb1f 	bl	5a78 <z_pend_curr>
		if (result == 0) {
    543a:	b918      	cbnz	r0, 5444 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    543c:	4b02      	ldr	r3, [pc, #8]	; (5448 <k_mem_slab_alloc+0x58>)
    543e:	689b      	ldr	r3, [r3, #8]
    5440:	695b      	ldr	r3, [r3, #20]
    5442:	6023      	str	r3, [r4, #0]
}
    5444:	b002      	add	sp, #8
    5446:	bd70      	pop	{r4, r5, r6, pc}
    5448:	20000e24 	.word	0x20000e24

0000544c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    544c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5450:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5452:	f100 0558 	add.w	r5, r0, #88	; 0x58
    5456:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5458:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    545a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    545e:	2500      	movs	r5, #0
{
    5460:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    5462:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5464:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5466:	e9c0 5506 	strd	r5, r5, [r0, #24]
    546a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    546c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    546e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5470:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    5474:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5478:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    547a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    547c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    547e:	9202      	str	r2, [sp, #8]
    5480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    5482:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5486:	9201      	str	r2, [sp, #4]
    5488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    548a:	9200      	str	r2, [sp, #0]
    548c:	4642      	mov	r2, r8
    548e:	f7fd fc41 	bl	2d14 <arch_new_thread>
	if (!_current) {
    5492:	4b05      	ldr	r3, [pc, #20]	; (54a8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    5494:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5496:	689b      	ldr	r3, [r3, #8]
    5498:	b103      	cbz	r3, 549c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    549a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    549c:	4640      	mov	r0, r8
    549e:	6723      	str	r3, [r4, #112]	; 0x70
    54a0:	b004      	add	sp, #16
    54a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54a6:	bf00      	nop
    54a8:	20000e24 	.word	0x20000e24

000054ac <z_impl_k_thread_create>:
{
    54ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    54ae:	2500      	movs	r5, #0
{
    54b0:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    54b2:	9505      	str	r5, [sp, #20]
    54b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
    54b6:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    54ba:	9504      	str	r5, [sp, #16]
    54bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
    54be:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    54c0:	9503      	str	r5, [sp, #12]
    54c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    54c4:	9502      	str	r5, [sp, #8]
    54c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    54c8:	9501      	str	r5, [sp, #4]
    54ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    54cc:	9500      	str	r5, [sp, #0]
    54ce:	f7ff ffbd 	bl	544c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    54d2:	f1b6 3fff 	cmp.w	r6, #4294967295
    54d6:	bf08      	it	eq
    54d8:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    54dc:	d005      	beq.n	54ea <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    54de:	ea56 0307 	orrs.w	r3, r6, r7
    54e2:	d105      	bne.n	54f0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    54e4:	4620      	mov	r0, r4
    54e6:	f000 fb3d 	bl	5b64 <z_sched_start>
}
    54ea:	4620      	mov	r0, r4
    54ec:	b007      	add	sp, #28
    54ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    54f0:	463a      	mov	r2, r7
    54f2:	4633      	mov	r3, r6
    54f4:	4902      	ldr	r1, [pc, #8]	; (5500 <z_impl_k_thread_create+0x54>)
    54f6:	f104 0018 	add.w	r0, r4, #24
    54fa:	f000 fd29 	bl	5f50 <z_add_timeout>
    54fe:	e7f4      	b.n	54ea <z_impl_k_thread_create+0x3e>
    5500:	00007741 	.word	0x00007741

00005504 <z_init_static_threads>:
{
    5504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5508:	4c29      	ldr	r4, [pc, #164]	; (55b0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    550a:	4d2a      	ldr	r5, [pc, #168]	; (55b4 <z_init_static_threads+0xb0>)
{
    550c:	b087      	sub	sp, #28
    550e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5510:	42ae      	cmp	r6, r5
    5512:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5516:	d30f      	bcc.n	5538 <z_init_static_threads+0x34>
	k_sched_lock();
    5518:	f000 fb74 	bl	5c04 <k_sched_lock>
			return ((t * to_hz + off) / from_hz);
    551c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5520:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    5524:	4c22      	ldr	r4, [pc, #136]	; (55b0 <z_init_static_threads+0xac>)
    5526:	f8df 9090 	ldr.w	r9, [pc, #144]	; 55b8 <z_init_static_threads+0xb4>
    552a:	42ac      	cmp	r4, r5
    552c:	d320      	bcc.n	5570 <z_init_static_threads+0x6c>
}
    552e:	b007      	add	sp, #28
    5530:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5534:	f000 bb7a 	b.w	5c2c <k_sched_unlock>
		z_setup_new_thread(
    5538:	f854 3c04 	ldr.w	r3, [r4, #-4]
    553c:	9305      	str	r3, [sp, #20]
    553e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5542:	9304      	str	r3, [sp, #16]
    5544:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5548:	9303      	str	r3, [sp, #12]
    554a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    554e:	9302      	str	r3, [sp, #8]
    5550:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5554:	9301      	str	r3, [sp, #4]
    5556:	f854 3c20 	ldr.w	r3, [r4, #-32]
    555a:	9300      	str	r3, [sp, #0]
    555c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5560:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5564:	f7ff ff72 	bl	544c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5568:	f854 3c30 	ldr.w	r3, [r4, #-48]
    556c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    556e:	e7ce      	b.n	550e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5570:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5572:	1c5a      	adds	r2, r3, #1
    5574:	d00d      	beq.n	5592 <z_init_static_threads+0x8e>
    5576:	2100      	movs	r1, #0
    5578:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    557a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    557e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5582:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5586:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    558a:	d104      	bne.n	5596 <z_init_static_threads+0x92>
	z_sched_start(thread);
    558c:	4640      	mov	r0, r8
    558e:	f000 fae9 	bl	5b64 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5592:	3430      	adds	r4, #48	; 0x30
    5594:	e7c9      	b.n	552a <z_init_static_threads+0x26>
    5596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    559a:	2300      	movs	r3, #0
    559c:	f7fb f9ca 	bl	934 <__aeabi_uldivmod>
    55a0:	4602      	mov	r2, r0
    55a2:	460b      	mov	r3, r1
    55a4:	f108 0018 	add.w	r0, r8, #24
    55a8:	4649      	mov	r1, r9
    55aa:	f000 fcd1 	bl	5f50 <z_add_timeout>
    55ae:	e7f0      	b.n	5592 <z_init_static_threads+0x8e>
    55b0:	00007c78 	.word	0x00007c78
    55b4:	00007c78 	.word	0x00007c78
    55b8:	00007741 	.word	0x00007741

000055bc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    55bc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    55be:	4c0b      	ldr	r4, [pc, #44]	; (55ec <idle+0x30>)
	return !z_sys_post_kernel;
    55c0:	4d0b      	ldr	r5, [pc, #44]	; (55f0 <idle+0x34>)
	__asm__ volatile(
    55c2:	f04f 0220 	mov.w	r2, #32
    55c6:	f3ef 8311 	mrs	r3, BASEPRI
    55ca:	f382 8812 	msr	BASEPRI_MAX, r2
    55ce:	f3bf 8f6f 	isb	sy
    55d2:	f002 f97e 	bl	78d2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    55d6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    55d8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    55da:	b913      	cbnz	r3, 55e2 <idle+0x26>
	arch_cpu_idle();
    55dc:	f7fd fa74 	bl	2ac8 <arch_cpu_idle>
}
    55e0:	e7ef      	b.n	55c2 <idle+0x6>
    55e2:	f7fd f8bf 	bl	2764 <pm_system_suspend>
    55e6:	2800      	cmp	r0, #0
    55e8:	d1eb      	bne.n	55c2 <idle+0x6>
    55ea:	e7f7      	b.n	55dc <idle+0x20>
    55ec:	20000e24 	.word	0x20000e24
    55f0:	2000103d 	.word	0x2000103d

000055f4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    55f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    55f8:	4604      	mov	r4, r0
    55fa:	4617      	mov	r7, r2
    55fc:	461e      	mov	r6, r3
    55fe:	f04f 0320 	mov.w	r3, #32
    5602:	f3ef 8811 	mrs	r8, BASEPRI
    5606:	f383 8812 	msr	BASEPRI_MAX, r3
    560a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    560e:	68c3      	ldr	r3, [r0, #12]
    5610:	4a33      	ldr	r2, [pc, #204]	; (56e0 <z_impl_k_mutex_lock+0xec>)
    5612:	b17b      	cbz	r3, 5634 <z_impl_k_mutex_lock+0x40>
    5614:	6880      	ldr	r0, [r0, #8]
    5616:	6891      	ldr	r1, [r2, #8]
    5618:	4288      	cmp	r0, r1
    561a:	d019      	beq.n	5650 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    561c:	ea57 0306 	orrs.w	r3, r7, r6
    5620:	d118      	bne.n	5654 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5622:	f388 8811 	msr	BASEPRI, r8
    5626:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    562a:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    562e:	b002      	add	sp, #8
    5630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5634:	6891      	ldr	r1, [r2, #8]
    5636:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    563a:	3301      	adds	r3, #1
    563c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    563e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5640:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    5642:	60a3      	str	r3, [r4, #8]
    5644:	f388 8811 	msr	BASEPRI, r8
    5648:	f3bf 8f6f 	isb	sy
		return 0;
    564c:	2000      	movs	r0, #0
    564e:	e7ee      	b.n	562e <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5650:	6921      	ldr	r1, [r4, #16]
    5652:	e7f2      	b.n	563a <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5654:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5658:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    565c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5660:	4299      	cmp	r1, r3
    5662:	bfa8      	it	ge
    5664:	4619      	movge	r1, r3
    5666:	4291      	cmp	r1, r2
    5668:	bfb8      	it	lt
    566a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    566c:	428b      	cmp	r3, r1
    566e:	dd2e      	ble.n	56ce <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5670:	f002 f839 	bl	76e6 <adjust_owner_prio.isra.0>
    5674:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5676:	4622      	mov	r2, r4
    5678:	4641      	mov	r1, r8
    567a:	e9cd 7600 	strd	r7, r6, [sp]
    567e:	4819      	ldr	r0, [pc, #100]	; (56e4 <z_impl_k_mutex_lock+0xf0>)
    5680:	f000 f9fa 	bl	5a78 <z_pend_curr>
	if (got_mutex == 0) {
    5684:	2800      	cmp	r0, #0
    5686:	d0e1      	beq.n	564c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5688:	f04f 0320 	mov.w	r3, #32
    568c:	f3ef 8611 	mrs	r6, BASEPRI
    5690:	f383 8812 	msr	BASEPRI_MAX, r3
    5694:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    5698:	68a0      	ldr	r0, [r4, #8]
    569a:	b1d0      	cbz	r0, 56d2 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    569c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    569e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56a0:	429c      	cmp	r4, r3
    56a2:	d00a      	beq.n	56ba <z_impl_k_mutex_lock+0xc6>
    56a4:	b14b      	cbz	r3, 56ba <z_impl_k_mutex_lock+0xc6>
    56a6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    56aa:	4299      	cmp	r1, r3
    56ac:	bfa8      	it	ge
    56ae:	4619      	movge	r1, r3
    56b0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    56b4:	4299      	cmp	r1, r3
    56b6:	bfb8      	it	lt
    56b8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    56ba:	f002 f814 	bl	76e6 <adjust_owner_prio.isra.0>
    56be:	b140      	cbz	r0, 56d2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    56c0:	4631      	mov	r1, r6
    56c2:	4808      	ldr	r0, [pc, #32]	; (56e4 <z_impl_k_mutex_lock+0xf0>)
    56c4:	f000 fa3c 	bl	5b40 <z_reschedule>
	return -EAGAIN;
    56c8:	f06f 000a 	mvn.w	r0, #10
    56cc:	e7af      	b.n	562e <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    56ce:	2500      	movs	r5, #0
    56d0:	e7d1      	b.n	5676 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    56d2:	2d00      	cmp	r5, #0
    56d4:	d1f4      	bne.n	56c0 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    56d6:	f386 8811 	msr	BASEPRI, r6
    56da:	f3bf 8f6f 	isb	sy
    56de:	e7f3      	b.n	56c8 <z_impl_k_mutex_lock+0xd4>
    56e0:	20000e24 	.word	0x20000e24
    56e4:	2000103e 	.word	0x2000103e

000056e8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    56e8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    56ea:	6883      	ldr	r3, [r0, #8]
{
    56ec:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    56ee:	b36b      	cbz	r3, 574c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    56f0:	4a19      	ldr	r2, [pc, #100]	; (5758 <z_impl_k_mutex_unlock+0x70>)
    56f2:	6892      	ldr	r2, [r2, #8]
    56f4:	4293      	cmp	r3, r2
    56f6:	d12c      	bne.n	5752 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    56f8:	68c3      	ldr	r3, [r0, #12]
    56fa:	2b01      	cmp	r3, #1
    56fc:	d903      	bls.n	5706 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    56fe:	3b01      	subs	r3, #1
    5700:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    5702:	2000      	movs	r0, #0
}
    5704:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5706:	f04f 0320 	mov.w	r3, #32
    570a:	f3ef 8511 	mrs	r5, BASEPRI
    570e:	f383 8812 	msr	BASEPRI_MAX, r3
    5712:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5716:	6901      	ldr	r1, [r0, #16]
    5718:	6880      	ldr	r0, [r0, #8]
    571a:	f001 ffe4 	bl	76e6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    571e:	4620      	mov	r0, r4
    5720:	f002 f88f 	bl	7842 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5724:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5726:	b158      	cbz	r0, 5740 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    5728:	f990 200e 	ldrsb.w	r2, [r0, #14]
    572c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    572e:	2200      	movs	r2, #0
    5730:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5732:	f002 f84f 	bl	77d4 <z_ready_thread>
		z_reschedule(&lock, key);
    5736:	4629      	mov	r1, r5
    5738:	4808      	ldr	r0, [pc, #32]	; (575c <z_impl_k_mutex_unlock+0x74>)
    573a:	f000 fa01 	bl	5b40 <z_reschedule>
    573e:	e7e0      	b.n	5702 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5740:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5742:	f385 8811 	msr	BASEPRI, r5
    5746:	f3bf 8f6f 	isb	sy
    574a:	e7da      	b.n	5702 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    574c:	f06f 0015 	mvn.w	r0, #21
    5750:	e7d8      	b.n	5704 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5752:	f04f 30ff 	mov.w	r0, #4294967295
    5756:	e7d5      	b.n	5704 <z_impl_k_mutex_unlock+0x1c>
    5758:	20000e24 	.word	0x20000e24
    575c:	2000103e 	.word	0x2000103e

00005760 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5760:	b538      	push	{r3, r4, r5, lr}
    5762:	4604      	mov	r4, r0
	__asm__ volatile(
    5764:	f04f 0320 	mov.w	r3, #32
    5768:	f3ef 8511 	mrs	r5, BASEPRI
    576c:	f383 8812 	msr	BASEPRI_MAX, r3
    5770:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5774:	f002 f865 	bl	7842 <z_unpend_first_thread>

	if (thread != NULL) {
    5778:	b148      	cbz	r0, 578e <z_impl_k_sem_give+0x2e>
    577a:	2200      	movs	r2, #0
    577c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    577e:	f002 f829 	bl	77d4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5782:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5788:	4804      	ldr	r0, [pc, #16]	; (579c <z_impl_k_sem_give+0x3c>)
    578a:	f000 b9d9 	b.w	5b40 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    578e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5792:	429a      	cmp	r2, r3
    5794:	bf18      	it	ne
    5796:	3301      	addne	r3, #1
    5798:	60a3      	str	r3, [r4, #8]
}
    579a:	e7f2      	b.n	5782 <z_impl_k_sem_give+0x22>
    579c:	2000103e 	.word	0x2000103e

000057a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    57a0:	b513      	push	{r0, r1, r4, lr}
    57a2:	f04f 0420 	mov.w	r4, #32
    57a6:	f3ef 8111 	mrs	r1, BASEPRI
    57aa:	f384 8812 	msr	BASEPRI_MAX, r4
    57ae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    57b2:	6884      	ldr	r4, [r0, #8]
    57b4:	b144      	cbz	r4, 57c8 <z_impl_k_sem_take+0x28>
		sem->count--;
    57b6:	3c01      	subs	r4, #1
    57b8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    57ba:	f381 8811 	msr	BASEPRI, r1
    57be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    57c2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    57c4:	b002      	add	sp, #8
    57c6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    57c8:	ea52 0403 	orrs.w	r4, r2, r3
    57cc:	d106      	bne.n	57dc <z_impl_k_sem_take+0x3c>
    57ce:	f381 8811 	msr	BASEPRI, r1
    57d2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    57d6:	f06f 000f 	mvn.w	r0, #15
    57da:	e7f3      	b.n	57c4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    57dc:	e9cd 2300 	strd	r2, r3, [sp]
    57e0:	4602      	mov	r2, r0
    57e2:	4802      	ldr	r0, [pc, #8]	; (57ec <z_impl_k_sem_take+0x4c>)
    57e4:	f000 f948 	bl	5a78 <z_pend_curr>
	return ret;
    57e8:	e7ec      	b.n	57c4 <z_impl_k_sem_take+0x24>
    57ea:	bf00      	nop
    57ec:	2000103e 	.word	0x2000103e

000057f0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    57f0:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    57f2:	4d07      	ldr	r5, [pc, #28]	; (5810 <z_reset_time_slice+0x20>)
    57f4:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    57f6:	b154      	cbz	r4, 580e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    57f8:	f7fe fea6 	bl	4548 <sys_clock_elapsed>
    57fc:	4b05      	ldr	r3, [pc, #20]	; (5814 <z_reset_time_slice+0x24>)
    57fe:	4404      	add	r4, r0
    5800:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5802:	6828      	ldr	r0, [r5, #0]
    5804:	2100      	movs	r1, #0
	}
}
    5806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    580a:	f002 b872 	b.w	78f2 <z_set_timeout_expiry>
}
    580e:	bd38      	pop	{r3, r4, r5, pc}
    5810:	20000e54 	.word	0x20000e54
    5814:	20000e24 	.word	0x20000e24

00005818 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5818:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    581a:	4d0d      	ldr	r5, [pc, #52]	; (5850 <update_cache+0x38>)
    581c:	462b      	mov	r3, r5
    581e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5822:	429c      	cmp	r4, r3
    5824:	d000      	beq.n	5828 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5826:	b904      	cbnz	r4, 582a <update_cache+0x12>
    5828:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    582a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    582c:	b938      	cbnz	r0, 583e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    582e:	7b5a      	ldrb	r2, [r3, #13]
    5830:	06d2      	lsls	r2, r2, #27
    5832:	d104      	bne.n	583e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5834:	69a2      	ldr	r2, [r4, #24]
    5836:	b912      	cbnz	r2, 583e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5838:	89da      	ldrh	r2, [r3, #14]
    583a:	2a7f      	cmp	r2, #127	; 0x7f
    583c:	d805      	bhi.n	584a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    583e:	429c      	cmp	r4, r3
    5840:	d002      	beq.n	5848 <update_cache+0x30>
			z_reset_time_slice(thread);
    5842:	4620      	mov	r0, r4
    5844:	f7ff ffd4 	bl	57f0 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5848:	4623      	mov	r3, r4
    584a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    584c:	bd38      	pop	{r3, r4, r5, pc}
    584e:	bf00      	nop
    5850:	20000e24 	.word	0x20000e24

00005854 <move_thread_to_end_of_prio_q>:
{
    5854:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5856:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    585a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    585c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    585e:	7b43      	ldrb	r3, [r0, #13]
    5860:	da04      	bge.n	586c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5866:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5868:	f001 ff58 	bl	771c <sys_dlist_remove>
	return list->head == list;
    586c:	4a15      	ldr	r2, [pc, #84]	; (58c4 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    586e:	7b4b      	ldrb	r3, [r1, #13]
    5870:	4610      	mov	r0, r2
    5872:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5876:	734b      	strb	r3, [r1, #13]
    5878:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    587c:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    587e:	4283      	cmp	r3, r0
    5880:	bf08      	it	eq
    5882:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5884:	b923      	cbnz	r3, 5890 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5886:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    588a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    588c:	6251      	str	r1, [r2, #36]	; 0x24
}
    588e:	e00c      	b.n	58aa <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5890:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5894:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5898:	42b5      	cmp	r5, r6
    589a:	d00e      	beq.n	58ba <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    589c:	42ae      	cmp	r6, r5
    589e:	dd0c      	ble.n	58ba <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    58a0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    58a2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    58a6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    58a8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    58aa:	6890      	ldr	r0, [r2, #8]
}
    58ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    58b0:	1a43      	subs	r3, r0, r1
    58b2:	4258      	negs	r0, r3
    58b4:	4158      	adcs	r0, r3
    58b6:	f7ff bfaf 	b.w	5818 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    58ba:	429c      	cmp	r4, r3
    58bc:	d0e3      	beq.n	5886 <move_thread_to_end_of_prio_q+0x32>
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	e7e0      	b.n	5884 <move_thread_to_end_of_prio_q+0x30>
    58c2:	bf00      	nop
    58c4:	20000e24 	.word	0x20000e24

000058c8 <ready_thread>:
{
    58c8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    58ca:	f990 300d 	ldrsb.w	r3, [r0, #13]
    58ce:	7b42      	ldrb	r2, [r0, #13]
    58d0:	2b00      	cmp	r3, #0
    58d2:	db29      	blt.n	5928 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    58d4:	06d3      	lsls	r3, r2, #27
    58d6:	d127      	bne.n	5928 <ready_thread+0x60>
	return node->next != NULL;
    58d8:	6983      	ldr	r3, [r0, #24]
    58da:	bb2b      	cbnz	r3, 5928 <ready_thread+0x60>
	return list->head == list;
    58dc:	4913      	ldr	r1, [pc, #76]	; (592c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    58de:	f062 027f 	orn	r2, r2, #127	; 0x7f
    58e2:	7342      	strb	r2, [r0, #13]
    58e4:	460a      	mov	r2, r1
    58e6:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58ea:	4294      	cmp	r4, r2
    58ec:	bf18      	it	ne
    58ee:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    58f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    58f2:	b923      	cbnz	r3, 58fe <ready_thread+0x36>
	node->prev = tail;
    58f4:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    58f8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    58fa:	6248      	str	r0, [r1, #36]	; 0x24
}
    58fc:	e00c      	b.n	5918 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    58fe:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5902:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5906:	42b5      	cmp	r5, r6
    5908:	d00a      	beq.n	5920 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    590a:	42ae      	cmp	r6, r5
    590c:	dd08      	ble.n	5920 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    590e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5910:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5914:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5916:	6058      	str	r0, [r3, #4]
		update_cache(0);
    5918:	2000      	movs	r0, #0
}
    591a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    591c:	f7ff bf7c 	b.w	5818 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5920:	42a3      	cmp	r3, r4
    5922:	d0e7      	beq.n	58f4 <ready_thread+0x2c>
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	e7e4      	b.n	58f2 <ready_thread+0x2a>
}
    5928:	bc70      	pop	{r4, r5, r6}
    592a:	4770      	bx	lr
    592c:	20000e24 	.word	0x20000e24

00005930 <unready_thread>:
{
    5930:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5932:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5936:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5938:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    593a:	7b43      	ldrb	r3, [r0, #13]
    593c:	da04      	bge.n	5948 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    593e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5942:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5944:	f001 feea 	bl	771c <sys_dlist_remove>
	update_cache(thread == _current);
    5948:	4b04      	ldr	r3, [pc, #16]	; (595c <unready_thread+0x2c>)
    594a:	6898      	ldr	r0, [r3, #8]
    594c:	1a43      	subs	r3, r0, r1
    594e:	4258      	negs	r0, r3
    5950:	4158      	adcs	r0, r3
}
    5952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5956:	f7ff bf5f 	b.w	5818 <update_cache>
    595a:	bf00      	nop
    595c:	20000e24 	.word	0x20000e24

00005960 <pend_locked>:
{
    5960:	b570      	push	{r4, r5, r6, lr}
    5962:	4615      	mov	r5, r2
    5964:	461c      	mov	r4, r3
    5966:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5968:	f001 ff0c 	bl	7784 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    596c:	f1b4 3fff 	cmp.w	r4, #4294967295
    5970:	bf08      	it	eq
    5972:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5976:	d008      	beq.n	598a <pend_locked+0x2a>
    5978:	462a      	mov	r2, r5
    597a:	4623      	mov	r3, r4
    597c:	f106 0018 	add.w	r0, r6, #24
    5980:	4902      	ldr	r1, [pc, #8]	; (598c <pend_locked+0x2c>)
}
    5982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5986:	f000 bae3 	b.w	5f50 <z_add_timeout>
    598a:	bd70      	pop	{r4, r5, r6, pc}
    598c:	00007741 	.word	0x00007741

00005990 <k_sched_time_slice_set>:
{
    5990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5992:	4604      	mov	r4, r0
    5994:	460d      	mov	r5, r1
	__asm__ volatile(
    5996:	f04f 0320 	mov.w	r3, #32
    599a:	f3ef 8711 	mrs	r7, BASEPRI
    599e:	f383 8812 	msr	BASEPRI_MAX, r3
    59a2:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    59a6:	2600      	movs	r6, #0
    59a8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    59ac:	f240 30e7 	movw	r0, #999	; 0x3e7
    59b0:	4631      	mov	r1, r6
    59b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    59b6:	2300      	movs	r3, #0
    59b8:	fbe4 010c 	umlal	r0, r1, r4, ip
    59bc:	f7fa ffba 	bl	934 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    59c0:	42b4      	cmp	r4, r6
    59c2:	dd02      	ble.n	59ca <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    59c4:	2802      	cmp	r0, #2
    59c6:	bfb8      	it	lt
    59c8:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    59ca:	4a07      	ldr	r2, [pc, #28]	; (59e8 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    59cc:	4b07      	ldr	r3, [pc, #28]	; (59ec <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    59ce:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    59d0:	4a07      	ldr	r2, [pc, #28]	; (59f0 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    59d2:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    59d4:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    59d6:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    59d8:	f7ff ff0a 	bl	57f0 <z_reset_time_slice>
	__asm__ volatile(
    59dc:	f387 8811 	msr	BASEPRI, r7
    59e0:	f3bf 8f6f 	isb	sy
}
    59e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59e6:	bf00      	nop
    59e8:	20000e54 	.word	0x20000e54
    59ec:	20000e24 	.word	0x20000e24
    59f0:	20000e50 	.word	0x20000e50

000059f4 <z_time_slice>:
{
    59f4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    59f6:	f04f 0320 	mov.w	r3, #32
    59fa:	f3ef 8511 	mrs	r5, BASEPRI
    59fe:	f383 8812 	msr	BASEPRI_MAX, r3
    5a02:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5a06:	4b17      	ldr	r3, [pc, #92]	; (5a64 <z_time_slice+0x70>)
    5a08:	4a17      	ldr	r2, [pc, #92]	; (5a68 <z_time_slice+0x74>)
    5a0a:	689c      	ldr	r4, [r3, #8]
    5a0c:	6811      	ldr	r1, [r2, #0]
    5a0e:	428c      	cmp	r4, r1
    5a10:	d107      	bne.n	5a22 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5a12:	4620      	mov	r0, r4
    5a14:	f7ff feec 	bl	57f0 <z_reset_time_slice>
	__asm__ volatile(
    5a18:	f385 8811 	msr	BASEPRI, r5
    5a1c:	f3bf 8f6f 	isb	sy
}
    5a20:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5a22:	2100      	movs	r1, #0
    5a24:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5a26:	4a11      	ldr	r2, [pc, #68]	; (5a6c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5a28:	6812      	ldr	r2, [r2, #0]
    5a2a:	b1c2      	cbz	r2, 5a5e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5a2c:	89e2      	ldrh	r2, [r4, #14]
    5a2e:	2a7f      	cmp	r2, #127	; 0x7f
    5a30:	d815      	bhi.n	5a5e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5a32:	7b62      	ldrb	r2, [r4, #13]
    5a34:	06d2      	lsls	r2, r2, #27
    5a36:	d112      	bne.n	5a5e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5a38:	4a0d      	ldr	r2, [pc, #52]	; (5a70 <z_time_slice+0x7c>)
    5a3a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5a3e:	6812      	ldr	r2, [r2, #0]
    5a40:	4291      	cmp	r1, r2
    5a42:	db0c      	blt.n	5a5e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5a44:	4a0b      	ldr	r2, [pc, #44]	; (5a74 <z_time_slice+0x80>)
    5a46:	4294      	cmp	r4, r2
    5a48:	d009      	beq.n	5a5e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5a4a:	691a      	ldr	r2, [r3, #16]
    5a4c:	4282      	cmp	r2, r0
    5a4e:	dc03      	bgt.n	5a58 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5a50:	4620      	mov	r0, r4
    5a52:	f7ff feff 	bl	5854 <move_thread_to_end_of_prio_q>
    5a56:	e7dc      	b.n	5a12 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5a58:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5a5a:	611a      	str	r2, [r3, #16]
    5a5c:	e7dc      	b.n	5a18 <z_time_slice+0x24>
    5a5e:	2200      	movs	r2, #0
    5a60:	e7fb      	b.n	5a5a <z_time_slice+0x66>
    5a62:	bf00      	nop
    5a64:	20000e24 	.word	0x20000e24
    5a68:	20000e4c 	.word	0x20000e4c
    5a6c:	20000e54 	.word	0x20000e54
    5a70:	20000e50 	.word	0x20000e50
    5a74:	20000700 	.word	0x20000700

00005a78 <z_pend_curr>:
{
    5a78:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    5a7a:	480c      	ldr	r0, [pc, #48]	; (5aac <z_pend_curr+0x34>)
    5a7c:	4d0c      	ldr	r5, [pc, #48]	; (5ab0 <z_pend_curr+0x38>)
    5a7e:	6886      	ldr	r6, [r0, #8]
{
    5a80:	460c      	mov	r4, r1
	pending_current = _current;
    5a82:	602e      	str	r6, [r5, #0]
{
    5a84:	4611      	mov	r1, r2
    5a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    5a8a:	f04f 0620 	mov.w	r6, #32
    5a8e:	f3ef 8511 	mrs	r5, BASEPRI
    5a92:	f386 8812 	msr	BASEPRI_MAX, r6
    5a96:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    5a9a:	6880      	ldr	r0, [r0, #8]
    5a9c:	f7ff ff60 	bl	5960 <pend_locked>
	ret = arch_swap(key);
    5aa0:	4620      	mov	r0, r4
}
    5aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5aa6:	f7fd b8df 	b.w	2c68 <arch_swap>
    5aaa:	bf00      	nop
    5aac:	20000e24 	.word	0x20000e24
    5ab0:	20000e4c 	.word	0x20000e4c

00005ab4 <z_set_prio>:
{
    5ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ab6:	4604      	mov	r4, r0
    5ab8:	f04f 0320 	mov.w	r3, #32
    5abc:	f3ef 8611 	mrs	r6, BASEPRI
    5ac0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ac4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5ac8:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    5aca:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5acc:	06da      	lsls	r2, r3, #27
    5ace:	d119      	bne.n	5b04 <z_set_prio+0x50>
	return node->next != NULL;
    5ad0:	6985      	ldr	r5, [r0, #24]
    5ad2:	b9bd      	cbnz	r5, 5b04 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5ad8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ada:	f001 fe1f 	bl	771c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5ade:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5ae0:	4a16      	ldr	r2, [pc, #88]	; (5b3c <z_set_prio+0x88>)
    5ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5ae6:	7343      	strb	r3, [r0, #13]
    5ae8:	4613      	mov	r3, r2
				thread->base.prio = prio;
    5aea:	7381      	strb	r1, [r0, #14]
    5aec:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5af0:	4298      	cmp	r0, r3
    5af2:	bf18      	it	ne
    5af4:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    5af6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5af8:	b95d      	cbnz	r5, 5b12 <z_set_prio+0x5e>
	node->prev = tail;
    5afa:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    5afe:	6004      	str	r4, [r0, #0]
	list->tail = node;
    5b00:	6254      	str	r4, [r2, #36]	; 0x24
}
    5b02:	e011      	b.n	5b28 <z_set_prio+0x74>
    5b04:	2000      	movs	r0, #0
			thread->base.prio = prio;
    5b06:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    5b08:	f386 8811 	msr	BASEPRI, r6
    5b0c:	f3bf 8f6f 	isb	sy
}
    5b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    5b12:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    5b16:	42b9      	cmp	r1, r7
    5b18:	d00b      	beq.n	5b32 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b1a:	428f      	cmp	r7, r1
    5b1c:	dd09      	ble.n	5b32 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    5b1e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5b20:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    5b24:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5b26:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5b28:	2001      	movs	r0, #1
    5b2a:	f7ff fe75 	bl	5818 <update_cache>
    5b2e:	2001      	movs	r0, #1
    5b30:	e7ea      	b.n	5b08 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    5b32:	42a8      	cmp	r0, r5
    5b34:	d0e1      	beq.n	5afa <z_set_prio+0x46>
    5b36:	682d      	ldr	r5, [r5, #0]
    5b38:	e7de      	b.n	5af8 <z_set_prio+0x44>
    5b3a:	bf00      	nop
    5b3c:	20000e24 	.word	0x20000e24

00005b40 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5b40:	b949      	cbnz	r1, 5b56 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5b42:	f3ef 8005 	mrs	r0, IPSR
    5b46:	b930      	cbnz	r0, 5b56 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5b48:	4b05      	ldr	r3, [pc, #20]	; (5b60 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5b4a:	69da      	ldr	r2, [r3, #28]
    5b4c:	689b      	ldr	r3, [r3, #8]
    5b4e:	429a      	cmp	r2, r3
    5b50:	d001      	beq.n	5b56 <z_reschedule+0x16>
    5b52:	f7fd b889 	b.w	2c68 <arch_swap>
    5b56:	f381 8811 	msr	BASEPRI, r1
    5b5a:	f3bf 8f6f 	isb	sy
}
    5b5e:	4770      	bx	lr
    5b60:	20000e24 	.word	0x20000e24

00005b64 <z_sched_start>:
{
    5b64:	b510      	push	{r4, lr}
	__asm__ volatile(
    5b66:	f04f 0220 	mov.w	r2, #32
    5b6a:	f3ef 8411 	mrs	r4, BASEPRI
    5b6e:	f382 8812 	msr	BASEPRI_MAX, r2
    5b72:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5b76:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5b78:	0751      	lsls	r1, r2, #29
    5b7a:	d404      	bmi.n	5b86 <z_sched_start+0x22>
	__asm__ volatile(
    5b7c:	f384 8811 	msr	BASEPRI, r4
    5b80:	f3bf 8f6f 	isb	sy
}
    5b84:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5b86:	f022 0204 	bic.w	r2, r2, #4
    5b8a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5b8c:	f7ff fe9c 	bl	58c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5b90:	4621      	mov	r1, r4
}
    5b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5b96:	4801      	ldr	r0, [pc, #4]	; (5b9c <z_sched_start+0x38>)
    5b98:	f7ff bfd2 	b.w	5b40 <z_reschedule>
    5b9c:	2000103e 	.word	0x2000103e

00005ba0 <z_impl_k_thread_suspend>:
{
    5ba0:	b570      	push	{r4, r5, r6, lr}
    5ba2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5ba4:	3018      	adds	r0, #24
    5ba6:	f001 fe7e 	bl	78a6 <z_abort_timeout>
	__asm__ volatile(
    5baa:	f04f 0320 	mov.w	r3, #32
    5bae:	f3ef 8611 	mrs	r6, BASEPRI
    5bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    5bb6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5bba:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5bbe:	7b63      	ldrb	r3, [r4, #13]
    5bc0:	2a00      	cmp	r2, #0
    5bc2:	da05      	bge.n	5bd0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    5bc8:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5bca:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5bcc:	f001 fda6 	bl	771c <sys_dlist_remove>
		update_cache(thread == _current);
    5bd0:	4d0b      	ldr	r5, [pc, #44]	; (5c00 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5bd2:	7b63      	ldrb	r3, [r4, #13]
    5bd4:	68a8      	ldr	r0, [r5, #8]
    5bd6:	f043 0310 	orr.w	r3, r3, #16
    5bda:	7363      	strb	r3, [r4, #13]
    5bdc:	1b03      	subs	r3, r0, r4
    5bde:	4258      	negs	r0, r3
    5be0:	4158      	adcs	r0, r3
    5be2:	f7ff fe19 	bl	5818 <update_cache>
	__asm__ volatile(
    5be6:	f386 8811 	msr	BASEPRI, r6
    5bea:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5bee:	68ab      	ldr	r3, [r5, #8]
    5bf0:	42a3      	cmp	r3, r4
    5bf2:	d103      	bne.n	5bfc <z_impl_k_thread_suspend+0x5c>
}
    5bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5bf8:	f001 be4b 	b.w	7892 <z_reschedule_unlocked>
}
    5bfc:	bd70      	pop	{r4, r5, r6, pc}
    5bfe:	bf00      	nop
    5c00:	20000e24 	.word	0x20000e24

00005c04 <k_sched_lock>:
	__asm__ volatile(
    5c04:	f04f 0320 	mov.w	r3, #32
    5c08:	f3ef 8111 	mrs	r1, BASEPRI
    5c0c:	f383 8812 	msr	BASEPRI_MAX, r3
    5c10:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5c14:	4b04      	ldr	r3, [pc, #16]	; (5c28 <k_sched_lock+0x24>)
    5c16:	689a      	ldr	r2, [r3, #8]
    5c18:	7bd3      	ldrb	r3, [r2, #15]
    5c1a:	3b01      	subs	r3, #1
    5c1c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5c1e:	f381 8811 	msr	BASEPRI, r1
    5c22:	f3bf 8f6f 	isb	sy
}
    5c26:	4770      	bx	lr
    5c28:	20000e24 	.word	0x20000e24

00005c2c <k_sched_unlock>:
{
    5c2c:	b510      	push	{r4, lr}
	__asm__ volatile(
    5c2e:	f04f 0320 	mov.w	r3, #32
    5c32:	f3ef 8411 	mrs	r4, BASEPRI
    5c36:	f383 8812 	msr	BASEPRI_MAX, r3
    5c3a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5c3e:	4b08      	ldr	r3, [pc, #32]	; (5c60 <k_sched_unlock+0x34>)
		update_cache(0);
    5c40:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    5c42:	689a      	ldr	r2, [r3, #8]
    5c44:	7bd3      	ldrb	r3, [r2, #15]
    5c46:	3301      	adds	r3, #1
    5c48:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5c4a:	f7ff fde5 	bl	5818 <update_cache>
	__asm__ volatile(
    5c4e:	f384 8811 	msr	BASEPRI, r4
    5c52:	f3bf 8f6f 	isb	sy
}
    5c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5c5a:	f001 be1a 	b.w	7892 <z_reschedule_unlocked>
    5c5e:	bf00      	nop
    5c60:	20000e24 	.word	0x20000e24

00005c64 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5c64:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    5c66:	4b04      	ldr	r3, [pc, #16]	; (5c78 <z_sched_init+0x14>)
    5c68:	4608      	mov	r0, r1
    5c6a:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5c6e:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5c72:	f7ff be8d 	b.w	5990 <k_sched_time_slice_set>
    5c76:	bf00      	nop
    5c78:	20000e24 	.word	0x20000e24

00005c7c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5c7e:	f04f 0320 	mov.w	r3, #32
    5c82:	f3ef 8511 	mrs	r5, BASEPRI
    5c86:	f383 8812 	msr	BASEPRI_MAX, r3
    5c8a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5c8e:	4919      	ldr	r1, [pc, #100]	; (5cf4 <z_impl_k_yield+0x78>)
    5c90:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c92:	7b43      	ldrb	r3, [r0, #13]
    5c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c98:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5c9a:	f001 fd3f 	bl	771c <sys_dlist_remove>
	return list->head == list;
    5c9e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    5ca0:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5ca2:	7b5a      	ldrb	r2, [r3, #13]
    5ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5ca8:	735a      	strb	r2, [r3, #13]
    5caa:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    5cae:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cb0:	4282      	cmp	r2, r0
    5cb2:	bf08      	it	eq
    5cb4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cb6:	b922      	cbnz	r2, 5cc2 <z_impl_k_yield+0x46>
	node->prev = tail;
    5cb8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    5cbc:	6023      	str	r3, [r4, #0]
	list->tail = node;
    5cbe:	624b      	str	r3, [r1, #36]	; 0x24
}
    5cc0:	e00c      	b.n	5cdc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    5cc2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5cc6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    5cca:	42be      	cmp	r6, r7
    5ccc:	d00e      	beq.n	5cec <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5cce:	42b7      	cmp	r7, r6
    5cd0:	dd0c      	ble.n	5cec <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    5cd2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5cd4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5cd8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5cda:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5cdc:	2001      	movs	r0, #1
    5cde:	f7ff fd9b 	bl	5818 <update_cache>
    5ce2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5ce4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5ce8:	f7fc bfbe 	b.w	2c68 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5cec:	42a2      	cmp	r2, r4
    5cee:	d0e3      	beq.n	5cb8 <z_impl_k_yield+0x3c>
    5cf0:	6812      	ldr	r2, [r2, #0]
    5cf2:	e7e0      	b.n	5cb6 <z_impl_k_yield+0x3a>
    5cf4:	20000e24 	.word	0x20000e24

00005cf8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5cf8:	ea50 0301 	orrs.w	r3, r0, r1
{
    5cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d00:	4605      	mov	r5, r0
    5d02:	460e      	mov	r6, r1
	if (ticks == 0) {
    5d04:	d103      	bne.n	5d0e <z_tick_sleep+0x16>
	z_impl_k_yield();
    5d06:	f7ff ffb9 	bl	5c7c <z_impl_k_yield>
		k_yield();
		return 0;
    5d0a:	2000      	movs	r0, #0
    5d0c:	e02c      	b.n	5d68 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    5d0e:	1c83      	adds	r3, r0, #2
    5d10:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    5d14:	db2a      	blt.n	5d6c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5d16:	f001 fe08 	bl	792a <sys_clock_tick_get_32>
    5d1a:	1944      	adds	r4, r0, r5
    5d1c:	f04f 0320 	mov.w	r3, #32
    5d20:	f3ef 8811 	mrs	r8, BASEPRI
    5d24:	f383 8812 	msr	BASEPRI_MAX, r3
    5d28:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    5d2c:	4f11      	ldr	r7, [pc, #68]	; (5d74 <z_tick_sleep+0x7c>)
    5d2e:	4b12      	ldr	r3, [pc, #72]	; (5d78 <z_tick_sleep+0x80>)
    5d30:	68b8      	ldr	r0, [r7, #8]
    5d32:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    5d34:	f7ff fdfc 	bl	5930 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5d38:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5d3a:	4910      	ldr	r1, [pc, #64]	; (5d7c <z_tick_sleep+0x84>)
    5d3c:	462a      	mov	r2, r5
    5d3e:	4633      	mov	r3, r6
    5d40:	3018      	adds	r0, #24
    5d42:	f000 f905 	bl	5f50 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5d46:	68ba      	ldr	r2, [r7, #8]
    5d48:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5d4a:	7b53      	ldrb	r3, [r2, #13]
    5d4c:	f043 0310 	orr.w	r3, r3, #16
    5d50:	7353      	strb	r3, [r2, #13]
    5d52:	f7fc ff89 	bl	2c68 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5d56:	f001 fde8 	bl	792a <sys_clock_tick_get_32>
    5d5a:	1a20      	subs	r0, r4, r0
    5d5c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5d60:	2801      	cmp	r0, #1
    5d62:	f173 0300 	sbcs.w	r3, r3, #0
    5d66:	dbd0      	blt.n	5d0a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    5d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    5d6c:	f06f 0401 	mvn.w	r4, #1
    5d70:	1a24      	subs	r4, r4, r0
    5d72:	e7d3      	b.n	5d1c <z_tick_sleep+0x24>
    5d74:	20000e24 	.word	0x20000e24
    5d78:	20000e4c 	.word	0x20000e4c
    5d7c:	00007741 	.word	0x00007741

00005d80 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d80:	f1b1 3fff 	cmp.w	r1, #4294967295
    5d84:	bf08      	it	eq
    5d86:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    5d8a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d8c:	d106      	bne.n	5d9c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5d8e:	4b08      	ldr	r3, [pc, #32]	; (5db0 <z_impl_k_sleep+0x30>)
    5d90:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5d92:	f7ff ff05 	bl	5ba0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5d96:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5d9a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5d9c:	f7ff ffac 	bl	5cf8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5da4:	fb80 0303 	smull	r0, r3, r0, r3
    5da8:	0bc0      	lsrs	r0, r0, #15
    5daa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5dae:	e7f4      	b.n	5d9a <z_impl_k_sleep+0x1a>
    5db0:	20000e24 	.word	0x20000e24

00005db4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5db4:	4b01      	ldr	r3, [pc, #4]	; (5dbc <z_impl_z_current_get+0x8>)
    5db6:	6898      	ldr	r0, [r3, #8]
    5db8:	4770      	bx	lr
    5dba:	bf00      	nop
    5dbc:	20000e24 	.word	0x20000e24

00005dc0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dc4:	4604      	mov	r4, r0
    5dc6:	f04f 0320 	mov.w	r3, #32
    5dca:	f3ef 8611 	mrs	r6, BASEPRI
    5dce:	f383 8812 	msr	BASEPRI_MAX, r3
    5dd2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5dd6:	7b03      	ldrb	r3, [r0, #12]
    5dd8:	07d9      	lsls	r1, r3, #31
    5dda:	d50b      	bpl.n	5df4 <z_thread_abort+0x34>
	__asm__ volatile(
    5ddc:	f386 8811 	msr	BASEPRI, r6
    5de0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5de4:	4040      	eors	r0, r0
    5de6:	f380 8811 	msr	BASEPRI, r0
    5dea:	f04f 0004 	mov.w	r0, #4
    5dee:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5df4:	7b43      	ldrb	r3, [r0, #13]
    5df6:	071a      	lsls	r2, r3, #28
    5df8:	d504      	bpl.n	5e04 <z_thread_abort+0x44>
    5dfa:	f386 8811 	msr	BASEPRI, r6
    5dfe:	f3bf 8f6f 	isb	sy
    5e02:	e7f5      	b.n	5df0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e04:	f023 0220 	bic.w	r2, r3, #32
    5e08:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5e0c:	09d2      	lsrs	r2, r2, #7
    5e0e:	d120      	bne.n	5e52 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5e10:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5e12:	68a3      	ldr	r3, [r4, #8]
    5e14:	b113      	cbz	r3, 5e1c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5e16:	4620      	mov	r0, r4
    5e18:	f001 fc88 	bl	772c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5e1c:	f104 0018 	add.w	r0, r4, #24
    5e20:	f001 fd41 	bl	78a6 <z_abort_timeout>
    5e24:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5e28:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    5e2c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e2e:	42bd      	cmp	r5, r7
    5e30:	d000      	beq.n	5e34 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5e32:	b9b5      	cbnz	r5, 5e62 <z_thread_abort+0xa2>
		update_cache(1);
    5e34:	2001      	movs	r0, #1
    5e36:	f7ff fcef 	bl	5818 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5e3a:	4b10      	ldr	r3, [pc, #64]	; (5e7c <z_thread_abort+0xbc>)
    5e3c:	689b      	ldr	r3, [r3, #8]
    5e3e:	42a3      	cmp	r3, r4
    5e40:	d1db      	bne.n	5dfa <z_thread_abort+0x3a>
    5e42:	f3ef 8305 	mrs	r3, IPSR
    5e46:	2b00      	cmp	r3, #0
    5e48:	d1d7      	bne.n	5dfa <z_thread_abort+0x3a>
    5e4a:	4630      	mov	r0, r6
    5e4c:	f7fc ff0c 	bl	2c68 <arch_swap>
	return ret;
    5e50:	e7d3      	b.n	5dfa <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e52:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5e56:	f043 0308 	orr.w	r3, r3, #8
    5e5a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5e5c:	f001 fc5e 	bl	771c <sys_dlist_remove>
}
    5e60:	e7d7      	b.n	5e12 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    5e62:	4628      	mov	r0, r5
    5e64:	f001 fc62 	bl	772c <unpend_thread_no_timeout>
    5e68:	f105 0018 	add.w	r0, r5, #24
    5e6c:	f001 fd1b 	bl	78a6 <z_abort_timeout>
		ready_thread(thread);
    5e70:	4628      	mov	r0, r5
    5e72:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    5e76:	f7ff fd27 	bl	58c8 <ready_thread>
    5e7a:	e7d7      	b.n	5e2c <z_thread_abort+0x6c>
    5e7c:	20000e24 	.word	0x20000e24

00005e80 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5e80:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5e82:	4806      	ldr	r0, [pc, #24]	; (5e9c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5e84:	4a06      	ldr	r2, [pc, #24]	; (5ea0 <z_data_copy+0x20>)
    5e86:	4907      	ldr	r1, [pc, #28]	; (5ea4 <z_data_copy+0x24>)
    5e88:	1a12      	subs	r2, r2, r0
    5e8a:	f001 fbcb 	bl	7624 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5e92:	4a05      	ldr	r2, [pc, #20]	; (5ea8 <z_data_copy+0x28>)
    5e94:	4905      	ldr	r1, [pc, #20]	; (5eac <z_data_copy+0x2c>)
    5e96:	4806      	ldr	r0, [pc, #24]	; (5eb0 <z_data_copy+0x30>)
    5e98:	f001 bbc4 	b.w	7624 <z_early_memcpy>
    5e9c:	20000000 	.word	0x20000000
    5ea0:	2000021c 	.word	0x2000021c
    5ea4:	000088d4 	.word	0x000088d4
    5ea8:	00000000 	.word	0x00000000
    5eac:	000088d4 	.word	0x000088d4
    5eb0:	20000000 	.word	0x20000000

00005eb4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5eb4:	4b03      	ldr	r3, [pc, #12]	; (5ec4 <elapsed+0x10>)
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	b90b      	cbnz	r3, 5ebe <elapsed+0xa>
    5eba:	f7fe bb45 	b.w	4548 <sys_clock_elapsed>
}
    5ebe:	2000      	movs	r0, #0
    5ec0:	4770      	bx	lr
    5ec2:	bf00      	nop
    5ec4:	20000e58 	.word	0x20000e58

00005ec8 <next_timeout>:

static int32_t next_timeout(void)
{
    5ec8:	b510      	push	{r4, lr}
	return list->head == list;
    5eca:	4b11      	ldr	r3, [pc, #68]	; (5f10 <next_timeout+0x48>)
    5ecc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ece:	429c      	cmp	r4, r3
    5ed0:	d10a      	bne.n	5ee8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5ed2:	f7ff ffef 	bl	5eb4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    5ed6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5eda:	4b0e      	ldr	r3, [pc, #56]	; (5f14 <next_timeout+0x4c>)
    5edc:	691b      	ldr	r3, [r3, #16]
    5ede:	b113      	cbz	r3, 5ee6 <next_timeout+0x1e>
    5ee0:	4298      	cmp	r0, r3
    5ee2:	bfa8      	it	ge
    5ee4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5ee6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    5ee8:	f7ff ffe4 	bl	5eb4 <elapsed>
	if ((to == NULL) ||
    5eec:	2c00      	cmp	r4, #0
    5eee:	d0f2      	beq.n	5ed6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5ef0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5ef4:	1a1b      	subs	r3, r3, r0
    5ef6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    5efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5efe:	f172 0100 	sbcs.w	r1, r2, #0
    5f02:	dae8      	bge.n	5ed6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    5f04:	2a00      	cmp	r2, #0
    5f06:	bfac      	ite	ge
    5f08:	4618      	movge	r0, r3
    5f0a:	2000      	movlt	r0, #0
    5f0c:	e7e5      	b.n	5eda <next_timeout+0x12>
    5f0e:	bf00      	nop
    5f10:	2000010c 	.word	0x2000010c
    5f14:	20000e24 	.word	0x20000e24

00005f18 <remove_timeout>:
{
    5f18:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5f1a:	b170      	cbz	r0, 5f3a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5f1c:	4b0b      	ldr	r3, [pc, #44]	; (5f4c <remove_timeout+0x34>)
    5f1e:	685b      	ldr	r3, [r3, #4]
    5f20:	4298      	cmp	r0, r3
    5f22:	d00a      	beq.n	5f3a <remove_timeout+0x22>
    5f24:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    5f26:	b143      	cbz	r3, 5f3a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5f28:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5f2c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5f30:	1912      	adds	r2, r2, r4
    5f32:	eb41 0105 	adc.w	r1, r1, r5
    5f36:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    5f3a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    5f3e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5f40:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5f42:	2300      	movs	r3, #0
	node->prev = NULL;
    5f44:	e9c0 3300 	strd	r3, r3, [r0]
}
    5f48:	bd30      	pop	{r4, r5, pc}
    5f4a:	bf00      	nop
    5f4c:	2000010c 	.word	0x2000010c

00005f50 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f50:	f1b3 3fff 	cmp.w	r3, #4294967295
    5f54:	bf08      	it	eq
    5f56:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f5c:	4604      	mov	r4, r0
    5f5e:	461d      	mov	r5, r3
    5f60:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f62:	d061      	beq.n	6028 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5f64:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5f66:	f04f 0320 	mov.w	r3, #32
    5f6a:	f3ef 8711 	mrs	r7, BASEPRI
    5f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f72:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5f76:	3201      	adds	r2, #1
    5f78:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    5f7c:	da24      	bge.n	5fc8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5f7e:	f06f 0301 	mvn.w	r3, #1
    5f82:	492f      	ldr	r1, [pc, #188]	; (6040 <z_add_timeout+0xf0>)
    5f84:	e9d1 2000 	ldrd	r2, r0, [r1]
    5f88:	1a9b      	subs	r3, r3, r2
    5f8a:	f04f 32ff 	mov.w	r2, #4294967295
    5f8e:	eb62 0000 	sbc.w	r0, r2, r0
    5f92:	1b9e      	subs	r6, r3, r6
    5f94:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    5f98:	2e01      	cmp	r6, #1
    5f9a:	f170 0300 	sbcs.w	r3, r0, #0
    5f9e:	da01      	bge.n	5fa4 <z_add_timeout+0x54>
    5fa0:	2601      	movs	r6, #1
    5fa2:	2000      	movs	r0, #0
    5fa4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    5fa8:	4e26      	ldr	r6, [pc, #152]	; (6044 <z_add_timeout+0xf4>)
    5faa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    5fae:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fb0:	45b4      	cmp	ip, r6
    5fb2:	bf08      	it	eq
    5fb4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    5fb8:	f1bc 0f00 	cmp.w	ip, #0
    5fbc:	d10d      	bne.n	5fda <z_add_timeout+0x8a>
	node->prev = tail;
    5fbe:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    5fc2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    5fc4:	6074      	str	r4, [r6, #4]
}
    5fc6:	e01c      	b.n	6002 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    5fc8:	f7ff ff74 	bl	5eb4 <elapsed>
    5fcc:	3601      	adds	r6, #1
    5fce:	f145 0500 	adc.w	r5, r5, #0
    5fd2:	1836      	adds	r6, r6, r0
    5fd4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    5fd8:	e7e4      	b.n	5fa4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    5fda:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    5fde:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    5fe2:	4293      	cmp	r3, r2
    5fe4:	eb71 0e00 	sbcs.w	lr, r1, r0
    5fe8:	da1f      	bge.n	602a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    5fea:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    5fec:	f8dc 3004 	ldr.w	r3, [ip, #4]
    5ff0:	eb60 0001 	sbc.w	r0, r0, r1
    5ff4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    5ff8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    5ffc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5ffe:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    6002:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6004:	42b3      	cmp	r3, r6
    6006:	d00b      	beq.n	6020 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6008:	429c      	cmp	r4, r3
    600a:	d109      	bne.n	6020 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    600c:	f7ff ff5c 	bl	5ec8 <next_timeout>

			if (next_time == 0 ||
    6010:	b118      	cbz	r0, 601a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    6012:	4b0d      	ldr	r3, [pc, #52]	; (6048 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    6014:	691b      	ldr	r3, [r3, #16]
    6016:	4283      	cmp	r3, r0
    6018:	d002      	beq.n	6020 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    601a:	2100      	movs	r1, #0
    601c:	f7fe fa64 	bl	44e8 <sys_clock_set_timeout>
	__asm__ volatile(
    6020:	f387 8811 	msr	BASEPRI, r7
    6024:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    602a:	1a9b      	subs	r3, r3, r2
    602c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    6030:	45ac      	cmp	ip, r5
    6032:	e9c4 3104 	strd	r3, r1, [r4, #16]
    6036:	d0c2      	beq.n	5fbe <z_add_timeout+0x6e>
    6038:	f8dc c000 	ldr.w	ip, [ip]
    603c:	e7bc      	b.n	5fb8 <z_add_timeout+0x68>
    603e:	bf00      	nop
    6040:	20000800 	.word	0x20000800
    6044:	2000010c 	.word	0x2000010c
    6048:	20000e24 	.word	0x20000e24

0000604c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6050:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6052:	f7ff fccf 	bl	59f4 <z_time_slice>
	__asm__ volatile(
    6056:	f04f 0320 	mov.w	r3, #32
    605a:	f3ef 8611 	mrs	r6, BASEPRI
    605e:	f383 8812 	msr	BASEPRI_MAX, r3
    6062:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6066:	4f24      	ldr	r7, [pc, #144]	; (60f8 <sys_clock_announce+0xac>)
	return list->head == list;
    6068:	f8df 8090 	ldr.w	r8, [pc, #144]	; 60fc <sys_clock_announce+0xb0>
    606c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6070:	4a23      	ldr	r2, [pc, #140]	; (6100 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6072:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    6074:	603c      	str	r4, [r7, #0]
	return list->head == list;
    6076:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    607a:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    607e:	d00b      	beq.n	6098 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6080:	b150      	cbz	r0, 6098 <sys_clock_announce+0x4c>
    6082:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    6086:	42ac      	cmp	r4, r5
    6088:	eb71 090c 	sbcs.w	r9, r1, ip
    608c:	da17      	bge.n	60be <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    608e:	1b2d      	subs	r5, r5, r4
    6090:	eb6c 0c01 	sbc.w	ip, ip, r1
    6094:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    6098:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    609a:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    609e:	eb4e 0101 	adc.w	r1, lr, r1
    60a2:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    60a6:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    60a8:	f7ff ff0e 	bl	5ec8 <next_timeout>
    60ac:	4621      	mov	r1, r4
    60ae:	f7fe fa1b 	bl	44e8 <sys_clock_set_timeout>
	__asm__ volatile(
    60b2:	f386 8811 	msr	BASEPRI, r6
    60b6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    60ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    60be:	18eb      	adds	r3, r5, r3
    60c0:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    60c4:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    60c8:	2200      	movs	r2, #0
    60ca:	2300      	movs	r3, #0
    60cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    60d0:	f7ff ff22 	bl	5f18 <remove_timeout>
    60d4:	f386 8811 	msr	BASEPRI, r6
    60d8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    60dc:	6883      	ldr	r3, [r0, #8]
    60de:	4798      	blx	r3
	__asm__ volatile(
    60e0:	f04f 0320 	mov.w	r3, #32
    60e4:	f3ef 8611 	mrs	r6, BASEPRI
    60e8:	f383 8812 	msr	BASEPRI_MAX, r3
    60ec:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    60f0:	683c      	ldr	r4, [r7, #0]
    60f2:	1b64      	subs	r4, r4, r5
    60f4:	e7ba      	b.n	606c <sys_clock_announce+0x20>
    60f6:	bf00      	nop
    60f8:	20000e58 	.word	0x20000e58
    60fc:	2000010c 	.word	0x2000010c
    6100:	20000800 	.word	0x20000800

00006104 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6104:	b510      	push	{r4, lr}
    6106:	f04f 0320 	mov.w	r3, #32
    610a:	f3ef 8411 	mrs	r4, BASEPRI
    610e:	f383 8812 	msr	BASEPRI_MAX, r3
    6112:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    6116:	f7ff fecd 	bl	5eb4 <elapsed>
    611a:	4603      	mov	r3, r0
    611c:	4a05      	ldr	r2, [pc, #20]	; (6134 <sys_clock_tick_get+0x30>)
    611e:	e9d2 0100 	ldrd	r0, r1, [r2]
    6122:	1818      	adds	r0, r3, r0
    6124:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    6128:	f384 8811 	msr	BASEPRI, r4
    612c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6130:	bd10      	pop	{r4, pc}
    6132:	bf00      	nop
    6134:	20000800 	.word	0x20000800

00006138 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6138:	b570      	push	{r4, r5, r6, lr}
    613a:	4604      	mov	r4, r0
	__asm__ volatile(
    613c:	f04f 0320 	mov.w	r3, #32
    6140:	f3ef 8511 	mrs	r5, BASEPRI
    6144:	f383 8812 	msr	BASEPRI_MAX, r3
    6148:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    614c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    6150:	3301      	adds	r3, #1
    6152:	f142 0200 	adc.w	r2, r2, #0
    6156:	2b02      	cmp	r3, #2
    6158:	f172 0200 	sbcs.w	r2, r2, #0
    615c:	d322      	bcc.n	61a4 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
    615e:	f001 fbe8 	bl	7932 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    6162:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    6166:	3001      	adds	r0, #1
    6168:	f141 0100 	adc.w	r1, r1, #0
    616c:	18c0      	adds	r0, r0, r3
    616e:	eb41 0102 	adc.w	r1, r1, r2
    6172:	2801      	cmp	r0, #1
    6174:	f171 0100 	sbcs.w	r1, r1, #0
    6178:	db32      	blt.n	61e0 <z_timer_expiration_handler+0xa8>
    617a:	f001 fbda 	bl	7932 <z_impl_k_uptime_ticks>
    617e:	3001      	adds	r0, #1
    6180:	f141 0300 	adc.w	r3, r1, #0
    6184:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
    6188:	1880      	adds	r0, r0, r2
    618a:	f06f 0201 	mvn.w	r2, #1
    618e:	eb43 0301 	adc.w	r3, r3, r1
    6192:	f04f 31ff 	mov.w	r1, #4294967295
    6196:	1a12      	subs	r2, r2, r0
    6198:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    619c:	4620      	mov	r0, r4
    619e:	491a      	ldr	r1, [pc, #104]	; (6208 <z_timer_expiration_handler+0xd0>)
    61a0:	f7ff fed6 	bl	5f50 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    61a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    61a6:	3301      	adds	r3, #1
    61a8:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    61aa:	6a23      	ldr	r3, [r4, #32]
    61ac:	b173      	cbz	r3, 61cc <z_timer_expiration_handler+0x94>
	__asm__ volatile(
    61ae:	f385 8811 	msr	BASEPRI, r5
    61b2:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    61b6:	4620      	mov	r0, r4
    61b8:	6a23      	ldr	r3, [r4, #32]
    61ba:	4798      	blx	r3
	__asm__ volatile(
    61bc:	f04f 0320 	mov.w	r3, #32
    61c0:	f3ef 8511 	mrs	r5, BASEPRI
    61c4:	f383 8812 	msr	BASEPRI_MAX, r3
    61c8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    61cc:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    61d0:	42a6      	cmp	r6, r4
    61d2:	d000      	beq.n	61d6 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    61d4:	b94e      	cbnz	r6, 61ea <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
    61d6:	f385 8811 	msr	BASEPRI, r5
    61da:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    61de:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    61e0:	f06f 0201 	mvn.w	r2, #1
    61e4:	f04f 33ff 	mov.w	r3, #4294967295
    61e8:	e7d8      	b.n	619c <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
    61ea:	4630      	mov	r0, r6
    61ec:	f001 fb02 	bl	77f4 <z_unpend_thread_no_timeout>
    61f0:	2300      	movs	r3, #0
    61f2:	67b3      	str	r3, [r6, #120]	; 0x78
    61f4:	f385 8811 	msr	BASEPRI, r5
    61f8:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    61fc:	4630      	mov	r0, r6
}
    61fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6202:	f001 bae7 	b.w	77d4 <z_ready_thread>
    6206:	bf00      	nop
    6208:	00006139 	.word	0x00006139

0000620c <z_impl_k_timer_start>:
void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    620c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6210:	bf08      	it	eq
    6212:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    621a:	4619      	mov	r1, r3
    621c:	4605      	mov	r5, r0
    621e:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
    6222:	4614      	mov	r4, r2
    6224:	4691      	mov	r9, r2
    6226:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6228:	d037      	beq.n	629a <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    622a:	f1b0 3fff 	cmp.w	r0, #4294967295
    622e:	bf08      	it	eq
    6230:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6234:	4637      	mov	r7, r6
    6236:	4682      	mov	sl, r0
    6238:	d011      	beq.n	625e <z_impl_k_timer_start+0x52>
    623a:	ea50 0306 	orrs.w	r3, r0, r6
    623e:	d00e      	beq.n	625e <z_impl_k_timer_start+0x52>
    6240:	1c72      	adds	r2, r6, #1
    6242:	f170 33ff 	sbcs.w	r3, r0, #4294967295
    6246:	db0a      	blt.n	625e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
    6248:	2e02      	cmp	r6, #2
    624a:	4684      	mov	ip, r0
    624c:	f170 0000 	sbcs.w	r0, r0, #0
    6250:	bfbc      	itt	lt
    6252:	2702      	movlt	r7, #2
    6254:	f04f 0c00 	movlt.w	ip, #0
    6258:	3f01      	subs	r7, #1
    625a:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    625e:	1c63      	adds	r3, r4, #1
    6260:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    6264:	db0a      	blt.n	627c <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6266:	2c01      	cmp	r4, #1
    6268:	f171 0300 	sbcs.w	r3, r1, #0
    626c:	4622      	mov	r2, r4
    626e:	bfbc      	itt	lt
    6270:	2201      	movlt	r2, #1
    6272:	2100      	movlt	r1, #0
    6274:	f112 39ff 	adds.w	r9, r2, #4294967295
    6278:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    627c:	4628      	mov	r0, r5
    627e:	f001 fb12 	bl	78a6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6282:	2300      	movs	r3, #0
	timer->period = period;
    6284:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
    6288:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    628a:	464a      	mov	r2, r9
    628c:	4643      	mov	r3, r8
    628e:	4628      	mov	r0, r5
		     duration);
}
    6290:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6294:	4902      	ldr	r1, [pc, #8]	; (62a0 <z_impl_k_timer_start+0x94>)
    6296:	f7ff be5b 	b.w	5f50 <z_add_timeout>
}
    629a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    629e:	bf00      	nop
    62a0:	00006139 	.word	0x00006139

000062a4 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    62a4:	4801      	ldr	r0, [pc, #4]	; (62ac <boot_banner+0x8>)
    62a6:	f000 ba61 	b.w	676c <printk>
    62aa:	bf00      	nop
    62ac:	000088a6 	.word	0x000088a6

000062b0 <nrf_cc3xx_platform_init_no_rng>:
    62b0:	b510      	push	{r4, lr}
    62b2:	4c0a      	ldr	r4, [pc, #40]	; (62dc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    62b4:	6823      	ldr	r3, [r4, #0]
    62b6:	b11b      	cbz	r3, 62c0 <nrf_cc3xx_platform_init_no_rng+0x10>
    62b8:	2301      	movs	r3, #1
    62ba:	2000      	movs	r0, #0
    62bc:	6023      	str	r3, [r4, #0]
    62be:	bd10      	pop	{r4, pc}
    62c0:	f000 f8ec 	bl	649c <CC_LibInitNoRng>
    62c4:	2800      	cmp	r0, #0
    62c6:	d0f7      	beq.n	62b8 <nrf_cc3xx_platform_init_no_rng+0x8>
    62c8:	3801      	subs	r0, #1
    62ca:	2806      	cmp	r0, #6
    62cc:	d803      	bhi.n	62d6 <nrf_cc3xx_platform_init_no_rng+0x26>
    62ce:	4b04      	ldr	r3, [pc, #16]	; (62e0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    62d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    62d4:	bd10      	pop	{r4, pc}
    62d6:	4803      	ldr	r0, [pc, #12]	; (62e4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    62d8:	bd10      	pop	{r4, pc}
    62da:	bf00      	nop
    62dc:	20000e5c 	.word	0x20000e5c
    62e0:	00007f50 	.word	0x00007f50
    62e4:	ffff8ffe 	.word	0xffff8ffe

000062e8 <nrf_cc3xx_platform_abort>:
    62e8:	f3bf 8f4f 	dsb	sy
    62ec:	4905      	ldr	r1, [pc, #20]	; (6304 <nrf_cc3xx_platform_abort+0x1c>)
    62ee:	4b06      	ldr	r3, [pc, #24]	; (6308 <nrf_cc3xx_platform_abort+0x20>)
    62f0:	68ca      	ldr	r2, [r1, #12]
    62f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    62f6:	4313      	orrs	r3, r2
    62f8:	60cb      	str	r3, [r1, #12]
    62fa:	f3bf 8f4f 	dsb	sy
    62fe:	bf00      	nop
    6300:	e7fd      	b.n	62fe <nrf_cc3xx_platform_abort+0x16>
    6302:	bf00      	nop
    6304:	e000ed00 	.word	0xe000ed00
    6308:	05fa0004 	.word	0x05fa0004

0000630c <CC_PalAbort>:
    630c:	b430      	push	{r4, r5}
    630e:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6312:	2500      	movs	r5, #0
    6314:	4b07      	ldr	r3, [pc, #28]	; (6334 <CC_PalAbort+0x28>)
    6316:	4c08      	ldr	r4, [pc, #32]	; (6338 <CC_PalAbort+0x2c>)
    6318:	4908      	ldr	r1, [pc, #32]	; (633c <CC_PalAbort+0x30>)
    631a:	6849      	ldr	r1, [r1, #4]
    631c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6320:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6324:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6328:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    632c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    6330:	bc30      	pop	{r4, r5}
    6332:	4708      	bx	r1
    6334:	50841000 	.word	0x50841000
    6338:	50840000 	.word	0x50840000
    633c:	20000114 	.word	0x20000114

00006340 <nrf_cc3xx_platform_set_abort>:
    6340:	4b02      	ldr	r3, [pc, #8]	; (634c <nrf_cc3xx_platform_set_abort+0xc>)
    6342:	e9d0 1200 	ldrd	r1, r2, [r0]
    6346:	e9c3 1200 	strd	r1, r2, [r3]
    634a:	4770      	bx	lr
    634c:	20000114 	.word	0x20000114

00006350 <mutex_free>:
    6350:	b510      	push	{r4, lr}
    6352:	4604      	mov	r4, r0
    6354:	b150      	cbz	r0, 636c <mutex_free+0x1c>
    6356:	6863      	ldr	r3, [r4, #4]
    6358:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    635c:	d005      	beq.n	636a <mutex_free+0x1a>
    635e:	4a06      	ldr	r2, [pc, #24]	; (6378 <mutex_free+0x28>)
    6360:	4293      	cmp	r3, r2
    6362:	d002      	beq.n	636a <mutex_free+0x1a>
    6364:	2300      	movs	r3, #0
    6366:	6062      	str	r2, [r4, #4]
    6368:	6023      	str	r3, [r4, #0]
    636a:	bd10      	pop	{r4, pc}
    636c:	4b03      	ldr	r3, [pc, #12]	; (637c <mutex_free+0x2c>)
    636e:	4804      	ldr	r0, [pc, #16]	; (6380 <mutex_free+0x30>)
    6370:	685b      	ldr	r3, [r3, #4]
    6372:	4798      	blx	r3
    6374:	e7ef      	b.n	6356 <mutex_free+0x6>
    6376:	bf00      	nop
    6378:	a95c5f2c 	.word	0xa95c5f2c
    637c:	20000114 	.word	0x20000114
    6380:	00007f6c 	.word	0x00007f6c

00006384 <mutex_lock>:
    6384:	b1c8      	cbz	r0, 63ba <mutex_lock+0x36>
    6386:	6843      	ldr	r3, [r0, #4]
    6388:	4a0d      	ldr	r2, [pc, #52]	; (63c0 <mutex_lock+0x3c>)
    638a:	4293      	cmp	r3, r2
    638c:	d013      	beq.n	63b6 <mutex_lock+0x32>
    638e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6392:	d00e      	beq.n	63b2 <mutex_lock+0x2e>
    6394:	2301      	movs	r3, #1
    6396:	e850 2f00 	ldrex	r2, [r0]
    639a:	4619      	mov	r1, r3
    639c:	e840 1c00 	strex	ip, r1, [r0]
    63a0:	f09c 0f00 	teq	ip, #0
    63a4:	d1f7      	bne.n	6396 <mutex_lock+0x12>
    63a6:	2a01      	cmp	r2, #1
    63a8:	d0f5      	beq.n	6396 <mutex_lock+0x12>
    63aa:	f3bf 8f5f 	dmb	sy
    63ae:	2000      	movs	r0, #0
    63b0:	4770      	bx	lr
    63b2:	4804      	ldr	r0, [pc, #16]	; (63c4 <mutex_lock+0x40>)
    63b4:	4770      	bx	lr
    63b6:	4804      	ldr	r0, [pc, #16]	; (63c8 <mutex_lock+0x44>)
    63b8:	4770      	bx	lr
    63ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    63be:	4770      	bx	lr
    63c0:	a95c5f2c 	.word	0xa95c5f2c
    63c4:	ffff8fe9 	.word	0xffff8fe9
    63c8:	ffff8fea 	.word	0xffff8fea

000063cc <mutex_unlock>:
    63cc:	4603      	mov	r3, r0
    63ce:	b180      	cbz	r0, 63f2 <mutex_unlock+0x26>
    63d0:	6842      	ldr	r2, [r0, #4]
    63d2:	4909      	ldr	r1, [pc, #36]	; (63f8 <mutex_unlock+0x2c>)
    63d4:	428a      	cmp	r2, r1
    63d6:	d00a      	beq.n	63ee <mutex_unlock+0x22>
    63d8:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    63dc:	d005      	beq.n	63ea <mutex_unlock+0x1e>
    63de:	f3bf 8f5f 	dmb	sy
    63e2:	2200      	movs	r2, #0
    63e4:	4610      	mov	r0, r2
    63e6:	601a      	str	r2, [r3, #0]
    63e8:	4770      	bx	lr
    63ea:	4804      	ldr	r0, [pc, #16]	; (63fc <mutex_unlock+0x30>)
    63ec:	4770      	bx	lr
    63ee:	4804      	ldr	r0, [pc, #16]	; (6400 <mutex_unlock+0x34>)
    63f0:	4770      	bx	lr
    63f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    63f6:	4770      	bx	lr
    63f8:	a95c5f2c 	.word	0xa95c5f2c
    63fc:	ffff8fe9 	.word	0xffff8fe9
    6400:	ffff8fea 	.word	0xffff8fea

00006404 <mutex_init>:
    6404:	b510      	push	{r4, lr}
    6406:	4604      	mov	r4, r0
    6408:	b120      	cbz	r0, 6414 <mutex_init+0x10>
    640a:	2300      	movs	r3, #0
    640c:	4a03      	ldr	r2, [pc, #12]	; (641c <mutex_init+0x18>)
    640e:	6023      	str	r3, [r4, #0]
    6410:	6062      	str	r2, [r4, #4]
    6412:	bd10      	pop	{r4, pc}
    6414:	4802      	ldr	r0, [pc, #8]	; (6420 <mutex_init+0x1c>)
    6416:	f7ff ff79 	bl	630c <CC_PalAbort>
    641a:	e7f6      	b.n	640a <mutex_init+0x6>
    641c:	3a00003a 	.word	0x3a00003a
    6420:	00007f94 	.word	0x00007f94

00006424 <nrf_cc3xx_platform_set_mutexes>:
    6424:	b570      	push	{r4, r5, r6, lr}
    6426:	4c19      	ldr	r4, [pc, #100]	; (648c <nrf_cc3xx_platform_set_mutexes+0x68>)
    6428:	f8d0 c004 	ldr.w	ip, [r0, #4]
    642c:	6806      	ldr	r6, [r0, #0]
    642e:	f8c4 c004 	str.w	ip, [r4, #4]
    6432:	f8d0 c008 	ldr.w	ip, [r0, #8]
    6436:	68c0      	ldr	r0, [r0, #12]
    6438:	f8c4 c008 	str.w	ip, [r4, #8]
    643c:	60e0      	str	r0, [r4, #12]
    643e:	6026      	str	r6, [r4, #0]
    6440:	6808      	ldr	r0, [r1, #0]
    6442:	4b13      	ldr	r3, [pc, #76]	; (6490 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    6444:	4d13      	ldr	r5, [pc, #76]	; (6494 <nrf_cc3xx_platform_set_mutexes+0x70>)
    6446:	6018      	str	r0, [r3, #0]
    6448:	6848      	ldr	r0, [r1, #4]
    644a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    644e:	6058      	str	r0, [r3, #4]
    6450:	6888      	ldr	r0, [r1, #8]
    6452:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    6456:	6098      	str	r0, [r3, #8]
    6458:	68c8      	ldr	r0, [r1, #12]
    645a:	6909      	ldr	r1, [r1, #16]
    645c:	60d8      	str	r0, [r3, #12]
    645e:	6119      	str	r1, [r3, #16]
    6460:	d012      	beq.n	6488 <nrf_cc3xx_platform_set_mutexes+0x64>
    6462:	2300      	movs	r3, #0
    6464:	4a0c      	ldr	r2, [pc, #48]	; (6498 <nrf_cc3xx_platform_set_mutexes+0x74>)
    6466:	f505 708a 	add.w	r0, r5, #276	; 0x114
    646a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    646e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    6472:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    6476:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    647a:	47b0      	blx	r6
    647c:	6823      	ldr	r3, [r4, #0]
    647e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6486:	4718      	bx	r3
    6488:	bd70      	pop	{r4, r5, r6, pc}
    648a:	bf00      	nop
    648c:	20000124 	.word	0x20000124
    6490:	20000134 	.word	0x20000134
    6494:	20000e74 	.word	0x20000e74
    6498:	a95c5f2c 	.word	0xa95c5f2c

0000649c <CC_LibInitNoRng>:
    649c:	b538      	push	{r3, r4, r5, lr}
    649e:	f000 f82f 	bl	6500 <CC_HalInit>
    64a2:	b120      	cbz	r0, 64ae <CC_LibInitNoRng+0x12>
    64a4:	2403      	movs	r4, #3
    64a6:	f000 f863 	bl	6570 <CC_PalTerminate>
    64aa:	4620      	mov	r0, r4
    64ac:	bd38      	pop	{r3, r4, r5, pc}
    64ae:	f000 f831 	bl	6514 <CC_PalInit>
    64b2:	b998      	cbnz	r0, 64dc <CC_LibInitNoRng+0x40>
    64b4:	f000 f8ac 	bl	6610 <CC_PalPowerSaveModeSelect>
    64b8:	b998      	cbnz	r0, 64e2 <CC_LibInitNoRng+0x46>
    64ba:	4d0f      	ldr	r5, [pc, #60]	; (64f8 <CC_LibInitNoRng+0x5c>)
    64bc:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    64c0:	0e1b      	lsrs	r3, r3, #24
    64c2:	2bf0      	cmp	r3, #240	; 0xf0
    64c4:	d108      	bne.n	64d8 <CC_LibInitNoRng+0x3c>
    64c6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    64ca:	4b0c      	ldr	r3, [pc, #48]	; (64fc <CC_LibInitNoRng+0x60>)
    64cc:	429a      	cmp	r2, r3
    64ce:	d00a      	beq.n	64e6 <CC_LibInitNoRng+0x4a>
    64d0:	2407      	movs	r4, #7
    64d2:	f000 f817 	bl	6504 <CC_HalTerminate>
    64d6:	e7e6      	b.n	64a6 <CC_LibInitNoRng+0xa>
    64d8:	2406      	movs	r4, #6
    64da:	e7fa      	b.n	64d2 <CC_LibInitNoRng+0x36>
    64dc:	2404      	movs	r4, #4
    64de:	4620      	mov	r0, r4
    64e0:	bd38      	pop	{r3, r4, r5, pc}
    64e2:	2400      	movs	r4, #0
    64e4:	e7f5      	b.n	64d2 <CC_LibInitNoRng+0x36>
    64e6:	2001      	movs	r0, #1
    64e8:	f000 f892 	bl	6610 <CC_PalPowerSaveModeSelect>
    64ec:	4604      	mov	r4, r0
    64ee:	2800      	cmp	r0, #0
    64f0:	d1f7      	bne.n	64e2 <CC_LibInitNoRng+0x46>
    64f2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    64f6:	e7d8      	b.n	64aa <CC_LibInitNoRng+0xe>
    64f8:	50841000 	.word	0x50841000
    64fc:	20e00000 	.word	0x20e00000

00006500 <CC_HalInit>:
    6500:	2000      	movs	r0, #0
    6502:	4770      	bx	lr

00006504 <CC_HalTerminate>:
    6504:	2000      	movs	r0, #0
    6506:	4770      	bx	lr

00006508 <CC_HalMaskInterrupt>:
    6508:	4b01      	ldr	r3, [pc, #4]	; (6510 <CC_HalMaskInterrupt+0x8>)
    650a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    650e:	4770      	bx	lr
    6510:	50841000 	.word	0x50841000

00006514 <CC_PalInit>:
    6514:	b510      	push	{r4, lr}
    6516:	4811      	ldr	r0, [pc, #68]	; (655c <CC_PalInit+0x48>)
    6518:	f000 f848 	bl	65ac <CC_PalMutexCreate>
    651c:	b100      	cbz	r0, 6520 <CC_PalInit+0xc>
    651e:	bd10      	pop	{r4, pc}
    6520:	480f      	ldr	r0, [pc, #60]	; (6560 <CC_PalInit+0x4c>)
    6522:	f000 f843 	bl	65ac <CC_PalMutexCreate>
    6526:	2800      	cmp	r0, #0
    6528:	d1f9      	bne.n	651e <CC_PalInit+0xa>
    652a:	4c0e      	ldr	r4, [pc, #56]	; (6564 <CC_PalInit+0x50>)
    652c:	4620      	mov	r0, r4
    652e:	f000 f83d 	bl	65ac <CC_PalMutexCreate>
    6532:	2800      	cmp	r0, #0
    6534:	d1f3      	bne.n	651e <CC_PalInit+0xa>
    6536:	4b0c      	ldr	r3, [pc, #48]	; (6568 <CC_PalInit+0x54>)
    6538:	480c      	ldr	r0, [pc, #48]	; (656c <CC_PalInit+0x58>)
    653a:	601c      	str	r4, [r3, #0]
    653c:	f000 f836 	bl	65ac <CC_PalMutexCreate>
    6540:	4601      	mov	r1, r0
    6542:	2800      	cmp	r0, #0
    6544:	d1eb      	bne.n	651e <CC_PalInit+0xa>
    6546:	f000 f82d 	bl	65a4 <CC_PalDmaInit>
    654a:	4604      	mov	r4, r0
    654c:	b108      	cbz	r0, 6552 <CC_PalInit+0x3e>
    654e:	4620      	mov	r0, r4
    6550:	bd10      	pop	{r4, pc}
    6552:	f000 f83f 	bl	65d4 <CC_PalPowerSaveModeInit>
    6556:	4620      	mov	r0, r4
    6558:	e7fa      	b.n	6550 <CC_PalInit+0x3c>
    655a:	bf00      	nop
    655c:	2000016c 	.word	0x2000016c
    6560:	20000160 	.word	0x20000160
    6564:	20000168 	.word	0x20000168
    6568:	20000170 	.word	0x20000170
    656c:	20000164 	.word	0x20000164

00006570 <CC_PalTerminate>:
    6570:	b508      	push	{r3, lr}
    6572:	4808      	ldr	r0, [pc, #32]	; (6594 <CC_PalTerminate+0x24>)
    6574:	f000 f824 	bl	65c0 <CC_PalMutexDestroy>
    6578:	4807      	ldr	r0, [pc, #28]	; (6598 <CC_PalTerminate+0x28>)
    657a:	f000 f821 	bl	65c0 <CC_PalMutexDestroy>
    657e:	4807      	ldr	r0, [pc, #28]	; (659c <CC_PalTerminate+0x2c>)
    6580:	f000 f81e 	bl	65c0 <CC_PalMutexDestroy>
    6584:	4806      	ldr	r0, [pc, #24]	; (65a0 <CC_PalTerminate+0x30>)
    6586:	f000 f81b 	bl	65c0 <CC_PalMutexDestroy>
    658a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    658e:	f000 b80b 	b.w	65a8 <CC_PalDmaTerminate>
    6592:	bf00      	nop
    6594:	2000016c 	.word	0x2000016c
    6598:	20000160 	.word	0x20000160
    659c:	20000168 	.word	0x20000168
    65a0:	20000164 	.word	0x20000164

000065a4 <CC_PalDmaInit>:
    65a4:	2000      	movs	r0, #0
    65a6:	4770      	bx	lr

000065a8 <CC_PalDmaTerminate>:
    65a8:	4770      	bx	lr
    65aa:	bf00      	nop

000065ac <CC_PalMutexCreate>:
    65ac:	b508      	push	{r3, lr}
    65ae:	4b03      	ldr	r3, [pc, #12]	; (65bc <CC_PalMutexCreate+0x10>)
    65b0:	6802      	ldr	r2, [r0, #0]
    65b2:	681b      	ldr	r3, [r3, #0]
    65b4:	6810      	ldr	r0, [r2, #0]
    65b6:	4798      	blx	r3
    65b8:	2000      	movs	r0, #0
    65ba:	bd08      	pop	{r3, pc}
    65bc:	20000124 	.word	0x20000124

000065c0 <CC_PalMutexDestroy>:
    65c0:	b508      	push	{r3, lr}
    65c2:	4b03      	ldr	r3, [pc, #12]	; (65d0 <CC_PalMutexDestroy+0x10>)
    65c4:	6802      	ldr	r2, [r0, #0]
    65c6:	685b      	ldr	r3, [r3, #4]
    65c8:	6810      	ldr	r0, [r2, #0]
    65ca:	4798      	blx	r3
    65cc:	2000      	movs	r0, #0
    65ce:	bd08      	pop	{r3, pc}
    65d0:	20000124 	.word	0x20000124

000065d4 <CC_PalPowerSaveModeInit>:
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	4c09      	ldr	r4, [pc, #36]	; (65fc <CC_PalPowerSaveModeInit+0x28>)
    65d8:	4d09      	ldr	r5, [pc, #36]	; (6600 <CC_PalPowerSaveModeInit+0x2c>)
    65da:	6920      	ldr	r0, [r4, #16]
    65dc:	68ab      	ldr	r3, [r5, #8]
    65de:	4798      	blx	r3
    65e0:	b118      	cbz	r0, 65ea <CC_PalPowerSaveModeInit+0x16>
    65e2:	4b08      	ldr	r3, [pc, #32]	; (6604 <CC_PalPowerSaveModeInit+0x30>)
    65e4:	4808      	ldr	r0, [pc, #32]	; (6608 <CC_PalPowerSaveModeInit+0x34>)
    65e6:	685b      	ldr	r3, [r3, #4]
    65e8:	4798      	blx	r3
    65ea:	2100      	movs	r1, #0
    65ec:	4a07      	ldr	r2, [pc, #28]	; (660c <CC_PalPowerSaveModeInit+0x38>)
    65ee:	68eb      	ldr	r3, [r5, #12]
    65f0:	6011      	str	r1, [r2, #0]
    65f2:	6920      	ldr	r0, [r4, #16]
    65f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    65f8:	4718      	bx	r3
    65fa:	bf00      	nop
    65fc:	20000134 	.word	0x20000134
    6600:	20000124 	.word	0x20000124
    6604:	20000114 	.word	0x20000114
    6608:	00007fb8 	.word	0x00007fb8
    660c:	20000e70 	.word	0x20000e70

00006610 <CC_PalPowerSaveModeSelect>:
    6610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6612:	4d1a      	ldr	r5, [pc, #104]	; (667c <CC_PalPowerSaveModeSelect+0x6c>)
    6614:	4e1a      	ldr	r6, [pc, #104]	; (6680 <CC_PalPowerSaveModeSelect+0x70>)
    6616:	4604      	mov	r4, r0
    6618:	68b2      	ldr	r2, [r6, #8]
    661a:	6928      	ldr	r0, [r5, #16]
    661c:	4790      	blx	r2
    661e:	b9e8      	cbnz	r0, 665c <CC_PalPowerSaveModeSelect+0x4c>
    6620:	4f18      	ldr	r7, [pc, #96]	; (6684 <CC_PalPowerSaveModeSelect+0x74>)
    6622:	683b      	ldr	r3, [r7, #0]
    6624:	b14c      	cbz	r4, 663a <CC_PalPowerSaveModeSelect+0x2a>
    6626:	b1a3      	cbz	r3, 6652 <CC_PalPowerSaveModeSelect+0x42>
    6628:	2b01      	cmp	r3, #1
    662a:	d019      	beq.n	6660 <CC_PalPowerSaveModeSelect+0x50>
    662c:	3b01      	subs	r3, #1
    662e:	603b      	str	r3, [r7, #0]
    6630:	6928      	ldr	r0, [r5, #16]
    6632:	68f3      	ldr	r3, [r6, #12]
    6634:	4798      	blx	r3
    6636:	2000      	movs	r0, #0
    6638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    663a:	b943      	cbnz	r3, 664e <CC_PalPowerSaveModeSelect+0x3e>
    663c:	2101      	movs	r1, #1
    663e:	4a12      	ldr	r2, [pc, #72]	; (6688 <CC_PalPowerSaveModeSelect+0x78>)
    6640:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    6644:	4911      	ldr	r1, [pc, #68]	; (668c <CC_PalPowerSaveModeSelect+0x7c>)
    6646:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    664a:	2a00      	cmp	r2, #0
    664c:	d1fb      	bne.n	6646 <CC_PalPowerSaveModeSelect+0x36>
    664e:	3301      	adds	r3, #1
    6650:	603b      	str	r3, [r7, #0]
    6652:	68f3      	ldr	r3, [r6, #12]
    6654:	6928      	ldr	r0, [r5, #16]
    6656:	4798      	blx	r3
    6658:	2000      	movs	r0, #0
    665a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    665c:	480c      	ldr	r0, [pc, #48]	; (6690 <CC_PalPowerSaveModeSelect+0x80>)
    665e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6660:	4a0a      	ldr	r2, [pc, #40]	; (668c <CC_PalPowerSaveModeSelect+0x7c>)
    6662:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6666:	2b00      	cmp	r3, #0
    6668:	d1fb      	bne.n	6662 <CC_PalPowerSaveModeSelect+0x52>
    666a:	4a07      	ldr	r2, [pc, #28]	; (6688 <CC_PalPowerSaveModeSelect+0x78>)
    666c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6670:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6674:	f7ff ff48 	bl	6508 <CC_HalMaskInterrupt>
    6678:	683b      	ldr	r3, [r7, #0]
    667a:	e7d7      	b.n	662c <CC_PalPowerSaveModeSelect+0x1c>
    667c:	20000134 	.word	0x20000134
    6680:	20000124 	.word	0x20000124
    6684:	20000e70 	.word	0x20000e70
    6688:	50840000 	.word	0x50840000
    668c:	50841000 	.word	0x50841000
    6690:	ffff8fe9 	.word	0xffff8fe9

00006694 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6694:	4770      	bx	lr

00006696 <cbpprintf_external>:
{
    6696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    669a:	4606      	mov	r6, r0
    669c:	460d      	mov	r5, r1
    669e:	4617      	mov	r7, r2
	if (buf == NULL) {
    66a0:	4698      	mov	r8, r3
    66a2:	b32b      	cbz	r3, 66f0 <cbpprintf_external+0x5a>
	for (i = 0; i < s_nbr; i++) {
    66a4:	f04f 0a00 	mov.w	sl, #0
	args_size = hdr->hdr.desc.len * sizeof(int);
    66a8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    66ac:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    66b0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    66b2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    66b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    66b8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    66bc:	441c      	add	r4, r3
    66be:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    66c0:	45ca      	cmp	sl, r9
    66c2:	d309      	bcc.n	66d8 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    66c4:	4639      	mov	r1, r7
    66c6:	4630      	mov	r0, r6
    66c8:	46ac      	mov	ip, r5
    66ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
    66ce:	f108 0308 	add.w	r3, r8, #8
}
    66d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    66d6:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    66d8:	f814 3b01 	ldrb.w	r3, [r4], #1
	for (i = 0; i < s_nbr; i++) {
    66dc:	f10a 0a01 	add.w	sl, sl, #1
		s += strlen(s) + 1;
    66e0:	4620      	mov	r0, r4
		*ps = s;
    66e2:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    66e6:	f000 fc79 	bl	6fdc <strlen>
    66ea:	3001      	adds	r0, #1
    66ec:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    66ee:	e7e7      	b.n	66c0 <cbpprintf_external+0x2a>
}
    66f0:	f06f 0015 	mvn.w	r0, #21
    66f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000066f8 <is_ptr>:
{
    66f8:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    66fa:	2500      	movs	r5, #0
{
    66fc:	4602      	mov	r2, r0
	bool mod = false;
    66fe:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    6700:	4614      	mov	r4, r2
    6702:	f814 3b01 	ldrb.w	r3, [r4], #1
    6706:	b90b      	cbnz	r3, 670c <is_ptr+0x14>
					return false;
    6708:	4618      	mov	r0, r3
    670a:	e009      	b.n	6720 <is_ptr+0x28>
		if (mod) {
    670c:	b198      	cbz	r0, 6736 <is_ptr+0x3e>
			if (cnt == n) {
    670e:	428d      	cmp	r5, r1
    6710:	d107      	bne.n	6722 <is_ptr+0x2a>
				if (c == 'p') {
    6712:	2b70      	cmp	r3, #112	; 0x70
    6714:	d004      	beq.n	6720 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    6716:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    671a:	2a3a      	cmp	r2, #58	; 0x3a
    671c:	d80b      	bhi.n	6736 <is_ptr+0x3e>
					return false;
    671e:	2000      	movs	r0, #0
}
    6720:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    6722:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    6726:	2e3a      	cmp	r6, #58	; 0x3a
    6728:	d805      	bhi.n	6736 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    672a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    672c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    672e:	1c94      	adds	r4, r2, #2
    6730:	2b00      	cmp	r3, #0
    6732:	d0e9      	beq.n	6708 <is_ptr+0x10>
    6734:	2000      	movs	r0, #0
		if (c == '%') {
    6736:	2b25      	cmp	r3, #37	; 0x25
	while ((c = *fmt++) != '\0') {
    6738:	4622      	mov	r2, r4
			mod = !mod;
    673a:	bf08      	it	eq
    673c:	f080 0001 	eoreq.w	r0, r0, #1
    6740:	e7de      	b.n	6700 <is_ptr+0x8>

00006742 <arch_printk_char_out>:
}
    6742:	2000      	movs	r0, #0
    6744:	4770      	bx	lr

00006746 <str_out>:
{
    6746:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6748:	688a      	ldr	r2, [r1, #8]
    674a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    674c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    674e:	b114      	cbz	r4, 6756 <str_out+0x10>
    6750:	684b      	ldr	r3, [r1, #4]
    6752:	4293      	cmp	r3, r2
    6754:	dc01      	bgt.n	675a <str_out+0x14>
		ctx->count++;
    6756:	608d      	str	r5, [r1, #8]
}
    6758:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    675a:	3b01      	subs	r3, #1
    675c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    675e:	bf08      	it	eq
    6760:	2200      	moveq	r2, #0
    6762:	608d      	str	r5, [r1, #8]
    6764:	bf0c      	ite	eq
    6766:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    6768:	54a0      	strbne	r0, [r4, r2]
    676a:	e7f5      	b.n	6758 <str_out+0x12>

0000676c <printk>:
{
    676c:	b40f      	push	{r0, r1, r2, r3}
    676e:	b507      	push	{r0, r1, r2, lr}
    6770:	a904      	add	r1, sp, #16
    6772:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    6776:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    6778:	f7fa fd6a 	bl	1250 <vprintk>
}
    677c:	b003      	add	sp, #12
    677e:	f85d eb04 	ldr.w	lr, [sp], #4
    6782:	b004      	add	sp, #16
    6784:	4770      	bx	lr

00006786 <snprintk>:
{
    6786:	b40c      	push	{r2, r3}
    6788:	b507      	push	{r0, r1, r2, lr}
    678a:	ab04      	add	r3, sp, #16
    678c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    6790:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    6792:	f7fa fd6b 	bl	126c <vsnprintk>
}
    6796:	b003      	add	sp, #12
    6798:	f85d eb04 	ldr.w	lr, [sp], #4
    679c:	b002      	add	sp, #8
    679e:	4770      	bx	lr

000067a0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    67a0:	4604      	mov	r4, r0
    67a2:	b508      	push	{r3, lr}
    67a4:	4608      	mov	r0, r1
    67a6:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    67a8:	461a      	mov	r2, r3
    67aa:	47a0      	blx	r4
	return z_impl_z_current_get();
    67ac:	f7ff fb02 	bl	5db4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    67b0:	f7fc fe74 	bl	349c <z_impl_k_thread_abort>

000067b4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    67b4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    67b6:	f013 0307 	ands.w	r3, r3, #7
    67ba:	d105      	bne.n	67c8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    67bc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    67be:	2b00      	cmp	r3, #0
    67c0:	bf0c      	ite	eq
    67c2:	2000      	moveq	r0, #0
    67c4:	2003      	movne	r0, #3
    67c6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    67c8:	2b02      	cmp	r3, #2
    67ca:	d105      	bne.n	67d8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    67cc:	8b40      	ldrh	r0, [r0, #26]
    67ce:	fab0 f080 	clz	r0, r0
    67d2:	0940      	lsrs	r0, r0, #5
    67d4:	0080      	lsls	r0, r0, #2
    67d6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    67d8:	2b01      	cmp	r3, #1
    67da:	d105      	bne.n	67e8 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    67dc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    67de:	2b00      	cmp	r3, #0
    67e0:	bf0c      	ite	eq
    67e2:	2000      	moveq	r0, #0
    67e4:	2005      	movne	r0, #5
    67e6:	4770      	bx	lr
	int evt = EVT_NOP;
    67e8:	2000      	movs	r0, #0
}
    67ea:	4770      	bx	lr

000067ec <validate_args>:
{
    67ec:	b510      	push	{r4, lr}
    67ee:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    67f0:	b100      	cbz	r0, 67f4 <validate_args+0x8>
    67f2:	b911      	cbnz	r1, 67fa <validate_args+0xe>
		return -EINVAL;
    67f4:	f06f 0015 	mvn.w	r0, #21
}
    67f8:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    67fa:	1d08      	adds	r0, r1, #4
    67fc:	f000 f895 	bl	692a <sys_notify_validate>
	if ((rv == 0)
    6800:	2800      	cmp	r0, #0
    6802:	d1f9      	bne.n	67f8 <validate_args+0xc>
	    && ((cli->notify.flags
    6804:	68a3      	ldr	r3, [r4, #8]
    6806:	2b03      	cmp	r3, #3
    6808:	d9f6      	bls.n	67f8 <validate_args+0xc>
    680a:	e7f3      	b.n	67f4 <validate_args+0x8>

0000680c <notify_one>:
{
    680c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6810:	460d      	mov	r5, r1
    6812:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6814:	4619      	mov	r1, r3
    6816:	1d28      	adds	r0, r5, #4
{
    6818:	4690      	mov	r8, r2
    681a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    681c:	f000 f896 	bl	694c <sys_notify_finalize>
	if (cb) {
    6820:	4604      	mov	r4, r0
    6822:	b138      	cbz	r0, 6834 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6824:	4633      	mov	r3, r6
    6826:	4642      	mov	r2, r8
    6828:	4629      	mov	r1, r5
    682a:	4638      	mov	r0, r7
    682c:	46a4      	mov	ip, r4
}
    682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6832:	4760      	bx	ip
}
    6834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006838 <transition_complete>:
{
    6838:	b410      	push	{r4}
	__asm__ volatile(
    683a:	f04f 0420 	mov.w	r4, #32
    683e:	f3ef 8211 	mrs	r2, BASEPRI
    6842:	f384 8812 	msr	BASEPRI_MAX, r4
    6846:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    684a:	6141      	str	r1, [r0, #20]
}
    684c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    684e:	2101      	movs	r1, #1
    6850:	f7fa bd22 	b.w	1298 <process_event>

00006854 <onoff_manager_init>:
{
    6854:	b538      	push	{r3, r4, r5, lr}
    6856:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6858:	4605      	mov	r5, r0
    685a:	b158      	cbz	r0, 6874 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    685c:	b151      	cbz	r1, 6874 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    685e:	680b      	ldr	r3, [r1, #0]
    6860:	b143      	cbz	r3, 6874 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6862:	684b      	ldr	r3, [r1, #4]
    6864:	b133      	cbz	r3, 6874 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6866:	221c      	movs	r2, #28
    6868:	2100      	movs	r1, #0
    686a:	f000 fbd2 	bl	7012 <memset>
	return 0;
    686e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6870:	612c      	str	r4, [r5, #16]
}
    6872:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6874:	f06f 0015 	mvn.w	r0, #21
    6878:	e7fb      	b.n	6872 <onoff_manager_init+0x1e>

0000687a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    687a:	b570      	push	{r4, r5, r6, lr}
    687c:	4605      	mov	r5, r0
    687e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6880:	f7ff ffb4 	bl	67ec <validate_args>

	if (rv < 0) {
    6884:	1e04      	subs	r4, r0, #0
    6886:	db15      	blt.n	68b4 <onoff_request+0x3a>
    6888:	f04f 0320 	mov.w	r3, #32
    688c:	f3ef 8211 	mrs	r2, BASEPRI
    6890:	f383 8812 	msr	BASEPRI_MAX, r3
    6894:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6898:	f64f 71ff 	movw	r1, #65535	; 0xffff
    689c:	8b6b      	ldrh	r3, [r5, #26]
    689e:	8b2c      	ldrh	r4, [r5, #24]
    68a0:	428b      	cmp	r3, r1
    68a2:	f004 0407 	and.w	r4, r4, #7
    68a6:	d107      	bne.n	68b8 <onoff_request+0x3e>
	__asm__ volatile(
    68a8:	f382 8811 	msr	BASEPRI, r2
    68ac:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    68b0:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    68b4:	4620      	mov	r0, r4
    68b6:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    68b8:	2c02      	cmp	r4, #2
    68ba:	d10c      	bne.n	68d6 <onoff_request+0x5c>
		mgr->refs += 1U;
    68bc:	3301      	adds	r3, #1
    68be:	836b      	strh	r3, [r5, #26]
    68c0:	f382 8811 	msr	BASEPRI, r2
    68c4:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    68c8:	2300      	movs	r3, #0
    68ca:	4622      	mov	r2, r4
    68cc:	4631      	mov	r1, r6
    68ce:	4628      	mov	r0, r5
    68d0:	f7ff ff9c 	bl	680c <notify_one>
    68d4:	e7ee      	b.n	68b4 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    68d6:	2c06      	cmp	r4, #6
    68d8:	d814      	bhi.n	6904 <onoff_request+0x8a>
    68da:	e8df f004 	tbb	[pc, r4]
    68de:	1304      	.short	0x1304
    68e0:	1a041313 	.word	0x1a041313
    68e4:	04          	.byte	0x04
    68e5:	00          	.byte	0x00
	parent->next = child;
    68e6:	2300      	movs	r3, #0
    68e8:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    68ea:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    68ec:	b93b      	cbnz	r3, 68fe <onoff_request+0x84>
	list->head = node;
    68ee:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    68f2:	b9ac      	cbnz	r4, 6920 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    68f4:	2102      	movs	r1, #2
    68f6:	4628      	mov	r0, r5
    68f8:	f7fa fcce 	bl	1298 <process_event>
    68fc:	e7da      	b.n	68b4 <onoff_request+0x3a>
	parent->next = child;
    68fe:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6900:	606e      	str	r6, [r5, #4]
}
    6902:	e7f6      	b.n	68f2 <onoff_request+0x78>
    6904:	f382 8811 	msr	BASEPRI, r2
    6908:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    690c:	f06f 0404 	mvn.w	r4, #4
    6910:	e7d0      	b.n	68b4 <onoff_request+0x3a>
    6912:	f382 8811 	msr	BASEPRI, r2
    6916:	f3bf 8f6f 	isb	sy
    691a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    691e:	e7c9      	b.n	68b4 <onoff_request+0x3a>
    6920:	f382 8811 	msr	BASEPRI, r2
    6924:	f3bf 8f6f 	isb	sy
		if (notify) {
    6928:	e7c4      	b.n	68b4 <onoff_request+0x3a>

0000692a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    692a:	4603      	mov	r3, r0
    692c:	b158      	cbz	r0, 6946 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    692e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6930:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6934:	2a01      	cmp	r2, #1
    6936:	d003      	beq.n	6940 <sys_notify_validate+0x16>
    6938:	2a03      	cmp	r2, #3
    693a:	d104      	bne.n	6946 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    693c:	6802      	ldr	r2, [r0, #0]
    693e:	b112      	cbz	r2, 6946 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6940:	2000      	movs	r0, #0
    6942:	6098      	str	r0, [r3, #8]
    6944:	4770      	bx	lr
    6946:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    694a:	4770      	bx	lr

0000694c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    694c:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    694e:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    6950:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    6954:	2a03      	cmp	r2, #3
    6956:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    695a:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    695c:	bf14      	ite	ne
    695e:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6960:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6962:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6964:	4770      	bx	lr

00006966 <encode_uint>:
{
    6966:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    696a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    696c:	78d3      	ldrb	r3, [r2, #3]
{
    696e:	4680      	mov	r8, r0
	switch (specifier) {
    6970:	2b6f      	cmp	r3, #111	; 0x6f
{
    6972:	460f      	mov	r7, r1
    6974:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6976:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    697a:	d029      	beq.n	69d0 <encode_uint+0x6a>
    697c:	d824      	bhi.n	69c8 <encode_uint+0x62>
		return 10;
    697e:	2b58      	cmp	r3, #88	; 0x58
    6980:	bf0c      	ite	eq
    6982:	2610      	moveq	r6, #16
    6984:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6986:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    698a:	4632      	mov	r2, r6
    698c:	2300      	movs	r3, #0
    698e:	4640      	mov	r0, r8
    6990:	4639      	mov	r1, r7
    6992:	f7f9 ffcf 	bl	934 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6996:	2a09      	cmp	r2, #9
    6998:	b2d4      	uxtb	r4, r2
    699a:	d81e      	bhi.n	69da <encode_uint+0x74>
    699c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    699e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    69a0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    69a2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    69a6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    69aa:	d301      	bcc.n	69b0 <encode_uint+0x4a>
    69ac:	45d1      	cmp	r9, sl
    69ae:	d811      	bhi.n	69d4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    69b0:	782b      	ldrb	r3, [r5, #0]
    69b2:	069b      	lsls	r3, r3, #26
    69b4:	d505      	bpl.n	69c2 <encode_uint+0x5c>
		if (radix == 8) {
    69b6:	2e08      	cmp	r6, #8
    69b8:	d115      	bne.n	69e6 <encode_uint+0x80>
			conv->altform_0 = true;
    69ba:	78ab      	ldrb	r3, [r5, #2]
    69bc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    69c0:	70ab      	strb	r3, [r5, #2]
}
    69c2:	4648      	mov	r0, r9
    69c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    69c8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    69cc:	2b70      	cmp	r3, #112	; 0x70
    69ce:	e7d7      	b.n	6980 <encode_uint+0x1a>
	switch (specifier) {
    69d0:	2608      	movs	r6, #8
    69d2:	e7d8      	b.n	6986 <encode_uint+0x20>
		value /= radix;
    69d4:	4680      	mov	r8, r0
    69d6:	460f      	mov	r7, r1
    69d8:	e7d7      	b.n	698a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    69da:	f1bb 0f19 	cmp.w	fp, #25
    69de:	bf94      	ite	ls
    69e0:	3437      	addls	r4, #55	; 0x37
    69e2:	3457      	addhi	r4, #87	; 0x57
    69e4:	e7db      	b.n	699e <encode_uint+0x38>
		} else if (radix == 16) {
    69e6:	2e10      	cmp	r6, #16
    69e8:	d1eb      	bne.n	69c2 <encode_uint+0x5c>
			conv->altform_0c = true;
    69ea:	78ab      	ldrb	r3, [r5, #2]
    69ec:	f043 0310 	orr.w	r3, r3, #16
    69f0:	e7e6      	b.n	69c0 <encode_uint+0x5a>

000069f2 <outs>:
{
    69f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69f6:	4607      	mov	r7, r0
    69f8:	4688      	mov	r8, r1
    69fa:	4615      	mov	r5, r2
    69fc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    69fe:	4614      	mov	r4, r2
    6a00:	42b4      	cmp	r4, r6
    6a02:	d305      	bcc.n	6a10 <outs+0x1e>
    6a04:	b10e      	cbz	r6, 6a0a <outs+0x18>
	return (int)count;
    6a06:	1b60      	subs	r0, r4, r5
    6a08:	e008      	b.n	6a1c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6a0a:	7823      	ldrb	r3, [r4, #0]
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d0fa      	beq.n	6a06 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6a10:	4641      	mov	r1, r8
    6a12:	f814 0b01 	ldrb.w	r0, [r4], #1
    6a16:	47b8      	blx	r7
		if (rc < 0) {
    6a18:	2800      	cmp	r0, #0
    6a1a:	daf1      	bge.n	6a00 <outs+0xe>
}
    6a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006a20 <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    6a20:	68c3      	ldr	r3, [r0, #12]
    6a22:	6802      	ldr	r2, [r0, #0]
    6a24:	4293      	cmp	r3, r2
    6a26:	d904      	bls.n	6a32 <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    6a28:	3b01      	subs	r3, #1
    6a2a:	1a9a      	subs	r2, r3, r2

		return false;
    6a2c:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6a2e:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    6a30:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6a32:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
    6a34:	b913      	cbnz	r3, 6a3c <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6a36:	3801      	subs	r0, #1
    6a38:	1a82      	subs	r2, r0, r2
		return false;
    6a3a:	e7f7      	b.n	6a2c <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
    6a3c:	1a82      	subs	r2, r0, r2
	return true;
    6a3e:	2001      	movs	r0, #1
    6a40:	e7f5      	b.n	6a2e <free_space+0xe>

00006a42 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6a42:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    6a44:	a901      	add	r1, sp, #4
{
    6a46:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    6a48:	f7ff ffea 	bl	6a20 <free_space>
    6a4c:	b120      	cbz	r0, 6a58 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    6a4e:	9b01      	ldr	r3, [sp, #4]
    6a50:	68e2      	ldr	r2, [r4, #12]
    6a52:	3b01      	subs	r3, #1
    6a54:	4413      	add	r3, r2
    6a56:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    6a58:	6a20      	ldr	r0, [r4, #32]
    6a5a:	9b01      	ldr	r3, [sp, #4]
    6a5c:	1ac0      	subs	r0, r0, r3
}
    6a5e:	3801      	subs	r0, #1
    6a60:	b002      	add	sp, #8
    6a62:	bd10      	pop	{r4, pc}

00006a64 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    6a64:	b510      	push	{r4, lr}
    6a66:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    6a68:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6a6a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    6a6c:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6a6e:	07d2      	lsls	r2, r2, #31
    6a70:	d502      	bpl.n	6a78 <idx_inc+0x14>
		return i & (buffer->size - 1);
    6a72:	3b01      	subs	r3, #1
    6a74:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    6a76:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    6a78:	4298      	cmp	r0, r3
    6a7a:	bf28      	it	cs
    6a7c:	1ac0      	subcs	r0, r0, r3
    6a7e:	e7fa      	b.n	6a76 <idx_inc+0x12>

00006a80 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    6a80:	b538      	push	{r3, r4, r5, lr}
    6a82:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6a84:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    6a86:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6a88:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    6a8a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6a8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6a92:	6801      	ldr	r1, [r0, #0]
    6a94:	462a      	mov	r2, r5
{
    6a96:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6a98:	f7ff ffe4 	bl	6a64 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6a9c:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6a9e:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6aa0:	462a      	mov	r2, r5
    6aa2:	4620      	mov	r0, r4
    6aa4:	f7ff ffde 	bl	6a64 <idx_inc>
    6aa8:	6060      	str	r0, [r4, #4]
}
    6aaa:	bd38      	pop	{r3, r4, r5, pc}

00006aac <max_utilization_update>:
{
    6aac:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6aae:	6903      	ldr	r3, [r0, #16]
{
    6ab0:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6ab2:	075b      	lsls	r3, r3, #29
    6ab4:	d506      	bpl.n	6ac4 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6ab6:	6a45      	ldr	r5, [r0, #36]	; 0x24
    6ab8:	f7ff ffc3 	bl	6a42 <get_usage>
    6abc:	4285      	cmp	r5, r0
    6abe:	bf2c      	ite	cs
    6ac0:	6265      	strcs	r5, [r4, #36]	; 0x24
    6ac2:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    6ac4:	bd38      	pop	{r3, r4, r5, pc}

00006ac6 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    6ac6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6aca:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    6acc:	2300      	movs	r3, #0
    6ace:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6ad0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    6ad4:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    6ad8:	4604      	mov	r4, r0
	if (item->hdr.busy && !item->hdr.valid) {
    6ada:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
{
    6ade:	468b      	mov	fp, r1
	if (item->hdr.busy && !item->hdr.valid) {
    6ae0:	f003 0303 	and.w	r3, r3, #3
    6ae4:	2b02      	cmp	r3, #2
{
    6ae6:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6ae8:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6aec:	d103      	bne.n	6af6 <drop_item_locked+0x30>
		return item->skip.len;
    6aee:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    6af2:	08ad      	lsrs	r5, r5, #2
    6af4:	d12e      	bne.n	6b54 <drop_item_locked+0x8e>
    6af6:	4630      	mov	r0, r6
    6af8:	69a3      	ldr	r3, [r4, #24]
    6afa:	4798      	blx	r3
    6afc:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    6afe:	f1b8 0f00 	cmp.w	r8, #0
    6b02:	d038      	beq.n	6b76 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
    6b04:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    6b08:	079b      	lsls	r3, r3, #30
    6b0a:	d531      	bpl.n	6b70 <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    6b0c:	4620      	mov	r0, r4
    6b0e:	f10b 0101 	add.w	r1, fp, #1
    6b12:	f7ff ffb5 	bl	6a80 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6b16:	6861      	ldr	r1, [r4, #4]
    6b18:	462a      	mov	r2, r5
    6b1a:	4620      	mov	r0, r4
    6b1c:	f7ff ffa2 	bl	6a64 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6b20:	6821      	ldr	r1, [r4, #0]
    6b22:	462a      	mov	r2, r5
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6b24:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6b26:	4620      	mov	r0, r4
    6b28:	f7ff ff9c 	bl	6a64 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6b2c:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6b2e:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6b30:	68e1      	ldr	r1, [r4, #12]
    6b32:	4620      	mov	r0, r4
    6b34:	f7ff ff96 	bl	6a64 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6b38:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    6b3a:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6b3e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6b42:	f002 0203 	and.w	r2, r2, #3
    6b46:	2a02      	cmp	r2, #2
    6b48:	d10e      	bne.n	6b68 <drop_item_locked+0xa2>
		return item->skip.len;
    6b4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    6b4e:	089b      	lsrs	r3, r3, #2
    6b50:	d00a      	beq.n	6b68 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
    6b52:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6b54:	68e1      	ldr	r1, [r4, #12]
    6b56:	462a      	mov	r2, r5
    6b58:	4620      	mov	r0, r4
    6b5a:	f7ff ff83 	bl	6a64 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6b5e:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
    6b62:	4630      	mov	r0, r6
    6b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
    6b68:	4630      	mov	r0, r6
    6b6a:	69a3      	ldr	r3, [r4, #24]
    6b6c:	4798      	blx	r3
    6b6e:	4405      	add	r5, r0
			*user_packet = true;
    6b70:	2301      	movs	r3, #1
    6b72:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
    6b74:	e7ee      	b.n	6b54 <drop_item_locked+0x8e>
		item = NULL;
    6b76:	4646      	mov	r6, r8
	return item;
    6b78:	e7f3      	b.n	6b62 <drop_item_locked+0x9c>

00006b7a <mpsc_pbuf_init>:
{
    6b7a:	b538      	push	{r3, r4, r5, lr}
    6b7c:	460d      	mov	r5, r1
    6b7e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    6b80:	221c      	movs	r2, #28
    6b82:	2100      	movs	r1, #0
    6b84:	f000 fa45 	bl	7012 <memset>
	buffer->max_usage = 0;
    6b88:	2200      	movs	r2, #0
	buffer->get_wlen = cfg->get_wlen;
    6b8a:	68eb      	ldr	r3, [r5, #12]
    6b8c:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    6b8e:	68ab      	ldr	r3, [r5, #8]
    6b90:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    6b92:	682b      	ldr	r3, [r5, #0]
    6b94:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    6b96:	686b      	ldr	r3, [r5, #4]
	buffer->max_usage = 0;
    6b98:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    6b9a:	6223      	str	r3, [r4, #32]
	buffer->flags = cfg->flags;
    6b9c:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    6b9e:	b123      	cbz	r3, 6baa <mpsc_pbuf_init+0x30>
    6ba0:	1e59      	subs	r1, r3, #1
    6ba2:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    6ba4:	bf08      	it	eq
    6ba6:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    6baa:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6bac:	2201      	movs	r2, #1
    6bae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6bb2:	2100      	movs	r1, #0
}
    6bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6bb8:	f000 bda4 	b.w	7704 <z_impl_k_sem_init>

00006bbc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6bbc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    6bc0:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    6bc2:	6a03      	ldr	r3, [r0, #32]
{
    6bc4:	4604      	mov	r4, r0
	if (wlen > (buffer->size - 1)) {
    6bc6:	3b01      	subs	r3, #1
    6bc8:	428b      	cmp	r3, r1
{
    6bca:	460e      	mov	r6, r1
    6bcc:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
    6bce:	d351      	bcc.n	6c74 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
    6bd0:	2500      	movs	r5, #0
	__asm__ volatile(
    6bd2:	f04f 0320 	mov.w	r3, #32
    6bd6:	f3ef 8911 	mrs	r9, BASEPRI
    6bda:	f383 8812 	msr	BASEPRI_MAX, r3
    6bde:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
    6be2:	4620      	mov	r0, r4
    6be4:	a901      	add	r1, sp, #4
    6be6:	f7ff ff1b 	bl	6a20 <free_space>

		if (free_wlen >= wlen) {
    6bea:	f8dd a004 	ldr.w	sl, [sp, #4]
    6bee:	45b2      	cmp	sl, r6
    6bf0:	d317      	bcc.n	6c22 <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    6bf2:	6822      	ldr	r2, [r4, #0]
			item =
    6bf4:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    6bf6:	4620      	mov	r0, r4
			item->hdr.valid = 0;
    6bf8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
			item =
    6bfc:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.valid = 0;
    6c00:	f021 0103 	bic.w	r1, r1, #3
    6c04:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    6c08:	6821      	ldr	r1, [r4, #0]
    6c0a:	4632      	mov	r2, r6
    6c0c:	f7ff ff2a 	bl	6a64 <idx_inc>
    6c10:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    6c12:	f389 8811 	msr	BASEPRI, r9
    6c16:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    6c1a:	4628      	mov	r0, r5
    6c1c:	b002      	add	sp, #8
    6c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
    6c22:	b150      	cbz	r0, 6c3a <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
    6c24:	4651      	mov	r1, sl
    6c26:	4620      	mov	r0, r4
    6c28:	f7ff ff2a 	bl	6a80 <add_skip_item>
    6c2c:	f389 8811 	msr	BASEPRI, r9
    6c30:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    6c34:	2d00      	cmp	r5, #0
    6c36:	d0cb      	beq.n	6bd0 <mpsc_pbuf_alloc+0x14>
    6c38:	e033      	b.n	6ca2 <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6c3a:	ea57 0308 	orrs.w	r3, r7, r8
    6c3e:	d020      	beq.n	6c82 <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
    6c40:	f000 fd3f 	bl	76c2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6c44:	b9e8      	cbnz	r0, 6c82 <mpsc_pbuf_alloc+0xc6>
    6c46:	f389 8811 	msr	BASEPRI, r9
    6c4a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    6c4e:	463a      	mov	r2, r7
    6c50:	4643      	mov	r3, r8
    6c52:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6c56:	f7fe fda3 	bl	57a0 <z_impl_k_sem_take>
	__asm__ volatile(
    6c5a:	f04f 0220 	mov.w	r2, #32
    6c5e:	f3ef 8311 	mrs	r3, BASEPRI
    6c62:	f382 8812 	msr	BASEPRI_MAX, r2
    6c66:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    6c6a:	b128      	cbz	r0, 6c78 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
    6c6c:	f383 8811 	msr	BASEPRI, r3
    6c70:	f3bf 8f6f 	isb	sy
		return NULL;
    6c74:	2500      	movs	r5, #0
    6c76:	e7d0      	b.n	6c1a <mpsc_pbuf_alloc+0x5e>
    6c78:	f383 8811 	msr	BASEPRI, r3
    6c7c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    6c80:	e7d8      	b.n	6c34 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    6c82:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    6c84:	4651      	mov	r1, sl
    6c86:	4620      	mov	r0, r4
    6c88:	f10d 0303 	add.w	r3, sp, #3
    6c8c:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6c90:	f7ff ff19 	bl	6ac6 <drop_item_locked>
    6c94:	4605      	mov	r5, r0
    6c96:	f389 8811 	msr	BASEPRI, r9
    6c9a:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
    6c9e:	2800      	cmp	r0, #0
    6ca0:	d0e8      	beq.n	6c74 <mpsc_pbuf_alloc+0xb8>
    6ca2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d093      	beq.n	6bd2 <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
    6caa:	6963      	ldr	r3, [r4, #20]
    6cac:	2b00      	cmp	r3, #0
    6cae:	d08f      	beq.n	6bd0 <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
    6cb0:	4629      	mov	r1, r5
    6cb2:	4620      	mov	r0, r4
    6cb4:	4798      	blx	r3
    6cb6:	e78b      	b.n	6bd0 <mpsc_pbuf_alloc+0x14>

00006cb8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6cb8:	b570      	push	{r4, r5, r6, lr}
    6cba:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6cbc:	6983      	ldr	r3, [r0, #24]
    6cbe:	4608      	mov	r0, r1
{
    6cc0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6cc2:	4798      	blx	r3
    6cc4:	4602      	mov	r2, r0
	__asm__ volatile(
    6cc6:	f04f 0320 	mov.w	r3, #32
    6cca:	f3ef 8611 	mrs	r6, BASEPRI
    6cce:	f383 8812 	msr	BASEPRI_MAX, r3
    6cd2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    6cd6:	782b      	ldrb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6cd8:	4620      	mov	r0, r4
	item->hdr.valid = 1;
    6cda:	f043 0301 	orr.w	r3, r3, #1
    6cde:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6ce0:	6861      	ldr	r1, [r4, #4]
    6ce2:	f7ff febf 	bl	6a64 <idx_inc>
    6ce6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6ce8:	4620      	mov	r0, r4
    6cea:	f7ff fedf 	bl	6aac <max_utilization_update>
	__asm__ volatile(
    6cee:	f386 8811 	msr	BASEPRI, r6
    6cf2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    6cf6:	bd70      	pop	{r4, r5, r6, pc}

00006cf8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6cfa:	4604      	mov	r4, r0
	__asm__ volatile(
    6cfc:	f04f 0320 	mov.w	r3, #32
    6d00:	f3ef 8611 	mrs	r6, BASEPRI
    6d04:	f383 8812 	msr	BASEPRI_MAX, r3
    6d08:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6d0c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    6d10:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    6d12:	bf88      	it	hi
    6d14:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    6d16:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
    6d18:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    6d1a:	b132      	cbz	r2, 6d2a <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
    6d1c:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		item = (union mpsc_pbuf_generic *)
    6d20:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    6d24:	f012 0003 	ands.w	r0, r2, #3
    6d28:	d105      	bne.n	6d36 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
    6d2a:	f386 8811 	msr	BASEPRI, r6
    6d2e:	f3bf 8f6f 	isb	sy
			item = NULL;
    6d32:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    6d34:	e02e      	b.n	6d94 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
    6d36:	2802      	cmp	r0, #2
    6d38:	d103      	bne.n	6d42 <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
    6d3a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    6d3e:	08ad      	lsrs	r5, r5, #2
    6d40:	d105      	bne.n	6d4e <mpsc_pbuf_claim+0x56>
    6d42:	07d0      	lsls	r0, r2, #31
    6d44:	d414      	bmi.n	6d70 <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
    6d46:	4638      	mov	r0, r7
    6d48:	69a3      	ldr	r3, [r4, #24]
    6d4a:	4798      	blx	r3
    6d4c:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    6d4e:	68a1      	ldr	r1, [r4, #8]
    6d50:	462a      	mov	r2, r5
    6d52:	4620      	mov	r0, r4
    6d54:	f7ff fe86 	bl	6a64 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6d58:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    6d5a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    6d5c:	462a      	mov	r2, r5
    6d5e:	4620      	mov	r0, r4
    6d60:	f7ff fe80 	bl	6a64 <idx_inc>
				buffer->rd_idx =
    6d64:	60e0      	str	r0, [r4, #12]
    6d66:	f386 8811 	msr	BASEPRI, r6
    6d6a:	f3bf 8f6f 	isb	sy
	} while (cont);
    6d6e:	e7c5      	b.n	6cfc <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    6d70:	f042 0202 	orr.w	r2, r2, #2
    6d74:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6d78:	69a3      	ldr	r3, [r4, #24]
    6d7a:	4638      	mov	r0, r7
    6d7c:	68a5      	ldr	r5, [r4, #8]
    6d7e:	4798      	blx	r3
    6d80:	4629      	mov	r1, r5
    6d82:	4602      	mov	r2, r0
    6d84:	4620      	mov	r0, r4
    6d86:	f7ff fe6d 	bl	6a64 <idx_inc>
				buffer->tmp_rd_idx =
    6d8a:	60a0      	str	r0, [r4, #8]
    6d8c:	f386 8811 	msr	BASEPRI, r6
    6d90:	f3bf 8f6f 	isb	sy
}
    6d94:	4638      	mov	r0, r7
    6d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006d98 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6d98:	b570      	push	{r4, r5, r6, lr}
    6d9a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6d9c:	6983      	ldr	r3, [r0, #24]
    6d9e:	4608      	mov	r0, r1
{
    6da0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6da2:	4798      	blx	r3
    6da4:	4602      	mov	r2, r0
	__asm__ volatile(
    6da6:	f04f 0320 	mov.w	r3, #32
    6daa:	f3ef 8611 	mrs	r6, BASEPRI
    6dae:	f383 8812 	msr	BASEPRI_MAX, r3
    6db2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6db6:	782b      	ldrb	r3, [r5, #0]
    6db8:	f36f 0300 	bfc	r3, #0, #1
    6dbc:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6dbe:	6923      	ldr	r3, [r4, #16]
    6dc0:	079b      	lsls	r3, r3, #30
    6dc2:	d505      	bpl.n	6dd0 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6dc4:	68e1      	ldr	r1, [r4, #12]
    6dc6:	69e3      	ldr	r3, [r4, #28]
    6dc8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6dcc:	429d      	cmp	r5, r3
    6dce:	d112      	bne.n	6df6 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    6dd0:	782b      	ldrb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6dd2:	4620      	mov	r0, r4
		witem->hdr.busy = 0;
    6dd4:	f36f 0341 	bfc	r3, #1, #1
    6dd8:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6dda:	68e1      	ldr	r1, [r4, #12]
    6ddc:	f7ff fe42 	bl	6a64 <idx_inc>
    6de0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6de2:	f386 8811 	msr	BASEPRI, r6
    6de6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6dea:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    6dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6df2:	f7fe bcb5 	b.w	5760 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    6df6:	682b      	ldr	r3, [r5, #0]
    6df8:	f360 039f 	bfi	r3, r0, #2, #30
    6dfc:	602b      	str	r3, [r5, #0]
    6dfe:	e7f0      	b.n	6de2 <mpsc_pbuf_free+0x4a>

00006e00 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6e00:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    6e04:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    6e06:	bf88      	it	hi
    6e08:	6a02      	ldrhi	r2, [r0, #32]
    6e0a:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    6e0c:	1e18      	subs	r0, r3, #0
    6e0e:	bf18      	it	ne
    6e10:	2001      	movne	r0, #1
    6e12:	4770      	bx	lr

00006e14 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6e14:	4770      	bx	lr

00006e16 <pm_state_exit_post_ops>:
    6e16:	2300      	movs	r3, #0
    6e18:	f383 8811 	msr	BASEPRI, r3
    6e1c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6e20:	4770      	bx	lr

00006e22 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    6e22:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    6e24:	075b      	lsls	r3, r3, #29
    6e26:	d40b      	bmi.n	6e40 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    6e28:	6803      	ldr	r3, [r0, #0]
    6e2a:	8842      	ldrh	r2, [r0, #2]
    6e2c:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6e30:	f3c2 02cb 	ubfx	r2, r2, #3, #12
    6e34:	1898      	adds	r0, r3, r2
    6e36:	3017      	adds	r0, #23
    6e38:	f020 0007 	bic.w	r0, r0, #7
    6e3c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    6e3e:	4770      	bx	lr
	return 0;
    6e40:	2000      	movs	r0, #0
}
    6e42:	4770      	bx	lr

00006e44 <dummy_timestamp>:
}
    6e44:	2000      	movs	r0, #0
    6e46:	4770      	bx	lr

00006e48 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6e48:	f000 ba56 	b.w	72f8 <sys_clock_cycle_get_32>

00006e4c <atomic_inc>:
{
    6e4c:	4603      	mov	r3, r0
}
    6e4e:	e8d3 0fef 	ldaex	r0, [r3]
    6e52:	1c42      	adds	r2, r0, #1
    6e54:	e8c3 2fe1 	stlex	r1, r2, [r3]
    6e58:	2900      	cmp	r1, #0
    6e5a:	d1f8      	bne.n	6e4e <atomic_inc+0x2>
    6e5c:	4770      	bx	lr

00006e5e <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    6e5e:	2001      	movs	r0, #1
    6e60:	f7fa bfee 	b.w	1e40 <z_log_dropped>

00006e64 <z_log_get_tag>:
}
    6e64:	2000      	movs	r0, #0
    6e66:	4770      	bx	lr

00006e68 <z_cbprintf_cpy>:
{
    6e68:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    6e6a:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    6e6e:	1b9b      	subs	r3, r3, r6
    6e70:	428b      	cmp	r3, r1
{
    6e72:	460c      	mov	r4, r1
    6e74:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    6e76:	d30a      	bcc.n	6e8e <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    6e78:	6813      	ldr	r3, [r2, #0]
    6e7a:	460a      	mov	r2, r1
    6e7c:	4601      	mov	r1, r0
    6e7e:	1998      	adds	r0, r3, r6
    6e80:	f000 f8bc 	bl	6ffc <memcpy>
	return len;
    6e84:	4620      	mov	r0, r4
	desc->off += len;
    6e86:	68ab      	ldr	r3, [r5, #8]
    6e88:	4423      	add	r3, r4
    6e8a:	60ab      	str	r3, [r5, #8]
}
    6e8c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    6e8e:	f06f 001b 	mvn.w	r0, #27
    6e92:	e7fb      	b.n	6e8c <z_cbprintf_cpy+0x24>

00006e94 <z_log_msg_finalize>:
{
    6e94:	b570      	push	{r4, r5, r6, lr}
    6e96:	460e      	mov	r6, r1
    6e98:	4615      	mov	r5, r2
    6e9a:	4619      	mov	r1, r3
	if (!msg) {
    6e9c:	4604      	mov	r4, r0
    6e9e:	b918      	cbnz	r0, 6ea8 <z_log_msg_finalize+0x14>
}
    6ea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    6ea4:	f7fa bfcc 	b.w	1e40 <z_log_dropped>
	if (data) {
    6ea8:	b13b      	cbz	r3, 6eba <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    6eaa:	f3c2 2349 	ubfx	r3, r2, #9, #10
    6eae:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    6eb0:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    6eb4:	4418      	add	r0, r3
    6eb6:	f000 f8a1 	bl	6ffc <memcpy>
	msg->hdr.source = source;
    6eba:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    6ebe:	4620      	mov	r0, r4
}
    6ec0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    6ec4:	f7fb b93c 	b.w	2140 <z_log_msg_commit>

00006ec8 <buffer_write>:
{
    6ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eca:	4606      	mov	r6, r0
    6ecc:	460d      	mov	r5, r1
    6ece:	4614      	mov	r4, r2
    6ed0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    6ed2:	4621      	mov	r1, r4
    6ed4:	4628      	mov	r0, r5
    6ed6:	463a      	mov	r2, r7
    6ed8:	47b0      	blx	r6
	} while (len != 0);
    6eda:	1a24      	subs	r4, r4, r0
		buf += processed;
    6edc:	4405      	add	r5, r0
	} while (len != 0);
    6ede:	d1f8      	bne.n	6ed2 <buffer_write+0xa>
}
    6ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006ee2 <cbvprintf>:
{
    6ee2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    6ee4:	2400      	movs	r4, #0
    6ee6:	9400      	str	r4, [sp, #0]
    6ee8:	f7fa fae4 	bl	14b4 <z_cbvprintf_impl>
}
    6eec:	b002      	add	sp, #8
    6eee:	bd10      	pop	{r4, pc}

00006ef0 <log_output_flush>:
{
    6ef0:	b510      	push	{r4, lr}
		     output->control_block->offset,
    6ef2:	6842      	ldr	r2, [r0, #4]
{
    6ef4:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6ef6:	e9d2 2300 	ldrd	r2, r3, [r2]
    6efa:	6881      	ldr	r1, [r0, #8]
    6efc:	6800      	ldr	r0, [r0, #0]
    6efe:	f7ff ffe3 	bl	6ec8 <buffer_write>
	output->control_block->offset = 0;
    6f02:	2200      	movs	r2, #0
    6f04:	6863      	ldr	r3, [r4, #4]
    6f06:	601a      	str	r2, [r3, #0]
}
    6f08:	bd10      	pop	{r4, pc}

00006f0a <out_func>:
{
    6f0a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    6f0c:	684b      	ldr	r3, [r1, #4]
{
    6f0e:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
    6f10:	681a      	ldr	r2, [r3, #0]
    6f12:	68cb      	ldr	r3, [r1, #12]
{
    6f14:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6f16:	429a      	cmp	r2, r3
    6f18:	d102      	bne.n	6f20 <out_func+0x16>
		log_output_flush(out_ctx);
    6f1a:	4608      	mov	r0, r1
    6f1c:	f7ff ffe8 	bl	6ef0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6f20:	6863      	ldr	r3, [r4, #4]
    6f22:	e8d3 2fef 	ldaex	r2, [r3]
    6f26:	1c51      	adds	r1, r2, #1
    6f28:	e8c3 1fe0 	stlex	r0, r1, [r3]
    6f2c:	2800      	cmp	r0, #0
    6f2e:	d1f8      	bne.n	6f22 <out_func+0x18>
	out_ctx->buf[idx] = (uint8_t)c;
    6f30:	68a3      	ldr	r3, [r4, #8]
}
    6f32:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (uint8_t)c;
    6f34:	549d      	strb	r5, [r3, r2]
}
    6f36:	bd38      	pop	{r3, r4, r5, pc}

00006f38 <cr_out_func>:
	if (c == '\n') {
    6f38:	280a      	cmp	r0, #10
{
    6f3a:	b538      	push	{r3, r4, r5, lr}
    6f3c:	4604      	mov	r4, r0
    6f3e:	460d      	mov	r5, r1
	if (c == '\n') {
    6f40:	d102      	bne.n	6f48 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    6f42:	200d      	movs	r0, #13
    6f44:	f7ff ffe1 	bl	6f0a <out_func>
	out_func(c, ctx);
    6f48:	4629      	mov	r1, r5
    6f4a:	4620      	mov	r0, r4
    6f4c:	f7ff ffdd 	bl	6f0a <out_func>
}
    6f50:	2000      	movs	r0, #0
    6f52:	bd38      	pop	{r3, r4, r5, pc}

00006f54 <log_backend_uart_init>:
}
    6f54:	4770      	bx	lr

00006f56 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    6f56:	2000      	movs	r0, #0
{
    6f58:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    6f5a:	f7fa fe5d 	bl	1c18 <sys_reboot>

00006f5e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6f5e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6f60:	6800      	ldr	r0, [r0, #0]
    6f62:	f7fb bdc9 	b.w	2af8 <z_arm_fatal_error>

00006f66 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6f66:	2100      	movs	r1, #0
    6f68:	2001      	movs	r0, #1
    6f6a:	f7fb bdc5 	b.w	2af8 <z_arm_fatal_error>

00006f6e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6f6e:	b508      	push	{r3, lr}
	handler();
    6f70:	f7fb fe5a 	bl	2c28 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6f78:	f7fb bf1c 	b.w	2db4 <z_arm_exc_exit>

00006f7c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    6f7c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    6f7e:	f383 880b 	msr	PSPLIM, r3
}
    6f82:	4770      	bx	lr

00006f84 <z_log_msg_static_create.constprop.0>:
    6f84:	2300      	movs	r3, #0
    6f86:	f7fb b90f 	b.w	21a8 <z_impl_z_log_msg_static_create>

00006f8a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    6f8a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    6f8e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6f92:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    6f94:	bf08      	it	eq
    6f96:	f06f 0015 	mvneq.w	r0, #21
    6f9a:	4770      	bx	lr

00006f9c <mpu_configure_region>:
{
    6f9c:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
    6f9e:	890a      	ldrh	r2, [r1, #8]
    6fa0:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    6fa2:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    6fa4:	684c      	ldr	r4, [r1, #4]
    6fa6:	f002 021f 	and.w	r2, r2, #31
{
    6faa:	b085      	sub	sp, #20
    6fac:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
    6fb0:	9300      	str	r3, [sp, #0]
    6fb2:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    6fb6:	f023 031f 	bic.w	r3, r3, #31
    6fba:	1e62      	subs	r2, r4, #1
    6fbc:	4413      	add	r3, r2
    6fbe:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    6fc2:	280f      	cmp	r0, #15
    6fc4:	9303      	str	r3, [sp, #12]
    6fc6:	d904      	bls.n	6fd2 <mpu_configure_region+0x36>
}
    6fc8:	b005      	add	sp, #20
    6fca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6fce:	f7fc bab1 	b.w	3534 <region_allocate_and_init.part.0>
	region_init(index, region_conf);
    6fd2:	4669      	mov	r1, sp
    6fd4:	f7fc fa94 	bl	3500 <region_init>
}
    6fd8:	b005      	add	sp, #20
    6fda:	bd30      	pop	{r4, r5, pc}

00006fdc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6fdc:	4603      	mov	r3, r0
	size_t n = 0;
    6fde:	2000      	movs	r0, #0

	while (*s != '\0') {
    6fe0:	5c1a      	ldrb	r2, [r3, r0]
    6fe2:	b902      	cbnz	r2, 6fe6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6fe4:	4770      	bx	lr
		n++;
    6fe6:	3001      	adds	r0, #1
    6fe8:	e7fa      	b.n	6fe0 <strlen+0x4>

00006fea <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6fea:	4603      	mov	r3, r0
	size_t n = 0;
    6fec:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6fee:	5c1a      	ldrb	r2, [r3, r0]
    6ff0:	b10a      	cbz	r2, 6ff6 <strnlen+0xc>
    6ff2:	4288      	cmp	r0, r1
    6ff4:	d100      	bne.n	6ff8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6ff6:	4770      	bx	lr
		n++;
    6ff8:	3001      	adds	r0, #1
    6ffa:	e7f8      	b.n	6fee <strnlen+0x4>

00006ffc <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6ffc:	b510      	push	{r4, lr}
    6ffe:	1e43      	subs	r3, r0, #1
    7000:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7002:	4291      	cmp	r1, r2
    7004:	d100      	bne.n	7008 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7006:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7008:	f811 4b01 	ldrb.w	r4, [r1], #1
    700c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7010:	e7f7      	b.n	7002 <memcpy+0x6>

00007012 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    7012:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    7014:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7016:	4402      	add	r2, r0
    7018:	4293      	cmp	r3, r2
    701a:	d100      	bne.n	701e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    701c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    701e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7022:	e7f9      	b.n	7018 <memset+0x6>

00007024 <_stdout_hook_default>:
}
    7024:	f04f 30ff 	mov.w	r0, #4294967295
    7028:	4770      	bx	lr

0000702a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    702a:	220c      	movs	r2, #12
    702c:	6903      	ldr	r3, [r0, #16]
    702e:	b2c9      	uxtb	r1, r1
    7030:	fb01 3302 	mla	r3, r1, r2, r3
    7034:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    7036:	f000 0007 	and.w	r0, r0, #7
    703a:	4770      	bx	lr

0000703c <set_on_state>:
	__asm__ volatile(
    703c:	f04f 0320 	mov.w	r3, #32
    7040:	f3ef 8211 	mrs	r2, BASEPRI
    7044:	f383 8812 	msr	BASEPRI_MAX, r3
    7048:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    704c:	6803      	ldr	r3, [r0, #0]
    704e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7052:	f043 0302 	orr.w	r3, r3, #2
    7056:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7058:	f382 8811 	msr	BASEPRI, r2
    705c:	f3bf 8f6f 	isb	sy
}
    7060:	4770      	bx	lr

00007062 <stop>:
{
    7062:	b570      	push	{r4, r5, r6, lr}
    7064:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    7066:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    7068:	f04f 0420 	mov.w	r4, #32
    706c:	f3ef 8511 	mrs	r5, BASEPRI
    7070:	f384 8812 	msr	BASEPRI_MAX, r4
    7074:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7078:	260c      	movs	r6, #12
    707a:	fb06 3401 	mla	r4, r6, r1, r3
    707e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7080:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    7084:	d008      	beq.n	7098 <stop+0x36>
    7086:	42a2      	cmp	r2, r4
    7088:	d006      	beq.n	7098 <stop+0x36>
	__asm__ volatile(
    708a:	f385 8811 	msr	BASEPRI, r5
    708e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    7092:	f04f 30ff 	mov.w	r0, #4294967295
}
    7096:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7098:	2201      	movs	r2, #1
    709a:	4371      	muls	r1, r6
    709c:	440b      	add	r3, r1
    709e:	641a      	str	r2, [r3, #64]	; 0x40
    70a0:	f385 8811 	msr	BASEPRI, r5
    70a4:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    70a8:	6843      	ldr	r3, [r0, #4]
    70aa:	440b      	add	r3, r1
    70ac:	685b      	ldr	r3, [r3, #4]
    70ae:	4798      	blx	r3
	return 0;
    70b0:	2000      	movs	r0, #0
    70b2:	e7f0      	b.n	7096 <stop+0x34>

000070b4 <api_stop>:
	return stop(dev, subsys, CTX_API);
    70b4:	2280      	movs	r2, #128	; 0x80
    70b6:	f7ff bfd4 	b.w	7062 <stop>

000070ba <async_start>:
{
    70ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70bc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    70be:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    70c0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    70c2:	f04f 0520 	mov.w	r5, #32
    70c6:	f3ef 8611 	mrs	r6, BASEPRI
    70ca:	f385 8812 	msr	BASEPRI_MAX, r5
    70ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    70d2:	250c      	movs	r5, #12
    70d4:	4369      	muls	r1, r5
    70d6:	440c      	add	r4, r1
    70d8:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    70da:	f005 0c07 	and.w	ip, r5, #7
    70de:	f1bc 0f01 	cmp.w	ip, #1
    70e2:	d10b      	bne.n	70fc <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    70e4:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    70e6:	f386 8811 	msr	BASEPRI, r6
    70ea:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    70ee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    70f2:	6843      	ldr	r3, [r0, #4]
    70f4:	585b      	ldr	r3, [r3, r1]
    70f6:	4798      	blx	r3
	return 0;
    70f8:	2000      	movs	r0, #0
}
    70fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    70fc:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    7100:	42af      	cmp	r7, r5
    7102:	f386 8811 	msr	BASEPRI, r6
    7106:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    710a:	bf0c      	ite	eq
    710c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    7110:	f04f 30ff 	movne.w	r0, #4294967295
    7114:	e7f1      	b.n	70fa <async_start+0x40>

00007116 <api_start>:
{
    7116:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7118:	2480      	movs	r4, #128	; 0x80
    711a:	9400      	str	r4, [sp, #0]
    711c:	f7ff ffcd 	bl	70ba <async_start>
}
    7120:	b002      	add	sp, #8
    7122:	bd10      	pop	{r4, pc}

00007124 <onoff_started_callback>:
{
    7124:	b410      	push	{r4}
	notify(mgr, 0);
    7126:	241c      	movs	r4, #28
	return &data->mgr[type];
    7128:	6900      	ldr	r0, [r0, #16]
    712a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    712c:	fb03 0004 	mla	r0, r3, r4, r0
    7130:	2100      	movs	r1, #0
}
    7132:	bc10      	pop	{r4}
	notify(mgr, 0);
    7134:	4710      	bx	r2

00007136 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7136:	2000      	movs	r0, #0
    7138:	f000 ba24 	b.w	7584 <nrfx_clock_start>

0000713c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    713c:	2000      	movs	r0, #0
    713e:	f000 ba61 	b.w	7604 <nrfx_clock_stop>

00007142 <blocking_start_callback>:
{
    7142:	4610      	mov	r0, r2
    7144:	f7fe bb0c 	b.w	5760 <z_impl_k_sem_give>

00007148 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7148:	6843      	ldr	r3, [r0, #4]
}
    714a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    714c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    714e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    7150:	600b      	str	r3, [r1, #0]
}
    7152:	4770      	bx	lr

00007154 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7154:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    7156:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    715a:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    715c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7160:	6098      	str	r0, [r3, #8]
}
    7162:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7164:	60d9      	str	r1, [r3, #12]
    7166:	4770      	bx	lr

00007168 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7168:	6843      	ldr	r3, [r0, #4]
}
    716a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    716c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    716e:	6099      	str	r1, [r3, #8]
}
    7170:	4770      	bx	lr

00007172 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7172:	6843      	ldr	r3, [r0, #4]
}
    7174:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7176:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    7178:	60d9      	str	r1, [r3, #12]
}
    717a:	4770      	bx	lr

0000717c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    717c:	6843      	ldr	r3, [r0, #4]
    717e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7180:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    7182:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    7186:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    7188:	6090      	str	r0, [r2, #8]
}
    718a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    718c:	60d3      	str	r3, [r2, #12]
    718e:	4770      	bx	lr

00007190 <gpio_nrfx_manage_callback>:
{
    7190:	b510      	push	{r4, lr}
	return port->data;
    7192:	6903      	ldr	r3, [r0, #16]
	return list->head;
    7194:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    7196:	b1f8      	cbz	r0, 71d8 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7198:	4288      	cmp	r0, r1
    719a:	d119      	bne.n	71d0 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    719c:	689c      	ldr	r4, [r3, #8]
	return node->next;
    719e:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    71a0:	42a1      	cmp	r1, r4
	list->head = node;
    71a2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    71a4:	d100      	bne.n	71a8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    71a6:	6098      	str	r0, [r3, #8]
	parent->next = child;
    71a8:	2000      	movs	r0, #0
    71aa:	6008      	str	r0, [r1, #0]
	if (set) {
    71ac:	b12a      	cbz	r2, 71ba <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    71ae:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    71b0:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    71b2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    71b4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    71b6:	b902      	cbnz	r2, 71ba <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    71b8:	6099      	str	r1, [r3, #8]
	return 0;
    71ba:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    71bc:	e010      	b.n	71e0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    71be:	4281      	cmp	r1, r0
    71c0:	d106      	bne.n	71d0 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    71c2:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    71c4:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    71c6:	6898      	ldr	r0, [r3, #8]
    71c8:	4281      	cmp	r1, r0
    71ca:	d1ed      	bne.n	71a8 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    71cc:	609c      	str	r4, [r3, #8]
}
    71ce:	e7eb      	b.n	71a8 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    71d0:	4604      	mov	r4, r0
    71d2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    71d4:	2800      	cmp	r0, #0
    71d6:	d1f2      	bne.n	71be <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    71d8:	2a00      	cmp	r2, #0
    71da:	d1e8      	bne.n	71ae <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    71dc:	f06f 0015 	mvn.w	r0, #21
}
    71e0:	bd10      	pop	{r4, pc}

000071e2 <uarte_nrfx_config_get>:
{
    71e2:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    71e4:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    71e6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    71ea:	e883 0003 	stmia.w	r3, {r0, r1}
}
    71ee:	2000      	movs	r0, #0
    71f0:	4770      	bx	lr

000071f2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    71f2:	6843      	ldr	r3, [r0, #4]
    71f4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    71f6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    71fa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    71fe:	4770      	bx	lr

00007200 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    7200:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    7202:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    7204:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7206:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    720a:	b150      	cbz	r0, 7222 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    720c:	2000      	movs	r0, #0
	*c = *data->rx_data;
    720e:	6952      	ldr	r2, [r2, #20]
    7210:	7812      	ldrb	r2, [r2, #0]
    7212:	700a      	strb	r2, [r1, #0]
    7214:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    7218:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    721c:	2201      	movs	r2, #1
    721e:	601a      	str	r2, [r3, #0]
	return 0;
    7220:	4770      	bx	lr
		return -1;
    7222:	f04f 30ff 	mov.w	r0, #4294967295
}
    7226:	4770      	bx	lr

00007228 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    7228:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    722a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    722c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7230:	b940      	cbnz	r0, 7244 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    7232:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    7234:	079b      	lsls	r3, r3, #30
    7236:	d406      	bmi.n	7246 <is_tx_ready.isra.0+0x1e>
    7238:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    723c:	3800      	subs	r0, #0
    723e:	bf18      	it	ne
    7240:	2001      	movne	r0, #1
    7242:	4770      	bx	lr
    7244:	2001      	movs	r0, #1
}
    7246:	4770      	bx	lr

00007248 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    7248:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    724a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    724c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7250:	05c9      	lsls	r1, r1, #23
    7252:	d518      	bpl.n	7286 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7254:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    7258:	b1a9      	cbz	r1, 7286 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    725a:	f04f 0020 	mov.w	r0, #32
    725e:	f3ef 8111 	mrs	r1, BASEPRI
    7262:	f380 8812 	msr	BASEPRI_MAX, r0
    7266:	f3bf 8f6f 	isb	sy
    726a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    726e:	b130      	cbz	r0, 727e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7270:	2000      	movs	r0, #0
    7272:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    7276:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    727a:	2001      	movs	r0, #1
    727c:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    727e:	f381 8811 	msr	BASEPRI, r1
    7282:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    7286:	6852      	ldr	r2, [r2, #4]
    7288:	06d2      	lsls	r2, r2, #27
    728a:	d515      	bpl.n	72b8 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    728c:	f04f 0120 	mov.w	r1, #32
    7290:	f3ef 8211 	mrs	r2, BASEPRI
    7294:	f381 8812 	msr	BASEPRI_MAX, r1
    7298:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    729c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    72a0:	b111      	cbz	r1, 72a8 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    72a2:	2100      	movs	r1, #0
    72a4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    72a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    72ac:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    72b0:	f382 8811 	msr	BASEPRI, r2
    72b4:	f3bf 8f6f 	isb	sy
}
    72b8:	4770      	bx	lr

000072ba <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    72ba:	b510      	push	{r4, lr}
    72bc:	4604      	mov	r4, r0
    72be:	2200      	movs	r2, #0
    72c0:	2101      	movs	r1, #1
    72c2:	2009      	movs	r0, #9
    72c4:	f7fb fc9a 	bl	2bfc <z_arm_irq_priority_set>
    72c8:	2009      	movs	r0, #9
    72ca:	f7fb fc7b 	bl	2bc4 <arch_irq_enable>
    72ce:	4620      	mov	r0, r4
    72d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72d4:	f7fc be32 	b.w	3f3c <uarte_instance_init.constprop.0>

000072d8 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    72d8:	b510      	push	{r4, lr}
    72da:	4604      	mov	r4, r0
    72dc:	2200      	movs	r2, #0
    72de:	2101      	movs	r1, #1
    72e0:	2008      	movs	r0, #8
    72e2:	f7fb fc8b 	bl	2bfc <z_arm_irq_priority_set>
    72e6:	2008      	movs	r0, #8
    72e8:	f7fb fc6c 	bl	2bc4 <arch_irq_enable>
    72ec:	4620      	mov	r0, r4
    72ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    72f2:	f7fc be23 	b.w	3f3c <uarte_instance_init.constprop.0>

000072f6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    72f6:	4770      	bx	lr

000072f8 <sys_clock_cycle_get_32>:
{
    72f8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    72fa:	f7fc ff85 	bl	4208 <z_nrf_rtc_timer_read>
}
    72fe:	bd08      	pop	{r3, pc}

00007300 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7300:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7302:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    7306:	6843      	ldr	r3, [r0, #4]
    7308:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    730a:	7a05      	ldrb	r5, [r0, #8]
    730c:	6844      	ldr	r4, [r0, #4]
    730e:	4435      	add	r5, r6
    7310:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    7314:	42a3      	cmp	r3, r4
    7316:	d902      	bls.n	731e <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    7318:	f06f 0001 	mvn.w	r0, #1
}
    731c:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    731e:	795c      	ldrb	r4, [r3, #5]
    7320:	428c      	cmp	r4, r1
    7322:	d001      	beq.n	7328 <pinctrl_lookup_state+0x28>
		(*state)++;
    7324:	3308      	adds	r3, #8
    7326:	e7ef      	b.n	7308 <pinctrl_lookup_state+0x8>
			return 0;
    7328:	2000      	movs	r0, #0
    732a:	e7f7      	b.n	731c <pinctrl_lookup_state+0x1c>

0000732c <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    732c:	f7fe bfc0 	b.w	62b0 <nrf_cc3xx_platform_init_no_rng>

00007330 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7330:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    7332:	f7fb fadf 	bl	28f4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7336:	f7fb fbab 	bl	2a90 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    733a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    733e:	f7fe bfb7 	b.w	62b0 <nrf_cc3xx_platform_init_no_rng>

00007342 <z_impl_gpio_pin_configure>:
{
    7342:	b4f0      	push	{r4, r5, r6, r7}
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7344:	02d4      	lsls	r4, r2, #11
{
    7346:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    7348:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    734a:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    734c:	d506      	bpl.n	735c <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    734e:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    7352:	d003      	beq.n	735c <z_impl_gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7354:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7356:	bf48      	it	mi
    7358:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    735c:	2501      	movs	r5, #1
    735e:	6834      	ldr	r4, [r6, #0]
    7360:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7362:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7366:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7368:	bf4c      	ite	mi
    736a:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    736c:	43ac      	bicpl	r4, r5
    736e:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    7370:	683b      	ldr	r3, [r7, #0]
}
    7372:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    7374:	4718      	bx	r3

00007376 <gpio_pin_interrupt_configure>:
{
    7376:	b430      	push	{r4, r5}
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    7378:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
    737a:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
    737c:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    737e:	d506      	bpl.n	738e <gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    7380:	2301      	movs	r3, #1
    7382:	682d      	ldr	r5, [r5, #0]
    7384:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    7386:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    7388:	bf18      	it	ne
    738a:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    738e:	69a4      	ldr	r4, [r4, #24]
    7390:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    7394:	46a4      	mov	ip, r4
}
    7396:	bc30      	pop	{r4, r5}
    7398:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    739c:	4760      	bx	ip

0000739e <hx711_gpio_callback>:
{
    739e:	b510      	push	{r4, lr}
    73a0:	460c      	mov	r4, r1
	const struct hx711_config *cfg = data->dev->config;
    73a2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	gpio_pin_interrupt_configure(data->dout_gpio, cfg->dout_pin, GPIO_INT_DISABLE);
    73a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    73aa:	685b      	ldr	r3, [r3, #4]
    73ac:	f854 0c0c 	ldr.w	r0, [r4, #-12]
    73b0:	7819      	ldrb	r1, [r3, #0]
    73b2:	f7ff ffe0 	bl	7376 <gpio_pin_interrupt_configure>
    73b6:	f104 000c 	add.w	r0, r4, #12
}
    73ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73be:	f7fe b9cf 	b.w	5760 <z_impl_k_sem_give>

000073c2 <gpio_pin_set.constprop.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    73c2:	6903      	ldr	r3, [r0, #16]
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	071b      	lsls	r3, r3, #28
		value = (value != 0) ? 0 : 1;
    73c8:	bf48      	it	mi
    73ca:	f081 0101 	eormi.w	r1, r1, #1
	if (value != 0)	{
    73ce:	b119      	cbz	r1, 73d8 <gpio_pin_set.constprop.0+0x16>
	return api->port_set_bits_raw(port, pins);
    73d0:	6883      	ldr	r3, [r0, #8]
    73d2:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    73d4:	2108      	movs	r1, #8
    73d6:	4718      	bx	r3
    73d8:	6883      	ldr	r3, [r0, #8]
    73da:	691b      	ldr	r3, [r3, #16]
    73dc:	e7fa      	b.n	73d4 <gpio_pin_set.constprop.0+0x12>

000073de <hx711_cycle>:
{
    73de:	b513      	push	{r0, r1, r4, lr}
    73e0:	4604      	mov	r4, r0
	gpio_pin_set(data->sck_gpio, hx711_config.sck_pin, true);
    73e2:	2101      	movs	r1, #1
    73e4:	6880      	ldr	r0, [r0, #8]
    73e6:	f7ff ffec 	bl	73c2 <gpio_pin_set.constprop.0>
	z_impl_k_busy_wait(usec_to_wait);
    73ea:	2001      	movs	r0, #1
    73ec:	f000 faa3 	bl	7936 <z_impl_k_busy_wait>
	gpio_pin_set(data->sck_gpio, hx711_config.sck_pin, false);
    73f0:	2100      	movs	r1, #0
    73f2:	68a0      	ldr	r0, [r4, #8]
    73f4:	f7ff ffe5 	bl	73c2 <gpio_pin_set.constprop.0>
    73f8:	2001      	movs	r0, #1
    73fa:	f000 fa9c 	bl	7936 <z_impl_k_busy_wait>
	return gpio_pin_get(data->dout_gpio, hx711_config.dout_pin);
    73fe:	6860      	ldr	r0, [r4, #4]
	const struct gpio_driver_data *const data =
    7400:	6904      	ldr	r4, [r0, #16]
	return api->port_get_raw(port, value);
    7402:	6883      	ldr	r3, [r0, #8]
    7404:	a901      	add	r1, sp, #4
    7406:	685b      	ldr	r3, [r3, #4]
    7408:	4798      	blx	r3
	if (ret == 0) {
    740a:	b920      	cbnz	r0, 7416 <hx711_cycle+0x38>
		*value ^= data->invert;
    740c:	6823      	ldr	r3, [r4, #0]
    740e:	9801      	ldr	r0, [sp, #4]
    7410:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    7412:	f3c0 0080 	ubfx	r0, r0, #2, #1
}
    7416:	b002      	add	sp, #8
    7418:	bd10      	pop	{r4, pc}

0000741a <hx711_attr_set>:
	switch (hx711_attr) {
    741a:	2a0f      	cmp	r2, #15
	struct hx711_data *data = dev->data;
    741c:	6901      	ldr	r1, [r0, #16]
	switch (hx711_attr) {
    741e:	d007      	beq.n	7430 <hx711_attr_set+0x16>
    7420:	2a10      	cmp	r2, #16
    7422:	d00a      	beq.n	743a <hx711_attr_set+0x20>
    7424:	2a08      	cmp	r2, #8
    7426:	d114      	bne.n	7452 <hx711_attr_set+0x38>
	data->offset = offset->val1;
    7428:	681b      	ldr	r3, [r3, #0]
    742a:	630b      	str	r3, [r1, #48]	; 0x30
		return ret;
    742c:	2000      	movs	r0, #0
    742e:	4770      	bx	lr
	data->slope.val1 = slope->val1;
    7430:	681a      	ldr	r2, [r3, #0]
    7432:	634a      	str	r2, [r1, #52]	; 0x34
	data->slope.val2 = slope->val2;
    7434:	685b      	ldr	r3, [r3, #4]
    7436:	638b      	str	r3, [r1, #56]	; 0x38
		return ret;
    7438:	e7f8      	b.n	742c <hx711_attr_set+0x12>
		ret = hx711_attr_set_gain(dev, val);
    743a:	681b      	ldr	r3, [r3, #0]
	switch (val->val1) {
    743c:	2b02      	cmp	r3, #2
    743e:	d003      	beq.n	7448 <hx711_attr_set+0x2e>
    7440:	2b03      	cmp	r3, #3
    7442:	d001      	beq.n	7448 <hx711_attr_set+0x2e>
    7444:	2b01      	cmp	r3, #1
    7446:	d104      	bne.n	7452 <hx711_attr_set+0x38>
		data->gain = HX711_GAIN_128X;
    7448:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
	return hx711_sample_fetch(dev, HX711_SENSOR_CHAN_WEIGHT);
    744c:	213a      	movs	r1, #58	; 0x3a
    744e:	f7fd b96f 	b.w	4730 <hx711_sample_fetch>
	switch (val->val1) {
    7452:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    7456:	4770      	bx	lr

00007458 <avia_hx711_tare>:
	for (int i = 0; i < readings; i++) {
    7458:	2901      	cmp	r1, #1
{
    745a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < readings; i++) {
    745e:	bf38      	it	cc
    7460:	2101      	movcc	r1, #1
	int32_t avg = 0;
    7462:	2400      	movs	r4, #0
{
    7464:	4606      	mov	r6, r0
	for (int i = 0; i < readings; i++) {
    7466:	460d      	mov	r5, r1
    7468:	4627      	mov	r7, r4
	struct hx711_data *data = dev->data;
    746a:	f8d0 8010 	ldr.w	r8, [r0, #16]
		hx711_sample_fetch(dev, HX711_SENSOR_CHAN_WEIGHT);
    746e:	213a      	movs	r1, #58	; 0x3a
    7470:	4630      	mov	r0, r6
    7472:	f7fd f95d 	bl	4730 <hx711_sample_fetch>
	for (int i = 0; i < readings; i++) {
    7476:	3701      	adds	r7, #1
		avg += data->reading;
    7478:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
	for (int i = 0; i < readings; i++) {
    747c:	42af      	cmp	r7, r5
		avg += data->reading;
    747e:	441c      	add	r4, r3
	for (int i = 0; i < readings; i++) {
    7480:	dbf5      	blt.n	746e <avia_hx711_tare+0x16>
	avg = avg / readings;
    7482:	fb94 f0f5 	sdiv	r0, r4, r5
	data->offset = avg;
    7486:	f8c8 0030 	str.w	r0, [r8, #48]	; 0x30
}
    748a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000748e <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    748e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7492:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    7496:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    749a:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    749e:	2a09      	cmp	r2, #9
    74a0:	d103      	bne.n	74aa <nrf91_errata_14+0x1c>
                switch(var2)
    74a2:	1e43      	subs	r3, r0, #1
    74a4:	4258      	negs	r0, r3
    74a6:	4158      	adcs	r0, r3
    74a8:	4770      	bx	lr
                        return false;
    74aa:	2000      	movs	r0, #0
}
    74ac:	4770      	bx	lr

000074ae <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    74ae:	4700      	bx	r0

000074b0 <nrfx_busy_wait>:
    74b0:	f000 ba41 	b.w	7936 <z_impl_k_busy_wait>

000074b4 <clock_stop>:
{
    74b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    74b6:	4604      	mov	r4, r0
    74b8:	b118      	cbz	r0, 74c2 <clock_stop+0xe>
    74ba:	2801      	cmp	r0, #1
    74bc:	d020      	beq.n	7500 <clock_stop+0x4c>
}
    74be:	b003      	add	sp, #12
    74c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    74c6:	2202      	movs	r2, #2
    74c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74cc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    74d0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    74d4:	2201      	movs	r2, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    74d6:	4607      	mov	r7, r0
    74d8:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    74da:	2301      	movs	r3, #1
    74dc:	f242 7510 	movw	r5, #10000	; 0x2710
    74e0:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    74e4:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    74e8:	b1bc      	cbz	r4, 751a <clock_stop+0x66>
    74ea:	2c01      	cmp	r4, #1
    74ec:	d1e7      	bne.n	74be <clock_stop+0xa>
            if (p_clk_src != NULL)
    74ee:	b38f      	cbz	r7, 7554 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    74f0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    74f4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    74f8:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74fa:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    74fe:	e014      	b.n	752a <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    7500:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7504:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    7506:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    750a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    750e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    7512:	f10d 0707 	add.w	r7, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7516:	6058      	str	r0, [r3, #4]
    7518:	e7df      	b.n	74da <clock_stop+0x26>
            if (p_clk_src != NULL)
    751a:	b18f      	cbz	r7, 7540 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    751c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7520:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    7524:	703b      	strb	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7526:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    752a:	03da      	lsls	r2, r3, #15
    752c:	d5c7      	bpl.n	74be <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    752e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    7532:	2801      	cmp	r0, #1
    7534:	d1c3      	bne.n	74be <clock_stop+0xa>
    7536:	f7ff ffbb 	bl	74b0 <nrfx_busy_wait>
    753a:	3d01      	subs	r5, #1
    753c:	d1d4      	bne.n	74e8 <clock_stop+0x34>
    753e:	e7be      	b.n	74be <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7540:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    7544:	03d9      	lsls	r1, r3, #15
    7546:	d5ba      	bpl.n	74be <clock_stop+0xa>
    7548:	2001      	movs	r0, #1
    754a:	f7ff ffb1 	bl	74b0 <nrfx_busy_wait>
    754e:	3d01      	subs	r5, #1
    7550:	d1f6      	bne.n	7540 <clock_stop+0x8c>
    7552:	e7b4      	b.n	74be <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7554:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7558:	03db      	lsls	r3, r3, #15
    755a:	d5b0      	bpl.n	74be <clock_stop+0xa>
    755c:	2001      	movs	r0, #1
    755e:	f7ff ffa7 	bl	74b0 <nrfx_busy_wait>
    7562:	3d01      	subs	r5, #1
    7564:	d1f6      	bne.n	7554 <clock_stop+0xa0>
    7566:	e7aa      	b.n	74be <clock_stop+0xa>

00007568 <nrfx_clock_enable>:
{
    7568:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    756a:	2005      	movs	r0, #5
    756c:	f7fb fb38 	bl	2be0 <arch_irq_is_enabled>
    7570:	b910      	cbnz	r0, 7578 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7572:	2005      	movs	r0, #5
    7574:	f7fb fb26 	bl	2bc4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7578:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    757c:	2201      	movs	r2, #1
    757e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    7582:	bd08      	pop	{r3, pc}

00007584 <nrfx_clock_start>:
{
    7584:	b508      	push	{r3, lr}
    switch (domain)
    7586:	b110      	cbz	r0, 758e <nrfx_clock_start+0xa>
    7588:	2801      	cmp	r0, #1
    758a:	d030      	beq.n	75ee <nrfx_clock_start+0x6a>
}
    758c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    758e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    7592:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7596:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    759a:	03c9      	lsls	r1, r1, #15
    759c:	d40e      	bmi.n	75bc <nrfx_clock_start+0x38>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    759e:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    75a2:	07db      	lsls	r3, r3, #31
    75a4:	d513      	bpl.n	75ce <nrfx_clock_start+0x4a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    75a6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    75aa:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    75ae:	3b01      	subs	r3, #1
    75b0:	2b01      	cmp	r3, #1
    75b2:	d809      	bhi.n	75c8 <nrfx_clock_start+0x44>
    p_reg->INTENSET = mask;
    75b4:	2302      	movs	r3, #2
    75b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    75ba:	e7e7      	b.n	758c <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    75bc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    75c0:	2b02      	cmp	r3, #2
    75c2:	d005      	beq.n	75d0 <nrfx_clock_start+0x4c>
    75c4:	2b01      	cmp	r3, #1
    75c6:	d002      	beq.n	75ce <nrfx_clock_start+0x4a>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    75c8:	2000      	movs	r0, #0
    75ca:	f7ff ff73 	bl	74b4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    75ce:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    75d0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    75d4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75d8:	2300      	movs	r3, #0
    75da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    75de:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    75e2:	2302      	movs	r3, #2
    75e4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75e8:	2301      	movs	r3, #1
    75ea:	6093      	str	r3, [r2, #8]
}
    75ec:	e7ce      	b.n	758c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75ee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    75f2:	2200      	movs	r2, #0
    75f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    75f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    75fc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7600:	6018      	str	r0, [r3, #0]
}
    7602:	e7c3      	b.n	758c <nrfx_clock_start+0x8>

00007604 <nrfx_clock_stop>:
    clock_stop(domain);
    7604:	f7ff bf56 	b.w	74b4 <clock_stop>

00007608 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    7608:	4770      	bx	lr

0000760a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    760a:	b140      	cbz	r0, 761e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    760c:	68c3      	ldr	r3, [r0, #12]
    760e:	7858      	ldrb	r0, [r3, #1]
    7610:	f010 0001 	ands.w	r0, r0, #1
    7614:	bf1e      	ittt	ne
    7616:	7818      	ldrbne	r0, [r3, #0]
    7618:	fab0 f080 	clzne	r0, r0
    761c:	0940      	lsrne	r0, r0, #5
}
    761e:	4770      	bx	lr

00007620 <z_early_memset>:
	(void) memset(dst, c, n);
    7620:	f7ff bcf7 	b.w	7012 <memset>

00007624 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7624:	f7ff bcea 	b.w	6ffc <memcpy>

00007628 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7628:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    762c:	4313      	orrs	r3, r2
    762e:	f013 0303 	ands.w	r3, r3, #3
    7632:	d10c      	bne.n	764e <create_free_list+0x26>
	slab->free_list = NULL;
    7634:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7636:	6881      	ldr	r1, [r0, #8]
    7638:	4299      	cmp	r1, r3
    763a:	d801      	bhi.n	7640 <create_free_list+0x18>
	return 0;
    763c:	2000      	movs	r0, #0
    763e:	4770      	bx	lr
		*(char **)p = slab->free_list;
    7640:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7642:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    7644:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    7646:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    7648:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    764a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    764c:	e7f3      	b.n	7636 <create_free_list+0xe>
		return -EINVAL;
    764e:	f06f 0015 	mvn.w	r0, #21
}
    7652:	4770      	bx	lr

00007654 <k_mem_slab_init>:
{
    7654:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    7656:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    765a:	2300      	movs	r3, #0
	slab->buffer = buffer;
    765c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    765e:	6183      	str	r3, [r0, #24]
{
    7660:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    7662:	f7ff ffe1 	bl	7628 <create_free_list>
	if (rc < 0) {
    7666:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    7668:	bfa8      	it	ge
    766a:	e9c4 4400 	strdge	r4, r4, [r4]
}
    766e:	bd10      	pop	{r4, pc}

00007670 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7672:	4604      	mov	r4, r0
    7674:	460d      	mov	r5, r1
	__asm__ volatile(
    7676:	f04f 0320 	mov.w	r3, #32
    767a:	f3ef 8611 	mrs	r6, BASEPRI
    767e:	f383 8812 	msr	BASEPRI_MAX, r3
    7682:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    7686:	6947      	ldr	r7, [r0, #20]
    7688:	b977      	cbnz	r7, 76a8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    768a:	f000 f8da 	bl	7842 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    768e:	b158      	cbz	r0, 76a8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7690:	682a      	ldr	r2, [r5, #0]
    7692:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7694:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    7696:	f000 f89d 	bl	77d4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    769a:	4631      	mov	r1, r6
    769c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    76a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    76a4:	f7fe ba4c 	b.w	5b40 <z_reschedule>
	**(char ***) mem = slab->free_list;
    76a8:	682b      	ldr	r3, [r5, #0]
    76aa:	6962      	ldr	r2, [r4, #20]
    76ac:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    76ae:	682b      	ldr	r3, [r5, #0]
    76b0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    76b2:	69a3      	ldr	r3, [r4, #24]
    76b4:	3b01      	subs	r3, #1
    76b6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    76b8:	f386 8811 	msr	BASEPRI, r6
    76bc:	f3bf 8f6f 	isb	sy
}
    76c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000076c2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    76c2:	f3ef 8005 	mrs	r0, IPSR
}
    76c6:	3800      	subs	r0, #0
    76c8:	bf18      	it	ne
    76ca:	2001      	movne	r0, #1
    76cc:	4770      	bx	lr

000076ce <z_impl_k_thread_name_set>:
}
    76ce:	f06f 0057 	mvn.w	r0, #87	; 0x57
    76d2:	4770      	bx	lr

000076d4 <k_thread_name_get>:
}
    76d4:	2000      	movs	r0, #0
    76d6:	4770      	bx	lr

000076d8 <z_pm_save_idle_exit>:
{
    76d8:	b508      	push	{r3, lr}
	pm_system_resume();
    76da:	f7fb f80b 	bl	26f4 <pm_system_resume>
}
    76de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    76e2:	f7ff be08 	b.w	72f6 <sys_clock_idle_exit>

000076e6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    76e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    76ea:	428b      	cmp	r3, r1
    76ec:	d001      	beq.n	76f2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    76ee:	f7fe b9e1 	b.w	5ab4 <z_set_prio>
}
    76f2:	2000      	movs	r0, #0
    76f4:	4770      	bx	lr

000076f6 <z_impl_k_mutex_init>:
{
    76f6:	4603      	mov	r3, r0
	mutex->owner = NULL;
    76f8:	2000      	movs	r0, #0
    76fa:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    76fe:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    7702:	4770      	bx	lr

00007704 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    7704:	b13a      	cbz	r2, 7716 <z_impl_k_sem_init+0x12>
    7706:	428a      	cmp	r2, r1
    7708:	d305      	bcc.n	7716 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    770a:	e9c0 1202 	strd	r1, r2, [r0, #8]
    770e:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    7712:	2000      	movs	r0, #0
    7714:	4770      	bx	lr
		return -EINVAL;
    7716:	f06f 0015 	mvn.w	r0, #21
}
    771a:	4770      	bx	lr

0000771c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    771c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7720:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7722:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7724:	2300      	movs	r3, #0
	node->prev = NULL;
    7726:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    772a:	4770      	bx	lr

0000772c <unpend_thread_no_timeout>:
{
    772c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    772e:	f7ff fff5 	bl	771c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7732:	7b43      	ldrb	r3, [r0, #13]
    7734:	f023 0302 	bic.w	r3, r3, #2
    7738:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    773a:	2300      	movs	r3, #0
    773c:	6083      	str	r3, [r0, #8]
}
    773e:	bd08      	pop	{r3, pc}

00007740 <z_thread_timeout>:
{
    7740:	4601      	mov	r1, r0
    7742:	b510      	push	{r4, lr}
	__asm__ volatile(
    7744:	f04f 0320 	mov.w	r3, #32
    7748:	f3ef 8411 	mrs	r4, BASEPRI
    774c:	f383 8812 	msr	BASEPRI_MAX, r3
    7750:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7754:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    7758:	f013 0f28 	tst.w	r3, #40	; 0x28
    775c:	d10d      	bne.n	777a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    775e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7762:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    7764:	b10b      	cbz	r3, 776a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    7766:	f7ff ffe1 	bl	772c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    776a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    776e:	f023 0314 	bic.w	r3, r3, #20
    7772:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    7776:	f7fe f8a7 	bl	58c8 <ready_thread>
	__asm__ volatile(
    777a:	f384 8811 	msr	BASEPRI, r4
    777e:	f3bf 8f6f 	isb	sy
}
    7782:	bd10      	pop	{r4, pc}

00007784 <add_to_waitq_locked>:
{
    7784:	b538      	push	{r3, r4, r5, lr}
    7786:	4604      	mov	r4, r0
    7788:	460d      	mov	r5, r1
	unready_thread(thread);
    778a:	f7fe f8d1 	bl	5930 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    778e:	7b63      	ldrb	r3, [r4, #13]
    7790:	f043 0302 	orr.w	r3, r3, #2
    7794:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7796:	b1e5      	cbz	r5, 77d2 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    7798:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    779a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    779c:	429d      	cmp	r5, r3
    779e:	d109      	bne.n	77b4 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    77a0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    77a2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    77a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    77a8:	606c      	str	r4, [r5, #4]
}
    77aa:	e012      	b.n	77d2 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    77ac:	686a      	ldr	r2, [r5, #4]
    77ae:	4293      	cmp	r3, r2
    77b0:	d0f6      	beq.n	77a0 <add_to_waitq_locked+0x1c>
    77b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    77b4:	2b00      	cmp	r3, #0
    77b6:	d0f3      	beq.n	77a0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    77b8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    77bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    77c0:	428a      	cmp	r2, r1
    77c2:	d0f3      	beq.n	77ac <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    77c4:	4291      	cmp	r1, r2
    77c6:	ddf1      	ble.n	77ac <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    77c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    77ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    77ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    77d0:	605c      	str	r4, [r3, #4]
}
    77d2:	bd38      	pop	{r3, r4, r5, pc}

000077d4 <z_ready_thread>:
{
    77d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    77d6:	f04f 0320 	mov.w	r3, #32
    77da:	f3ef 8411 	mrs	r4, BASEPRI
    77de:	f383 8812 	msr	BASEPRI_MAX, r3
    77e2:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    77e6:	f7fe f86f 	bl	58c8 <ready_thread>
	__asm__ volatile(
    77ea:	f384 8811 	msr	BASEPRI, r4
    77ee:	f3bf 8f6f 	isb	sy
}
    77f2:	bd10      	pop	{r4, pc}

000077f4 <z_unpend_thread_no_timeout>:
{
    77f4:	b508      	push	{r3, lr}
	__asm__ volatile(
    77f6:	f04f 0320 	mov.w	r3, #32
    77fa:	f3ef 8111 	mrs	r1, BASEPRI
    77fe:	f383 8812 	msr	BASEPRI_MAX, r3
    7802:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    7806:	f7ff ff91 	bl	772c <unpend_thread_no_timeout>
	__asm__ volatile(
    780a:	f381 8811 	msr	BASEPRI, r1
    780e:	f3bf 8f6f 	isb	sy
}
    7812:	bd08      	pop	{r3, pc}

00007814 <z_unpend1_no_timeout>:
{
    7814:	b508      	push	{r3, lr}
    7816:	4603      	mov	r3, r0
	__asm__ volatile(
    7818:	f04f 0220 	mov.w	r2, #32
    781c:	f3ef 8111 	mrs	r1, BASEPRI
    7820:	f382 8812 	msr	BASEPRI_MAX, r2
    7824:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7828:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    782a:	4283      	cmp	r3, r0
    782c:	d007      	beq.n	783e <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    782e:	b108      	cbz	r0, 7834 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    7830:	f7ff ff7c 	bl	772c <unpend_thread_no_timeout>
	__asm__ volatile(
    7834:	f381 8811 	msr	BASEPRI, r1
    7838:	f3bf 8f6f 	isb	sy
}
    783c:	bd08      	pop	{r3, pc}
    783e:	2000      	movs	r0, #0
    7840:	e7f8      	b.n	7834 <z_unpend1_no_timeout+0x20>

00007842 <z_unpend_first_thread>:
{
    7842:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7844:	f04f 0320 	mov.w	r3, #32
    7848:	f3ef 8511 	mrs	r5, BASEPRI
    784c:	f383 8812 	msr	BASEPRI_MAX, r3
    7850:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7854:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7856:	42a0      	cmp	r0, r4
    7858:	d00d      	beq.n	7876 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    785a:	b134      	cbz	r4, 786a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    785c:	4620      	mov	r0, r4
    785e:	f7ff ff65 	bl	772c <unpend_thread_no_timeout>
    7862:	f104 0018 	add.w	r0, r4, #24
    7866:	f000 f81e 	bl	78a6 <z_abort_timeout>
	__asm__ volatile(
    786a:	f385 8811 	msr	BASEPRI, r5
    786e:	f3bf 8f6f 	isb	sy
}
    7872:	4620      	mov	r0, r4
    7874:	bd38      	pop	{r3, r4, r5, pc}
    7876:	2400      	movs	r4, #0
    7878:	e7f7      	b.n	786a <z_unpend_first_thread+0x28>

0000787a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    787a:	4603      	mov	r3, r0
    787c:	b920      	cbnz	r0, 7888 <z_reschedule_irqlock+0xe>
    787e:	f3ef 8205 	mrs	r2, IPSR
    7882:	b90a      	cbnz	r2, 7888 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7884:	f7fb b9f0 	b.w	2c68 <arch_swap>
    7888:	f383 8811 	msr	BASEPRI, r3
    788c:	f3bf 8f6f 	isb	sy
}
    7890:	4770      	bx	lr

00007892 <z_reschedule_unlocked>:
	__asm__ volatile(
    7892:	f04f 0320 	mov.w	r3, #32
    7896:	f3ef 8011 	mrs	r0, BASEPRI
    789a:	f383 8812 	msr	BASEPRI_MAX, r3
    789e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    78a2:	f7ff bfea 	b.w	787a <z_reschedule_irqlock>

000078a6 <z_abort_timeout>:
{
    78a6:	b510      	push	{r4, lr}
    78a8:	f04f 0220 	mov.w	r2, #32
    78ac:	f3ef 8411 	mrs	r4, BASEPRI
    78b0:	f382 8812 	msr	BASEPRI_MAX, r2
    78b4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    78b8:	6803      	ldr	r3, [r0, #0]
    78ba:	b13b      	cbz	r3, 78cc <z_abort_timeout+0x26>
			remove_timeout(to);
    78bc:	f7fe fb2c 	bl	5f18 <remove_timeout>
			ret = 0;
    78c0:	2000      	movs	r0, #0
	__asm__ volatile(
    78c2:	f384 8811 	msr	BASEPRI, r4
    78c6:	f3bf 8f6f 	isb	sy
}
    78ca:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    78cc:	f06f 0015 	mvn.w	r0, #21
    78d0:	e7f7      	b.n	78c2 <z_abort_timeout+0x1c>

000078d2 <z_get_next_timeout_expiry>:
{
    78d2:	b510      	push	{r4, lr}
	__asm__ volatile(
    78d4:	f04f 0320 	mov.w	r3, #32
    78d8:	f3ef 8411 	mrs	r4, BASEPRI
    78dc:	f383 8812 	msr	BASEPRI_MAX, r3
    78e0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    78e4:	f7fe faf0 	bl	5ec8 <next_timeout>
	__asm__ volatile(
    78e8:	f384 8811 	msr	BASEPRI, r4
    78ec:	f3bf 8f6f 	isb	sy
}
    78f0:	bd10      	pop	{r4, pc}

000078f2 <z_set_timeout_expiry>:
{
    78f2:	b570      	push	{r4, r5, r6, lr}
    78f4:	4604      	mov	r4, r0
    78f6:	460d      	mov	r5, r1
	__asm__ volatile(
    78f8:	f04f 0320 	mov.w	r3, #32
    78fc:	f3ef 8611 	mrs	r6, BASEPRI
    7900:	f383 8812 	msr	BASEPRI_MAX, r3
    7904:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    7908:	f7fe fade 	bl	5ec8 <next_timeout>
			      || (ticks <= next_to);
    790c:	2801      	cmp	r0, #1
    790e:	dd07      	ble.n	7920 <z_set_timeout_expiry+0x2e>
    7910:	42a0      	cmp	r0, r4
    7912:	db05      	blt.n	7920 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7914:	42a0      	cmp	r0, r4
    7916:	4629      	mov	r1, r5
    7918:	bfa8      	it	ge
    791a:	4620      	movge	r0, r4
    791c:	f7fc fde4 	bl	44e8 <sys_clock_set_timeout>
	__asm__ volatile(
    7920:	f386 8811 	msr	BASEPRI, r6
    7924:	f3bf 8f6f 	isb	sy
}
    7928:	bd70      	pop	{r4, r5, r6, pc}

0000792a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    792a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    792c:	f7fe fbea 	bl	6104 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7930:	bd08      	pop	{r3, pc}

00007932 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7932:	f7fe bbe7 	b.w	6104 <sys_clock_tick_get>

00007936 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7936:	b108      	cbz	r0, 793c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7938:	f7fa b996 	b.w	1c68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    793c:	4770      	bx	lr

0000793e <k_timer_init>:
	timer->status = 0U;
    793e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7940:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    7944:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    7948:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    794c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7950:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7952:	6343      	str	r3, [r0, #52]	; 0x34
}
    7954:	4770      	bx	lr

00007956 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7956:	b510      	push	{r4, lr}
    7958:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    795a:	f7ff ffa4 	bl	78a6 <z_abort_timeout>

	if (inactive) {
    795e:	b9b0      	cbnz	r0, 798e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7960:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7962:	b10b      	cbz	r3, 7968 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7964:	4620      	mov	r0, r4
    7966:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7968:	f104 0018 	add.w	r0, r4, #24
    796c:	f7ff ff52 	bl	7814 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7970:	b168      	cbz	r0, 798e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7972:	f7ff ff2f 	bl	77d4 <z_ready_thread>
	__asm__ volatile(
    7976:	f04f 0320 	mov.w	r3, #32
    797a:	f3ef 8011 	mrs	r0, BASEPRI
    797e:	f383 8812 	msr	BASEPRI_MAX, r3
    7982:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    798a:	f7ff bf76 	b.w	787a <z_reschedule_irqlock>
    798e:	bd10      	pop	{r4, pc}
